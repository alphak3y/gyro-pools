{"abi": [{"inputs": [{"internalType": "contract IAuthorizer", "name": "authorizer", "type": "address"}], "stateMutability": "nonpayable", "type": "constructor", "name": "constructor"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"indexed": true, "internalType": "address", "name": "liquidityProvider", "type": "address"}, {"indexed": false, "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]"}, {"indexed": false, "internalType": "int256[]", "name": "deltas", "type": "int256[]"}, {"indexed": false, "internalType": "uint256[]", "name": "protocolFees", "type": "uint256[]"}], "name": "PoolBalanceChanged", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"indexed": true, "internalType": "contract IERC20", "name": "tokenIn", "type": "address"}, {"indexed": true, "internalType": "contract IERC20", "name": "tokenOut", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256"}], "name": "Swap", "type": "event"}, {"inputs": [{"internalType": "contract IBasePool", "name": "pool", "type": "address"}, {"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "address", "name": "sender", "type": "address"}, {"internalType": "address", "name": "recipient", "type": "address"}, {"internalType": "uint256[]", "name": "currentBalances", "type": "uint256[]"}, {"internalType": "uint256", "name": "lastChangeBlock", "type": "uint256"}, {"internalType": "uint256", "name": "protocolSwapFeePercentage", "type": "uint256"}, {"internalType": "uint256", "name": "bptAmountIn", "type": "uint256"}], "name": "callExitPoolGyro", "outputs": [{"internalType": "uint256[]", "name": "amountsOut", "type": "uint256[]"}, {"internalType": "uint256[]", "name": "dueProtocolFeeAmounts", "type": "uint256[]"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "pool", "type": "address"}, {"components": [{"internalType": "enum IVault.SwapKind", "name": "kind", "type": "uint8"}, {"internalType": "contract IERC20", "name": "tokenIn", "type": "address"}, {"internalType": "contract IERC20", "name": "tokenOut", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}, {"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "uint256", "name": "lastChangeBlock", "type": "uint256"}, {"internalType": "address", "name": "from", "type": "address"}, {"internalType": "address", "name": "to", "type": "address"}, {"internalType": "bytes", "name": "userData", "type": "bytes"}], "internalType": "struct IPoolSwapStructs.SwapRequest", "name": "request", "type": "tuple"}, {"internalType": "uint256[]", "name": "balances", "type": "uint256[]"}, {"internalType": "uint256", "name": "indexIn", "type": "uint256"}, {"internalType": "uint256", "name": "indexOut", "type": "uint256"}], "name": "callGeneralPoolSwap", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"components": [{"internalType": "contract IBasePool", "name": "pool", "type": "address"}, {"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "address", "name": "sender", "type": "address"}, {"internalType": "address", "name": "recipient", "type": "address"}, {"internalType": "uint256[]", "name": "currentBalances", "type": "uint256[]"}, {"internalType": "uint256", "name": "lastChangeBlock", "type": "uint256"}, {"internalType": "uint256", "name": "protocolSwapFeePercentage", "type": "uint256"}, {"internalType": "uint256[]", "name": "amountsIn", "type": "uint256[]"}, {"internalType": "uint256", "name": "bptOut", "type": "uint256"}], "internalType": "struct MockVault.CallJoinPoolGyroParams", "name": "params", "type": "tuple"}], "name": "callJoinPoolGyro", "outputs": [{"internalType": "uint256[]", "name": "amountsIn", "type": "uint256[]"}, {"internalType": "uint256[]", "name": "dueProtocolFeeAmounts", "type": "uint256[]"}], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "poolAddress", "type": "address"}, {"components": [{"internalType": "enum IVault.SwapKind", "name": "kind", "type": "uint8"}, {"internalType": "contract IERC20", "name": "tokenIn", "type": "address"}, {"internalType": "contract IERC20", "name": "tokenOut", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}, {"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "uint256", "name": "lastChangeBlock", "type": "uint256"}, {"internalType": "address", "name": "from", "type": "address"}, {"internalType": "address", "name": "to", "type": "address"}, {"internalType": "bytes", "name": "userData", "type": "bytes"}], "internalType": "struct IPoolSwapStructs.SwapRequest", "name": "request", "type": "tuple"}, {"internalType": "uint256", "name": "balanceTokenIn", "type": "uint256"}, {"internalType": "uint256", "name": "balanceTokenOut", "type": "uint256"}], "name": "callMinimalGyroPoolSwap", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "pool", "type": "address"}, {"components": [{"internalType": "enum IVault.SwapKind", "name": "kind", "type": "uint8"}, {"internalType": "contract IERC20", "name": "tokenIn", "type": "address"}, {"internalType": "contract IERC20", "name": "tokenOut", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}, {"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "uint256", "name": "lastChangeBlock", "type": "uint256"}, {"internalType": "address", "name": "from", "type": "address"}, {"internalType": "address", "name": "to", "type": "address"}, {"internalType": "bytes", "name": "userData", "type": "bytes"}], "internalType": "struct IPoolSwapStructs.SwapRequest", "name": "request", "type": "tuple"}, {"internalType": "uint256", "name": "balanceTokenIn", "type": "uint256"}, {"internalType": "uint256", "name": "balanceTokenOut", "type": "uint256"}], "name": "callMinimalPoolSwap", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [], "name": "getAuthorizer", "outputs": [{"internalType": "contract IAuthorizer", "name": "", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "getPoolId", "outputs": [{"internalType": "bytes32", "name": "", "type": "bytes32"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "contract IERC20", "name": "token", "type": "address"}], "name": "getPoolTokenInfo", "outputs": [{"internalType": "uint256", "name": "cash", "type": "uint256"}, {"internalType": "uint256", "name": "managed", "type": "uint256"}, {"internalType": "uint256", "name": "lastChangeBlock", "type": "uint256"}, {"internalType": "address", "name": "assetManager", "type": "address"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "bytes32", "name": "poolId", "type": "bytes32"}], "name": "getPoolTokens", "outputs": [{"internalType": "contract IERC20[]", "name": "tokens", "type": "address[]"}, {"internalType": "uint256[]", "name": "balances", "type": "uint256[]"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "enum IVault.PoolSpecialization", "name": "", "type": "uint8"}], "name": "registerPool", "outputs": [{"internalType": "bytes32", "name": "", "type": "bytes32"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "contract IERC20[]", "name": "tokens", "type": "address[]"}, {"internalType": "address[]", "name": "", "type": "address[]"}], "name": "registerTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "bytes32", "name": "poolId", "type": "bytes32"}, {"internalType": "uint256[]", "name": "balances", "type": "uint256[]"}], "name": "updateBalances", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "allSourcePaths": {"109": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IAuthorizer.sol", "110": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IBasePool.sol", "112": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IGeneralPool.sol", "113": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol", "114": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IPoolSwapStructs.sol", "30": "contracts/testing/MockVault.sol", "34": "contracts/testing/WeightedPoolUserData.sol", "52": "node_modules/@balancer-labs/v2-pool-utils/contracts/oracle/Buffer.sol", "54": "node_modules/@balancer-labs/v2-pool-utils/contracts/oracle/QueryProcessor.sol", "55": "node_modules/@balancer-labs/v2-pool-utils/contracts/oracle/Samples.sol", "62": "node_modules/@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol", "69": "node_modules/@balancer-labs/v2-solidity-utils/contracts/helpers/LogCompression.sol", "72": "node_modules/@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol", "74": "node_modules/@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol", "84": "node_modules/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol"}, "ast": {"absolutePath": "contracts/testing/MockVault.sol", "exportedSymbols": {"Buffer": [23178], "Errors": [27835], "IAsset": [31588], "IAuthorizer": [26291], "IBasePool": [26884], "IERC20": [26820], "IFlashLoanRecipient": [31607], "IGeneralPool": [26906], "IMinimalSwapInfoPool": [24320], "IPoolSwapStructs": [26931], "IPriceOracle": [27015], "IProtocolFeesCollector": [31672], "ISignaturesValidator": [31550], "ITemporarilyPausable": [31569], "IVault": [20147], "IWETH": [31584], "LogCompression": [18932], "LogExpMath": [29243], "MockVault": [15941], "QueryProcessor": [26742], "Samples": [27412], "WeightedPoolUserData": [17016], "WordCodec": [30084], "_require": [27430], "_revert": [27438]}, "id": 15942, "license": "GPL-3.0-or-later", "nodeType": "SourceUnit", "nodes": [{"id": 15131, "literals": ["solidity", "0.7", ".6"], "nodeType": "PragmaDirective", "src": "688:22:30"}, {"id": 15132, "literals": ["experimental", "ABIEncoderV2"], "nodeType": "PragmaDirective", "src": "711:33:30"}, {"absolutePath": "node_modules/@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol", "file": "@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol", "id": 15133, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 26821, "src": "746:76:30", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "node_modules/@balancer-labs/v2-pool-utils/contracts/oracle/QueryProcessor.sol", "file": "@balancer-labs/v2-pool-utils/contracts/oracle/QueryProcessor.sol", "id": 15134, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 26743, "src": "823:74:30", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IVault.sol", "file": "@balancer-labs/v2-vault/contracts/interfaces/IVault.sol", "id": 15135, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 20148, "src": "899:65:30", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IBasePool.sol", "file": "@balancer-labs/v2-vault/contracts/interfaces/IBasePool.sol", "id": 15136, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 26885, "src": "965:68:30", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IGeneralPool.sol", "file": "@balancer-labs/v2-vault/contracts/interfaces/IGeneralPool.sol", "id": 15137, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 26907, "src": "1034:71:30", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IPoolSwapStructs.sol", "file": "@balancer-labs/v2-vault/contracts/interfaces/IPoolSwapStructs.sol", "id": 15138, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 26932, "src": "1106:75:30", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "node_modules/@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol", "file": "@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol", "id": 15139, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 24321, "src": "1182:79:30", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/testing/WeightedPoolUserData.sol", "file": "./WeightedPoolUserData.sol", "id": 15140, "nodeType": "ImportDirective", "scope": 15942, "sourceUnit": 17017, "src": "1263:36:30", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [{"baseName": {"id": 15141, "name": "IPoolSwapStructs", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26931, "src": "1323:16:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IPoolSwapStructs_$26931", "typeString": "contract IPoolSwapStructs"}}, "id": 15142, "nodeType": "InheritanceSpecifier", "src": "1323:16:30"}], "contractDependencies": [26931], "contractKind": "contract", "fullyImplemented": true, "id": 15941, "linearizedBaseContracts": [15941, 26931], "name": "MockVault", "nodeType": "ContractDefinition", "nodes": [{"canonicalName": "MockVault.Pool", "id": 15150, "members": [{"constant": false, "id": 15145, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 15150, "src": "1368:15:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}, "typeName": {"baseType": {"id": 15143, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "1368:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15144, "nodeType": "ArrayTypeName", "src": "1368:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}, "visibility": "internal"}, {"constant": false, "id": 15149, "mutability": "mutable", "name": "balances", "nodeType": "VariableDeclaration", "scope": 15150, "src": "1393:35:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}, "typeName": {"id": 15148, "keyType": {"id": 15146, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "1401:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "nodeType": "Mapping", "src": "1393:26:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}, "valueType": {"id": 15147, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1411:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}}, "visibility": "internal"}], "name": "Pool", "nodeType": "StructDefinition", "scope": 15941, "src": "1346:89:30", "visibility": "public"}, {"constant": false, "id": 15152, "mutability": "mutable", "name": "_authorizer", "nodeType": "VariableDeclaration", "scope": 15941, "src": "1441:31:30", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}, "typeName": {"id": 15151, "name": "IAuthorizer", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26291, "src": "1441:11:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}}, "visibility": "private"}, {"constant": false, "id": 15156, "mutability": "mutable", "name": "pools", "nodeType": "VariableDeclaration", "scope": 15941, "src": "1478:38:30", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool)"}, "typeName": {"id": 15155, "keyType": {"id": 15153, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1486:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "Mapping", "src": "1478:24:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool)"}, "valueType": {"id": 15154, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "1497:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}}, "visibility": "private"}, {"anonymous": false, "id": 15166, "name": "Swap", "nodeType": "EventDefinition", "parameters": {"id": 15165, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15158, "indexed": true, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15166, "src": "1534:22:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15157, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1534:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 15160, "indexed": true, "mutability": "mutable", "name": "tokenIn", "nodeType": "VariableDeclaration", "scope": 15166, "src": "1558:22:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, "typeName": {"id": 15159, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "1558:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "visibility": "internal"}, {"constant": false, "id": 15162, "indexed": true, "mutability": "mutable", "name": "tokenOut", "nodeType": "VariableDeclaration", "scope": 15166, "src": "1582:23:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, "typeName": {"id": 15161, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "1582:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "visibility": "internal"}, {"constant": false, "id": 15164, "indexed": false, "mutability": "mutable", "name": "amount", "nodeType": "VariableDeclaration", "scope": 15166, "src": "1607:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15163, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1607:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "1533:89:30"}, "src": "1523:100:30"}, {"anonymous": false, "id": 15181, "name": "PoolBalanceChanged", "nodeType": "EventDefinition", "parameters": {"id": 15180, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15168, "indexed": true, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15181, "src": "1654:22:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15167, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1654:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 15170, "indexed": true, "mutability": "mutable", "name": "liquidityProvider", "nodeType": "VariableDeclaration", "scope": 15181, "src": "1678:33:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15169, "name": "address", "nodeType": "ElementaryTypeName", "src": "1678:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15173, "indexed": false, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 15181, "src": "1713:15:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[]"}, "typeName": {"baseType": {"id": 15171, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "1713:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15172, "nodeType": "ArrayTypeName", "src": "1713:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}, "visibility": "internal"}, {"constant": false, "id": 15176, "indexed": false, "mutability": "mutable", "name": "deltas", "nodeType": "VariableDeclaration", "scope": 15181, "src": "1730:15:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 15174, "name": "int256", "nodeType": "ElementaryTypeName", "src": "1730:6:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 15175, "nodeType": "ArrayTypeName", "src": "1730:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}, {"constant": false, "id": 15179, "indexed": false, "mutability": "mutable", "name": "protocolFees", "nodeType": "VariableDeclaration", "scope": 15181, "src": "1747:22:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15177, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "1747:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15178, "nodeType": "ArrayTypeName", "src": "1747:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}], "src": "1653:117:30"}, "src": "1629:142:30"}, {"body": {"id": 15194, "nodeType": "Block", "src": "1813:217:30", "statements": [{"expression": {"expression": {"id": 15186, "name": "QueryProcessor", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 26742, "src": "1956:14:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_QueryProcessor_$26742_$", "typeString": "type(library QueryProcessor)"}}, "id": 15188, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "findNearestSample", "nodeType": "MemberAccess", "referencedDeclaration": 26741, "src": "1956:32:30", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_view$_t_mapping$_t_uint256_$_t_bytes32_$_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$_t_bytes32_$", "typeString": "function (mapping(uint256 => bytes32),uint256,uint256,uint256) view returns (bytes32,bytes32)"}}, "id": 15189, "nodeType": "ExpressionStatement", "src": "1956:32:30"}, {"expression": {"id": 15192, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15190, "name": "_authorizer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15152, "src": "1999:11:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 15191, "name": "authorizer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15183, "src": "2013:10:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}}, "src": "1999:24:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}}, "id": 15193, "nodeType": "ExpressionStatement", "src": "1999:24:30"}]}, "id": 15195, "implemented": true, "kind": "constructor", "modifiers": [], "name": "", "nodeType": "FunctionDefinition", "parameters": {"id": 15184, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15183, "mutability": "mutable", "name": "authorizer", "nodeType": "VariableDeclaration", "scope": 15195, "src": "1789:22:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}, "typeName": {"id": 15182, "name": "IAuthorizer", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26291, "src": "1789:11:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}}, "visibility": "internal"}], "src": "1788:24:30"}, "returnParameters": {"id": 15185, "nodeType": "ParameterList", "parameters": [], "src": "1813:0:30"}, "scope": 15941, "src": "1777:253:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 15202, "nodeType": "Block", "src": "2097:35:30", "statements": [{"expression": {"id": 15200, "name": "_authorizer", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15152, "src": "2114:11:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}}, "functionReturnParameters": 15199, "id": 15201, "nodeType": "Return", "src": "2107:18:30"}]}, "functionSelector": "aaabadc5", "id": 15203, "implemented": true, "kind": "function", "modifiers": [], "name": "getAuthorizer", "nodeType": "FunctionDefinition", "parameters": {"id": 15196, "nodeType": "ParameterList", "parameters": [], "src": "2058:2:30"}, "returnParameters": {"id": 15199, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15198, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 15203, "src": "2084:11:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}, "typeName": {"id": 15197, "name": "IAuthorizer", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26291, "src": "2084:11:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IAuthorizer_$26291", "typeString": "contract IAuthorizer"}}, "visibility": "internal"}], "src": "2083:13:30"}, "scope": 15941, "src": "2036:96:30", "stateMutability": "view", "virtual": false, "visibility": "external"}, {"body": {"id": 15274, "nodeType": "Block", "src": "2251:550:30", "statements": [{"assignments": [15215], "declarations": [{"constant": false, "id": 15215, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15274, "src": "2261:17:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15214, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "2261:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15219, "initialValue": {"baseExpression": {"id": 15216, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "2281:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15218, "indexExpression": {"id": 15217, "name": "poolId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15205, "src": "2287:6:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2281:13:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "2261:33:30"}, {"expression": {"id": 15228, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15220, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15209, "src": "2304:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"expression": {"id": 15224, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15215, "src": "2326:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15225, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "2326:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15226, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "2326:18:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15223, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "2313:12:30", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (contract IERC20[] memory)"}, "typeName": {"baseType": {"id": 15221, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "2317:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15222, "nodeType": "ArrayTypeName", "src": "2317:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}}, "id": 15227, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2313:32:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "src": "2304:41:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "id": 15229, "nodeType": "ExpressionStatement", "src": "2304:41:30"}, {"expression": {"id": 15238, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15230, "name": "balances", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15212, "src": "2355:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"expression": {"id": 15234, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15215, "src": "2380:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15235, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "2380:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15236, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "2380:18:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15233, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "2366:13:30", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (uint256[] memory)"}, "typeName": {"baseType": {"id": 15231, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2370:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15232, "nodeType": "ArrayTypeName", "src": "2370:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}}, "id": 15237, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "2366:33:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "src": "2355:44:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15239, "nodeType": "ExpressionStatement", "src": "2355:44:30"}, {"body": {"id": 15272, "nodeType": "Block", "src": "2459:103:30", "statements": [{"expression": {"id": 15259, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"id": 15252, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15209, "src": "2473:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "id": 15254, "indexExpression": {"id": 15253, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15241, "src": "2480:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "2473:9:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"baseExpression": {"expression": {"id": 15255, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15215, "src": "2485:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15256, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "2485:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15258, "indexExpression": {"id": 15257, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15241, "src": "2497:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2485:14:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "src": "2473:26:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15260, "nodeType": "ExpressionStatement", "src": "2473:26:30"}, {"expression": {"id": 15270, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"id": 15261, "name": "balances", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15212, "src": "2513:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15263, "indexExpression": {"id": 15262, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15241, "src": "2522:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "2513:11:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"baseExpression": {"expression": {"id": 15264, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15215, "src": "2527:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15265, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "2527:13:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15269, "indexExpression": {"baseExpression": {"id": 15266, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15209, "src": "2541:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "id": 15268, "indexExpression": {"id": 15267, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15241, "src": "2548:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2541:9:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "2527:24:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "2513:38:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15271, "nodeType": "ExpressionStatement", "src": "2513:38:30"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15248, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15244, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15241, "src": "2430:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 15245, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15215, "src": "2434:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15246, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "2434:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15247, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "2434:18:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "2430:22:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15273, "initializationExpression": {"assignments": [15241], "declarations": [{"constant": false, "id": 15241, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15273, "src": "2415:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15240, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2415:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15243, "initialValue": {"hexValue": "30", "id": 15242, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2427:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "2415:13:30"}, "loopExpression": {"expression": {"id": 15250, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "2454:3:30", "subExpression": {"id": 15249, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15241, "src": "2454:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15251, "nodeType": "ExpressionStatement", "src": "2454:3:30"}, "nodeType": "ForStatement", "src": "2410:152:30"}]}, "functionSelector": "f94d4668", "id": 15275, "implemented": true, "kind": "function", "modifiers": [], "name": "getPoolTokens", "nodeType": "FunctionDefinition", "parameters": {"id": 15206, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15205, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15275, "src": "2161:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15204, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2161:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "2160:16:30"}, "returnParameters": {"id": 15213, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15209, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 15275, "src": "2200:22:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[]"}, "typeName": {"baseType": {"id": 15207, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "2200:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15208, "nodeType": "ArrayTypeName", "src": "2200:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}, "visibility": "internal"}, {"constant": false, "id": 15212, "mutability": "mutable", "name": "balances", "nodeType": "VariableDeclaration", "scope": 15275, "src": "2224:25:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15210, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2224:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15211, "nodeType": "ArrayTypeName", "src": "2224:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}], "src": "2199:51:30"}, "scope": 15941, "src": "2138:663:30", "stateMutability": "view", "virtual": false, "visibility": "external"}, {"body": {"id": 15318, "nodeType": "Block", "src": "3050:192:30", "statements": [{"assignments": [15291], "declarations": [{"constant": false, "id": 15291, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15318, "src": "3060:17:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15290, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "3060:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15295, "initialValue": {"baseExpression": {"id": 15292, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "3080:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15294, "indexExpression": {"id": 15293, "name": "poolId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15277, "src": "3086:6:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3080:13:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "3060:33:30"}, {"expression": {"id": 15301, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15296, "name": "cash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15282, "src": "3103:4:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"baseExpression": {"expression": {"id": 15297, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15291, "src": "3110:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15298, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "3110:13:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15300, "indexExpression": {"id": 15299, "name": "token", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15279, "src": "3124:5:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3110:20:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3103:27:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15302, "nodeType": "ExpressionStatement", "src": "3103:27:30"}, {"expression": {"id": 15305, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15303, "name": "managed", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15284, "src": "3158:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "30", "id": 15304, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3168:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "3158:11:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15306, "nodeType": "ExpressionStatement", "src": "3158:11:30"}, {"expression": {"id": 15309, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15307, "name": "lastChangeBlock", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15286, "src": "3179:15:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "30", "id": 15308, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3197:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "3179:19:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15310, "nodeType": "ExpressionStatement", "src": "3179:19:30"}, {"expression": {"id": 15316, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15311, "name": "assetManager", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15288, "src": "3208:12:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"hexValue": "307830", "id": 15314, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3231:3:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0x0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 15313, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "3223:7:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 15312, "name": "address", "nodeType": "ElementaryTypeName", "src": "3223:7:30", "typeDescriptions": {}}}, "id": 15315, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3223:12:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address_payable", "typeString": "address payable"}}, "src": "3208:27:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 15317, "nodeType": "ExpressionStatement", "src": "3208:27:30"}]}, "functionSelector": "b05f8e48", "id": 15319, "implemented": true, "kind": "function", "modifiers": [], "name": "getPoolTokenInfo", "nodeType": "FunctionDefinition", "parameters": {"id": 15280, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15277, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15319, "src": "2833:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15276, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2833:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 15279, "mutability": "mutable", "name": "token", "nodeType": "VariableDeclaration", "scope": 15319, "src": "2849:12:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, "typeName": {"id": 15278, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "2849:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "visibility": "internal"}], "src": "2832:30:30"}, "returnParameters": {"id": 15289, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15282, "mutability": "mutable", "name": "cash", "nodeType": "VariableDeclaration", "scope": 15319, "src": "2923:12:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15281, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2923:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15284, "mutability": "mutable", "name": "managed", "nodeType": "VariableDeclaration", "scope": 15319, "src": "2949:15:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15283, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2949:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15286, "mutability": "mutable", "name": "lastChangeBlock", "nodeType": "VariableDeclaration", "scope": 15319, "src": "2978:23:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15285, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "2978:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15288, "mutability": "mutable", "name": "assetManager", "nodeType": "VariableDeclaration", "scope": 15319, "src": "3015:20:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15287, "name": "address", "nodeType": "ElementaryTypeName", "src": "3015:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "2909:136:30"}, "scope": 15941, "src": "2807:435:30", "stateMutability": "view", "virtual": false, "visibility": "external"}, {"body": {"id": 15326, "nodeType": "Block", "src": "3329:64:30", "statements": []}, "functionSelector": "09b2760f", "id": 15327, "implemented": true, "kind": "function", "modifiers": [], "name": "registerPool", "nodeType": "FunctionDefinition", "parameters": {"id": 15322, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15321, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 15327, "src": "3270:25:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_PoolSpecialization_$19806", "typeString": "enum IVault.PoolSpecialization"}, "typeName": {"id": 15320, "name": "IVault.PoolSpecialization", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 19806, "src": "3270:25:30", "typeDescriptions": {"typeIdentifier": "t_enum$_PoolSpecialization_$19806", "typeString": "enum IVault.PoolSpecialization"}}, "visibility": "internal"}], "src": "3269:27:30"}, "returnParameters": {"id": 15325, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15324, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 15327, "src": "3320:7:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15323, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3320:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "3319:9:30"}, "scope": 15941, "src": "3248:145:30", "stateMutability": "view", "virtual": false, "visibility": "external"}, {"body": {"id": 15367, "nodeType": "Block", "src": "3520:155:30", "statements": [{"assignments": [15339], "declarations": [{"constant": false, "id": 15339, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15367, "src": "3530:17:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15338, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "3530:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15343, "initialValue": {"baseExpression": {"id": 15340, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "3550:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15342, "indexExpression": {"id": 15341, "name": "poolId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15329, "src": "3556:6:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3550:13:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "3530:33:30"}, {"body": {"id": 15365, "nodeType": "Block", "src": "3617:52:30", "statements": [{"expression": {"arguments": [{"baseExpression": {"id": 15360, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15332, "src": "3648:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "id": 15362, "indexExpression": {"id": 15361, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15345, "src": "3655:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3648:9:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}], "expression": {"expression": {"id": 15355, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15339, "src": "3631:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15358, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "3631:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15359, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "push", "nodeType": "MemberAccess", "src": "3631:16:30", "typeDescriptions": {"typeIdentifier": "t_function_arraypush_nonpayable$_t_contract$_IERC20_$26820_$returns$__$", "typeString": "function (contract IERC20)"}}, "id": 15363, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3631:27:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15364, "nodeType": "ExpressionStatement", "src": "3631:27:30"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15351, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15348, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15345, "src": "3593:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 15349, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15332, "src": "3597:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "id": 15350, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3597:13:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3593:17:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15366, "initializationExpression": {"assignments": [15345], "declarations": [{"constant": false, "id": 15345, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15366, "src": "3578:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15344, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3578:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15347, "initialValue": {"hexValue": "30", "id": 15346, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3590:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3578:13:30"}, "loopExpression": {"expression": {"id": 15353, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3612:3:30", "subExpression": {"id": 15352, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15345, "src": "3612:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15354, "nodeType": "ExpressionStatement", "src": "3612:3:30"}, "nodeType": "ForStatement", "src": "3573:96:30"}]}, "functionSelector": "66a9c7d2", "id": 15368, "implemented": true, "kind": "function", "modifiers": [], "name": "registerTokens", "nodeType": "FunctionDefinition", "parameters": {"id": 15336, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15329, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15368, "src": "3432:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15328, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3432:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 15332, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 15368, "src": "3456:22:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[]"}, "typeName": {"baseType": {"id": 15330, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "3456:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15331, "nodeType": "ArrayTypeName", "src": "3456:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}, "visibility": "internal"}, {"constant": false, "id": 15335, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 15368, "src": "3488:16:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr", "typeString": "address[]"}, "typeName": {"baseType": {"id": 15333, "name": "address", "nodeType": "ElementaryTypeName", "src": "3488:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "id": 15334, "nodeType": "ArrayTypeName", "src": "3488:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr", "typeString": "address[]"}}, "visibility": "internal"}], "src": "3422:88:30"}, "returnParameters": {"id": 15337, "nodeType": "ParameterList", "parameters": [], "src": "3520:0:30"}, "scope": 15941, "src": "3399:276:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 15408, "nodeType": "Block", "src": "3757:173:30", "statements": [{"assignments": [15377], "declarations": [{"constant": false, "id": 15377, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15408, "src": "3767:17:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15376, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "3767:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15381, "initialValue": {"baseExpression": {"id": 15378, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "3787:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15380, "indexExpression": {"id": 15379, "name": "poolId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15370, "src": "3793:6:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3787:13:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "3767:33:30"}, {"body": {"id": 15406, "nodeType": "Block", "src": "3856:68:30", "statements": [{"expression": {"id": 15404, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 15393, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15377, "src": "3870:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15399, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "3870:13:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15400, "indexExpression": {"baseExpression": {"expression": {"id": 15395, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15377, "src": "3884:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15396, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "3884:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15398, "indexExpression": {"id": 15397, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15383, "src": "3896:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3884:14:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "3870:29:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"baseExpression": {"id": 15401, "name": "balances", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15373, "src": "3902:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15403, "indexExpression": {"id": 15402, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15383, "src": "3911:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "3902:11:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3870:43:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15405, "nodeType": "ExpressionStatement", "src": "3870:43:30"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15389, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15386, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15383, "src": "3830:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 15387, "name": "balances", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15373, "src": "3834:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15388, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "3834:15:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3830:19:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15407, "initializationExpression": {"assignments": [15383], "declarations": [{"constant": false, "id": 15383, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15407, "src": "3815:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15382, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3815:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15385, "initialValue": {"hexValue": "30", "id": 15384, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3827:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "3815:13:30"}, "loopExpression": {"expression": {"id": 15391, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "3851:3:30", "subExpression": {"id": 15390, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15383, "src": "3851:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15392, "nodeType": "ExpressionStatement", "src": "3851:3:30"}, "nodeType": "ForStatement", "src": "3810:114:30"}]}, "functionSelector": "1865221a", "id": 15409, "implemented": true, "kind": "function", "modifiers": [], "name": "updateBalances", "nodeType": "FunctionDefinition", "parameters": {"id": 15374, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15370, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15409, "src": "3705:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15369, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3705:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 15373, "mutability": "mutable", "name": "balances", "nodeType": "VariableDeclaration", "scope": 15409, "src": "3721:25:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15371, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "3721:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15372, "nodeType": "ArrayTypeName", "src": "3721:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}], "src": "3704:43:30"}, "returnParameters": {"id": 15375, "nodeType": "ParameterList", "parameters": [], "src": "3757:0:30"}, "scope": 15941, "src": "3681:249:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 15441, "nodeType": "Block", "src": "4103:187:30", "statements": [{"assignments": [15421], "declarations": [{"constant": false, "id": 15421, "mutability": "mutable", "name": "amount", "nodeType": "VariableDeclaration", "scope": 15441, "src": "4113:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15420, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4113:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15430, "initialValue": {"arguments": [{"id": 15426, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15413, "src": "4164:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, {"id": 15427, "name": "balanceTokenIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15415, "src": "4173:14:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 15428, "name": "balanceTokenOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15417, "src": "4189:15:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 15423, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15411, "src": "4151:4:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 15422, "name": "IMinimalSwapInfoPool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 24320, "src": "4130:20:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IMinimalSwapInfoPool_$24320_$", "typeString": "type(contract IMinimalSwapInfoPool)"}}, "id": 15424, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4130:26:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IMinimalSwapInfoPool_$24320", "typeString": "contract IMinimalSwapInfoPool"}}, "id": 15425, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "onSwap", "nodeType": "MemberAccess", "referencedDeclaration": 24319, "src": "4130:33:30", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_struct$_SwapRequest_$26930_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (struct IPoolSwapStructs.SwapRequest memory,uint256,uint256) external returns (uint256)"}}, "id": 15429, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4130:75:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "4113:92:30"}, {"eventCall": {"arguments": [{"expression": {"id": 15432, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15413, "src": "4225:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15433, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 26921, "src": "4225:14:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 15434, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15413, "src": "4241:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15435, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenIn", "nodeType": "MemberAccess", "referencedDeclaration": 26915, "src": "4241:15:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, {"expression": {"id": 15436, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15413, "src": "4258:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15437, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenOut", "nodeType": "MemberAccess", "referencedDeclaration": 26917, "src": "4258:16:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, {"id": 15438, "name": "amount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15421, "src": "4276:6:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15431, "name": "Swap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15166, "src": "4220:4:30", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_contract$_IERC20_$26820_$_t_contract$_IERC20_$26820_$_t_uint256_$returns$__$", "typeString": "function (bytes32,contract IERC20,contract IERC20,uint256)"}}, "id": 15439, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4220:63:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15440, "nodeType": "EmitStatement", "src": "4215:68:30"}]}, "functionSelector": "f76102db", "id": 15442, "implemented": true, "kind": "function", "modifiers": [], "name": "callMinimalPoolSwap", "nodeType": "FunctionDefinition", "parameters": {"id": 15418, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15411, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15442, "src": "3974:12:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15410, "name": "address", "nodeType": "ElementaryTypeName", "src": "3974:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15413, "mutability": "mutable", "name": "request", "nodeType": "VariableDeclaration", "scope": 15442, "src": "3996:26:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest"}, "typeName": {"id": 15412, "name": "SwapRequest", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26930, "src": "3996:11:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_storage_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest"}}, "visibility": "internal"}, {"constant": false, "id": 15415, "mutability": "mutable", "name": "balanceTokenIn", "nodeType": "VariableDeclaration", "scope": 15442, "src": "4032:22:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15414, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4032:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15417, "mutability": "mutable", "name": "balanceTokenOut", "nodeType": "VariableDeclaration", "scope": 15442, "src": "4064:23:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15416, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4064:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "3964:129:30"}, "returnParameters": {"id": 15419, "nodeType": "ParameterList", "parameters": [], "src": "4103:0:30"}, "scope": 15941, "src": "3936:354:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 15478, "nodeType": "Block", "src": "4484:175:30", "statements": [{"assignments": [15457], "declarations": [{"constant": false, "id": 15457, "mutability": "mutable", "name": "amount", "nodeType": "VariableDeclaration", "scope": 15478, "src": "4494:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15456, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4494:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15467, "initialValue": {"arguments": [{"id": 15462, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15446, "src": "4537:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, {"id": 15463, "name": "balances", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15449, "src": "4546:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, {"id": 15464, "name": "indexIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15451, "src": "4556:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 15465, "name": "indexOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15453, "src": "4565:8:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}, {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 15459, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15444, "src": "4524:4:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 15458, "name": "IGeneralPool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 26906, "src": "4511:12:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IGeneralPool_$26906_$", "typeString": "type(contract IGeneralPool)"}}, "id": 15460, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4511:18:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IGeneralPool_$26906", "typeString": "contract IGeneralPool"}}, "id": 15461, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "onSwap", "nodeType": "MemberAccess", "referencedDeclaration": 26905, "src": "4511:25:30", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_struct$_SwapRequest_$26930_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (struct IPoolSwapStructs.SwapRequest memory,uint256[] memory,uint256,uint256) external returns (uint256)"}}, "id": 15466, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4511:63:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "4494:80:30"}, {"eventCall": {"arguments": [{"expression": {"id": 15469, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15446, "src": "4594:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15470, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 26921, "src": "4594:14:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 15471, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15446, "src": "4610:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15472, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenIn", "nodeType": "MemberAccess", "referencedDeclaration": 26915, "src": "4610:15:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, {"expression": {"id": 15473, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15446, "src": "4627:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15474, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenOut", "nodeType": "MemberAccess", "referencedDeclaration": 26917, "src": "4627:16:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, {"id": 15475, "name": "amount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15457, "src": "4645:6:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15468, "name": "Swap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15166, "src": "4589:4:30", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_contract$_IERC20_$26820_$_t_contract$_IERC20_$26820_$_t_uint256_$returns$__$", "typeString": "function (bytes32,contract IERC20,contract IERC20,uint256)"}}, "id": 15476, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4589:63:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15477, "nodeType": "EmitStatement", "src": "4584:68:30"}]}, "functionSelector": "0b08cf89", "id": 15479, "implemented": true, "kind": "function", "modifiers": [], "name": "callGeneralPoolSwap", "nodeType": "FunctionDefinition", "parameters": {"id": 15454, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15444, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15479, "src": "4334:12:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15443, "name": "address", "nodeType": "ElementaryTypeName", "src": "4334:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15446, "mutability": "mutable", "name": "request", "nodeType": "VariableDeclaration", "scope": 15479, "src": "4356:26:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest"}, "typeName": {"id": 15445, "name": "SwapRequest", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26930, "src": "4356:11:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_storage_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest"}}, "visibility": "internal"}, {"constant": false, "id": 15449, "mutability": "mutable", "name": "balances", "nodeType": "VariableDeclaration", "scope": 15479, "src": "4392:25:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15447, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4392:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15448, "nodeType": "ArrayTypeName", "src": "4392:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 15451, "mutability": "mutable", "name": "indexIn", "nodeType": "VariableDeclaration", "scope": 15479, "src": "4427:15:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15450, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4427:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15453, "mutability": "mutable", "name": "indexOut", "nodeType": "VariableDeclaration", "scope": 15479, "src": "4452:16:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15452, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4452:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "4324:150:30"}, "returnParameters": {"id": 15455, "nodeType": "ParameterList", "parameters": [], "src": "4484:0:30"}, "scope": 15941, "src": "4296:363:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"canonicalName": "MockVault.CallJoinPoolGyroParams", "id": 15500, "members": [{"constant": false, "id": 15481, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4705:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IBasePool_$26884", "typeString": "contract IBasePool"}, "typeName": {"id": 15480, "name": "IBasePool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26884, "src": "4705:9:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IBasePool_$26884", "typeString": "contract IBasePool"}}, "visibility": "internal"}, {"constant": false, "id": 15483, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4729:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15482, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "4729:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 15485, "mutability": "mutable", "name": "sender", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4753:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15484, "name": "address", "nodeType": "ElementaryTypeName", "src": "4753:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15487, "mutability": "mutable", "name": "recipient", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4777:17:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15486, "name": "address", "nodeType": "ElementaryTypeName", "src": "4777:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15490, "mutability": "mutable", "name": "currentBalances", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4804:25:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15488, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4804:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15489, "nodeType": "ArrayTypeName", "src": "4804:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 15492, "mutability": "mutable", "name": "lastChangeBlock", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4839:23:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15491, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4839:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15494, "mutability": "mutable", "name": "protocolSwapFeePercentage", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4872:33:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15493, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4872:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15497, "mutability": "mutable", "name": "amountsIn", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4915:19:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15495, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4915:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15496, "nodeType": "ArrayTypeName", "src": "4915:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 15499, "mutability": "mutable", "name": "bptOut", "nodeType": "VariableDeclaration", "scope": 15500, "src": "4944:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15498, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "4944:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "name": "CallJoinPoolGyroParams", "nodeType": "StructDefinition", "scope": 15941, "src": "4665:300:30", "visibility": "public"}, {"body": {"id": 15698, "nodeType": "Block", "src": "5399:1572:30", "statements": [{"assignments": [15514], "declarations": [{"constant": false, "id": 15514, "mutability": "mutable", "name": "kind", "nodeType": "VariableDeclaration", "scope": 15698, "src": "5503:34:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}, "typeName": {"id": 15513, "name": "WeightedPoolUserData.JoinKind", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 16814, "src": "5503:29:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, "visibility": "internal"}], "id": 15515, "nodeType": "VariableDeclarationStatement", "src": "5503:34:30"}, {"assignments": [15517], "declarations": [{"constant": false, "id": 15517, "mutability": "mutable", "name": "userData", "nodeType": "VariableDeclaration", "scope": 15698, "src": "5547:21:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes"}, "typeName": {"id": 15516, "name": "bytes", "nodeType": "ElementaryTypeName", "src": "5547:5:30", "typeDescriptions": {"typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes"}}, "visibility": "internal"}], "id": 15518, "nodeType": "VariableDeclarationStatement", "src": "5547:21:30"}, {"id": 15583, "nodeType": "Block", "src": "5579:542:30", "statements": [{"assignments": [15520], "declarations": [{"constant": false, "id": 15520, "mutability": "mutable", "name": "isEmptyPool", "nodeType": "VariableDeclaration", "scope": 15583, "src": "5593:16:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 15519, "name": "bool", "nodeType": "ElementaryTypeName", "src": "5593:4:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "id": 15522, "initialValue": {"hexValue": "74727565", "id": 15521, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "5612:4:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "nodeType": "VariableDeclarationStatement", "src": "5593:23:30"}, {"body": {"expression": {"id": 15545, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15535, "name": "isEmptyPool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15520, "src": "5690:11:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 15544, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15536, "name": "isEmptyPool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15520, "src": "5704:11:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "&&", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15542, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"baseExpression": {"expression": {"id": 15537, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "5720:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15538, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentBalances", "nodeType": "MemberAccess", "referencedDeclaration": 15490, "src": "5720:22:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15540, "indexExpression": {"id": 15539, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15524, "src": "5743:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5720:25:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 15541, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5749:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "5720:30:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}], "id": 15543, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "5719:32:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "5704:47:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "5690:61:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15546, "nodeType": "ExpressionStatement", "src": "5690:61:30"}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15531, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15527, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15524, "src": "5650:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 15528, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "5654:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15529, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentBalances", "nodeType": "MemberAccess", "referencedDeclaration": 15490, "src": "5654:22:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15530, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "5654:29:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "5650:33:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15547, "initializationExpression": {"assignments": [15524], "declarations": [{"constant": false, "id": 15524, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15547, "src": "5635:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15523, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5635:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15526, "initialValue": {"hexValue": "30", "id": 15525, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5647:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "5635:13:30"}, "loopExpression": {"expression": {"id": 15533, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": true, "src": "5685:3:30", "subExpression": {"id": 15532, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15524, "src": "5687:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15534, "nodeType": "ExpressionStatement", "src": "5685:3:30"}, "nodeType": "ForStatement", "src": "5630:121:30"}, {"condition": {"id": 15548, "name": "isEmptyPool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15520, "src": "5769:11:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 15581, "nodeType": "Block", "src": "5940:171:30", "statements": [{"expression": {"id": 15570, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15566, "name": "kind", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15514, "src": "5958:4:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"expression": {"id": 15567, "name": "WeightedPoolUserData", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 17016, "src": "5965:20:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_WeightedPoolUserData_$17016_$", "typeString": "type(library WeightedPoolUserData)"}}, "id": 15568, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "JoinKind", "nodeType": "MemberAccess", "referencedDeclaration": 16814, "src": "5965:29:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_JoinKind_$16814_$", "typeString": "type(enum WeightedPoolUserData.JoinKind)"}}, "id": 15569, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "ALL_TOKENS_IN_FOR_EXACT_BPT_OUT", "nodeType": "MemberAccess", "src": "5965:61:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, "src": "5958:68:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, "id": 15571, "nodeType": "ExpressionStatement", "src": "5958:68:30"}, {"expression": {"id": 15579, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15572, "name": "userData", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15517, "src": "6044:8:30", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 15575, "name": "kind", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15514, "src": "6066:4:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, {"expression": {"id": 15576, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6072:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15577, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "bptOut", "nodeType": "MemberAccess", "referencedDeclaration": 15499, "src": "6072:13:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 15573, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -1, "src": "6055:3:30", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 15574, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encode", "nodeType": "MemberAccess", "src": "6055:10:30", "typeDescriptions": {"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 15578, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6055:31:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}, "src": "6044:42:30", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}, "id": 15580, "nodeType": "ExpressionStatement", "src": "6044:42:30"}]}, "id": 15582, "nodeType": "IfStatement", "src": "5765:346:30", "trueBody": {"id": 15565, "nodeType": "Block", "src": "5782:152:30", "statements": [{"expression": {"id": 15553, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15549, "name": "kind", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15514, "src": "5800:4:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"expression": {"id": 15550, "name": "WeightedPoolUserData", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 17016, "src": "5807:20:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_WeightedPoolUserData_$17016_$", "typeString": "type(library WeightedPoolUserData)"}}, "id": 15551, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "JoinKind", "nodeType": "MemberAccess", "referencedDeclaration": 16814, "src": "5807:29:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_JoinKind_$16814_$", "typeString": "type(enum WeightedPoolUserData.JoinKind)"}}, "id": 15552, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "INIT", "nodeType": "MemberAccess", "src": "5807:34:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, "src": "5800:41:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, "id": 15554, "nodeType": "ExpressionStatement", "src": "5800:41:30"}, {"expression": {"id": 15563, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15555, "name": "userData", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15517, "src": "5859:8:30", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 15558, "name": "kind", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15514, "src": "5881:4:30", "typeDescriptions": {"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}}, {"expression": {"id": 15559, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "5887:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15560, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "amountsIn", "nodeType": "MemberAccess", "referencedDeclaration": 15497, "src": "5887:16:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, {"hexValue": "316537", "id": 15561, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "5905:3:30", "typeDescriptions": {"typeIdentifier": "t_rational_10000000_by_1", "typeString": "int_const 10000000"}, "value": "1e7"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_enum$_JoinKind_$16814", "typeString": "enum WeightedPoolUserData.JoinKind"}, {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}, {"typeIdentifier": "t_rational_10000000_by_1", "typeString": "int_const 10000000"}], "expression": {"id": 15556, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -1, "src": "5870:3:30", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 15557, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encode", "nodeType": "MemberAccess", "src": "5870:10:30", "typeDescriptions": {"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 15562, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5870:39:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}, "src": "5859:50:30", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}, "id": 15564, "nodeType": "ExpressionStatement", "src": "5859:50:30"}]}}]}, {"expression": {"id": 15604, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 15584, "name": "amountsIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15506, "src": "6132:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, {"id": 15585, "name": "dueProtocolFeeAmounts", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15509, "src": "6143:21:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}], "id": 15586, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "6131:34:30", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "tuple(uint256[] memory,uint256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"expression": {"id": 15590, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6204:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15591, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 15483, "src": "6204:13:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 15592, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6231:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15593, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": 15485, "src": "6231:13:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 15594, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6258:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15595, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "recipient", "nodeType": "MemberAccess", "referencedDeclaration": 15487, "src": "6258:16:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"expression": {"id": 15596, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6288:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15597, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentBalances", "nodeType": "MemberAccess", "referencedDeclaration": 15490, "src": "6288:22:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, {"expression": {"id": 15598, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6324:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15599, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastChangeBlock", "nodeType": "MemberAccess", "referencedDeclaration": 15492, "src": "6324:22:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 15600, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6360:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15601, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "protocolSwapFeePercentage", "nodeType": "MemberAccess", "referencedDeclaration": 15494, "src": "6360:32:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 15602, "name": "userData", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15517, "src": "6406:8:30", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}], "expression": {"expression": {"id": 15587, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6168:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15588, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "pool", "nodeType": "MemberAccess", "referencedDeclaration": 15481, "src": "6168:11:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IBasePool_$26884", "typeString": "contract IBasePool"}}, "id": 15589, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "onJoinPool", "nodeType": "MemberAccess", "referencedDeclaration": 26853, "src": "6168:22:30", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "function (bytes32,address,address,uint256[] memory,uint256,uint256,bytes memory) external returns (uint256[] memory,uint256[] memory)"}}, "id": 15603, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6168:256:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "tuple(uint256[] memory,uint256[] memory)"}}, "src": "6131:293:30", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15605, "nodeType": "ExpressionStatement", "src": "6131:293:30"}, {"assignments": [15607], "declarations": [{"constant": false, "id": 15607, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15698, "src": "6435:17:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15606, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "6435:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15612, "initialValue": {"baseExpression": {"id": 15608, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "6455:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15611, "indexExpression": {"expression": {"id": 15609, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6461:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15610, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 15483, "src": "6461:13:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6455:20:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "6435:40:30"}, {"body": {"id": 15638, "nodeType": "Block", "src": "6535:70:30", "statements": [{"expression": {"id": 15636, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 15625, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15607, "src": "6549:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15631, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "6549:13:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15632, "indexExpression": {"baseExpression": {"expression": {"id": 15627, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15607, "src": "6563:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15628, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "6563:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15630, "indexExpression": {"id": 15629, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15614, "src": "6575:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6563:14:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "6549:29:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "+=", "rightHandSide": {"baseExpression": {"id": 15633, "name": "amountsIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15506, "src": "6582:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15635, "indexExpression": {"id": 15634, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15614, "src": "6592:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6582:12:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "6549:45:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15637, "nodeType": "ExpressionStatement", "src": "6549:45:30"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15621, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15617, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15614, "src": "6506:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 15618, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15607, "src": "6510:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15619, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "6510:11:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15620, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "6510:18:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "6506:22:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15639, "initializationExpression": {"assignments": [15614], "declarations": [{"constant": false, "id": 15614, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15639, "src": "6491:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15613, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6491:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15616, "initialValue": {"hexValue": "30", "id": 15615, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6503:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "6491:13:30"}, "loopExpression": {"expression": {"id": 15623, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "6530:3:30", "subExpression": {"id": 15622, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15614, "src": "6530:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15624, "nodeType": "ExpressionStatement", "src": "6530:3:30"}, "nodeType": "ForStatement", "src": "6486:119:30"}, {"assignments": [15643], "declarations": [{"constant": false, "id": 15643, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 15698, "src": "6615:22:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[]"}, "typeName": {"baseType": {"id": 15641, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "6615:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15642, "nodeType": "ArrayTypeName", "src": "6615:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}, "visibility": "internal"}], "id": 15651, "initialValue": {"arguments": [{"expression": {"expression": {"id": 15647, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6653:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15648, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentBalances", "nodeType": "MemberAccess", "referencedDeclaration": 15490, "src": "6653:22:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15649, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "6653:29:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15646, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "6640:12:30", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (contract IERC20[] memory)"}, "typeName": {"baseType": {"id": 15644, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "6644:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15645, "nodeType": "ArrayTypeName", "src": "6644:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}}, "id": 15650, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6640:43:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "6615:68:30"}, {"assignments": [15656], "declarations": [{"constant": false, "id": 15656, "mutability": "mutable", "name": "deltas", "nodeType": "VariableDeclaration", "scope": 15698, "src": "6693:22:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 15654, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6693:6:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 15655, "nodeType": "ArrayTypeName", "src": "6693:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}], "id": 15663, "initialValue": {"arguments": [{"expression": {"id": 15660, "name": "amountsIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15506, "src": "6731:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15661, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "6731:16:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15659, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "6718:12:30", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (int256[] memory)"}, "typeName": {"baseType": {"id": 15657, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6722:6:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 15658, "nodeType": "ArrayTypeName", "src": "6722:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}}, "id": 15662, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6718:30:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "6693:55:30"}, {"body": {"id": 15686, "nodeType": "Block", "src": "6805:57:30", "statements": [{"expression": {"id": 15684, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"id": 15675, "name": "deltas", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15656, "src": "6819:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 15677, "indexExpression": {"id": 15676, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15665, "src": "6826:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "6819:9:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"baseExpression": {"id": 15680, "name": "amountsIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15506, "src": "6838:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15682, "indexExpression": {"id": 15681, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15665, "src": "6848:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6838:12:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15679, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "6831:6:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 15678, "name": "int256", "nodeType": "ElementaryTypeName", "src": "6831:6:30", "typeDescriptions": {}}}, "id": 15683, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6831:20:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "6819:32:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 15685, "nodeType": "ExpressionStatement", "src": "6819:32:30"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15671, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15668, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15665, "src": "6778:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 15669, "name": "amountsIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15506, "src": "6782:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15670, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "6782:16:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "6778:20:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15687, "initializationExpression": {"assignments": [15665], "declarations": [{"constant": false, "id": 15665, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15687, "src": "6763:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15664, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "6763:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15667, "initialValue": {"hexValue": "30", "id": 15666, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "6775:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "6763:13:30"}, "loopExpression": {"expression": {"id": 15673, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": true, "src": "6800:3:30", "subExpression": {"id": 15672, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15665, "src": "6802:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15674, "nodeType": "ExpressionStatement", "src": "6800:3:30"}, "nodeType": "ForStatement", "src": "6758:104:30"}, {"eventCall": {"arguments": [{"expression": {"id": 15689, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6896:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15690, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 15483, "src": "6896:13:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 15691, "name": "params", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15502, "src": "6911:6:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams memory"}}, "id": 15692, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "referencedDeclaration": 15485, "src": "6911:13:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 15693, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15643, "src": "6926:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, {"id": 15694, "name": "deltas", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15656, "src": "6934:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"id": 15695, "name": "dueProtocolFeeAmounts", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15509, "src": "6942:21:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}, {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}, {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}], "id": 15688, "name": "PoolBalanceChanged", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15181, "src": "6877:18:30", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$", "typeString": "function (bytes32,address,contract IERC20[] memory,int256[] memory,uint256[] memory)"}}, "id": 15696, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6877:87:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15697, "nodeType": "EmitStatement", "src": "6872:92:30"}]}, "functionSelector": "fb177ff5", "id": 15699, "implemented": true, "kind": "function", "modifiers": [], "name": "callJoinPoolGyro", "nodeType": "FunctionDefinition", "parameters": {"id": 15503, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15502, "mutability": "mutable", "name": "params", "nodeType": "VariableDeclaration", "scope": 15699, "src": "5257:36:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_memory_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams"}, "typeName": {"id": 15501, "name": "CallJoinPoolGyroParams", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15500, "src": "5257:22:30", "typeDescriptions": {"typeIdentifier": "t_struct$_CallJoinPoolGyroParams_$15500_storage_ptr", "typeString": "struct MockVault.CallJoinPoolGyroParams"}}, "visibility": "internal"}], "src": "5256:38:30"}, "returnParameters": {"id": 15510, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15506, "mutability": "mutable", "name": "amountsIn", "nodeType": "VariableDeclaration", "scope": 15699, "src": "5327:26:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15504, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5327:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15505, "nodeType": "ArrayTypeName", "src": "5327:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 15509, "mutability": "mutable", "name": "dueProtocolFeeAmounts", "nodeType": "VariableDeclaration", "scope": 15699, "src": "5355:38:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15507, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "5355:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15508, "nodeType": "ArrayTypeName", "src": "5355:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}], "src": "5326:68:30"}, "scope": 15941, "src": "5231:1740:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 15844, "nodeType": "Block", "src": "7340:1044:30", "statements": [{"assignments": [15728], "declarations": [{"constant": false, "id": 15728, "mutability": "mutable", "name": "kind", "nodeType": "VariableDeclaration", "scope": 15844, "src": "7444:34:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_enum$_ExitKind_$16819", "typeString": "enum WeightedPoolUserData.ExitKind"}, "typeName": {"id": 15727, "name": "WeightedPoolUserData.ExitKind", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 16819, "src": "7444:29:30", "typeDescriptions": {"typeIdentifier": "t_enum$_ExitKind_$16819", "typeString": "enum WeightedPoolUserData.ExitKind"}}, "visibility": "internal"}], "id": 15732, "initialValue": {"expression": {"expression": {"id": 15729, "name": "WeightedPoolUserData", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 17016, "src": "7481:20:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_WeightedPoolUserData_$17016_$", "typeString": "type(library WeightedPoolUserData)"}}, "id": 15730, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "ExitKind", "nodeType": "MemberAccess", "referencedDeclaration": 16819, "src": "7481:29:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_enum$_ExitKind_$16819_$", "typeString": "type(enum WeightedPoolUserData.ExitKind)"}}, "id": 15731, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "EXACT_BPT_IN_FOR_TOKENS_OUT", "nodeType": "MemberAccess", "src": "7481:57:30", "typeDescriptions": {"typeIdentifier": "t_enum$_ExitKind_$16819", "typeString": "enum WeightedPoolUserData.ExitKind"}}, "nodeType": "VariableDeclarationStatement", "src": "7444:94:30"}, {"assignments": [15734], "declarations": [{"constant": false, "id": 15734, "mutability": "mutable", "name": "userData", "nodeType": "VariableDeclaration", "scope": 15844, "src": "7549:21:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes"}, "typeName": {"id": 15733, "name": "bytes", "nodeType": "ElementaryTypeName", "src": "7549:5:30", "typeDescriptions": {"typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes"}}, "visibility": "internal"}], "id": 15740, "initialValue": {"arguments": [{"id": 15737, "name": "kind", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15728, "src": "7584:4:30", "typeDescriptions": {"typeIdentifier": "t_enum$_ExitKind_$16819", "typeString": "enum WeightedPoolUserData.ExitKind"}}, {"id": 15738, "name": "bptAmountIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15716, "src": "7590:11:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_enum$_ExitKind_$16819", "typeString": "enum WeightedPoolUserData.ExitKind"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 15735, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -1, "src": "7573:3:30", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 15736, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encode", "nodeType": "MemberAccess", "src": "7573:10:30", "typeDescriptions": {"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 15739, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7573:29:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}, "nodeType": "VariableDeclarationStatement", "src": "7549:53:30"}, {"expression": {"id": 15754, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"components": [{"id": 15741, "name": "amountsOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15720, "src": "7614:10:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, {"id": 15742, "name": "dueProtocolFeeAmounts", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15723, "src": "7626:21:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}], "id": 15743, "isConstant": false, "isInlineArray": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "TupleExpression", "src": "7613:35:30", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "tuple(uint256[] memory,uint256[] memory)"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 15746, "name": "poolId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15703, "src": "7680:6:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 15747, "name": "sender", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15705, "src": "7700:6:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 15748, "name": "recipient", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15707, "src": "7720:9:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 15749, "name": "currentBalances", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15710, "src": "7743:15:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, {"id": 15750, "name": "lastChangeBlock", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15712, "src": "7772:15:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 15751, "name": "protocolSwapFeePercentage", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15714, "src": "7801:25:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 15752, "name": "userData", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15734, "src": "7840:8:30", "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}], "expression": {"id": 15744, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15701, "src": "7651:4:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IBasePool_$26884", "typeString": "contract IBasePool"}}, "id": 15745, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "onExitPool", "nodeType": "MemberAccess", "referencedDeclaration": 26878, "src": "7651:15:30", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "function (bytes32,address,address,uint256[] memory,uint256,uint256,bytes memory) external returns (uint256[] memory,uint256[] memory)"}}, "id": 15753, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7651:207:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$", "typeString": "tuple(uint256[] memory,uint256[] memory)"}}, "src": "7613:245:30", "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15755, "nodeType": "ExpressionStatement", "src": "7613:245:30"}, {"assignments": [15757], "declarations": [{"constant": false, "id": 15757, "mutability": "mutable", "name": "_pool", "nodeType": "VariableDeclaration", "scope": 15844, "src": "7869:18:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15756, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "7869:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15761, "initialValue": {"baseExpression": {"id": 15758, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "7890:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15760, "indexExpression": {"id": 15759, "name": "poolId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15703, "src": "7896:6:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7890:13:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "7869:34:30"}, {"body": {"id": 15787, "nodeType": "Block", "src": "7963:73:30", "statements": [{"expression": {"id": 15785, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 15774, "name": "_pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15757, "src": "7977:5:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15780, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "7977:14:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15781, "indexExpression": {"baseExpression": {"expression": {"id": 15776, "name": "_pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15757, "src": "7992:5:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15777, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "7992:12:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15779, "indexExpression": {"id": 15778, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15763, "src": "8005:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7992:15:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "7977:31:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "-=", "rightHandSide": {"baseExpression": {"id": 15782, "name": "amountsOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15720, "src": "8012:10:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15784, "indexExpression": {"id": 15783, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15763, "src": "8023:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8012:13:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7977:48:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15786, "nodeType": "ExpressionStatement", "src": "7977:48:30"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15770, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15766, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15763, "src": "7933:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"expression": {"id": 15767, "name": "_pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15757, "src": "7937:5:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15768, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokens", "nodeType": "MemberAccess", "referencedDeclaration": 15145, "src": "7937:12:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage", "typeString": "contract IERC20[] storage ref"}}, "id": 15769, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "7937:19:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7933:23:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15788, "initializationExpression": {"assignments": [15763], "declarations": [{"constant": false, "id": 15763, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15788, "src": "7918:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15762, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7918:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15765, "initialValue": {"hexValue": "30", "id": 15764, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "7930:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "7918:13:30"}, "loopExpression": {"expression": {"id": 15772, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": false, "src": "7958:3:30", "subExpression": {"id": 15771, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15763, "src": "7958:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15773, "nodeType": "ExpressionStatement", "src": "7958:3:30"}, "nodeType": "ForStatement", "src": "7913:123:30"}, {"assignments": [15792], "declarations": [{"constant": false, "id": 15792, "mutability": "mutable", "name": "tokens", "nodeType": "VariableDeclaration", "scope": 15844, "src": "8046:22:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[]"}, "typeName": {"baseType": {"id": 15790, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "8046:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15791, "nodeType": "ArrayTypeName", "src": "8046:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}, "visibility": "internal"}], "id": 15799, "initialValue": {"arguments": [{"expression": {"id": 15796, "name": "currentBalances", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15710, "src": "8084:15:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15797, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "8084:22:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15795, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "8071:12:30", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (contract IERC20[] memory)"}, "typeName": {"baseType": {"id": 15793, "name": "IERC20", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26820, "src": "8075:6:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "id": 15794, "nodeType": "ArrayTypeName", "src": "8075:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_storage_ptr", "typeString": "contract IERC20[]"}}}, "id": 15798, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8071:36:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "8046:61:30"}, {"assignments": [15804], "declarations": [{"constant": false, "id": 15804, "mutability": "mutable", "name": "deltas", "nodeType": "VariableDeclaration", "scope": 15844, "src": "8117:22:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[]"}, "typeName": {"baseType": {"id": 15802, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8117:6:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 15803, "nodeType": "ArrayTypeName", "src": "8117:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}, "visibility": "internal"}], "id": 15811, "initialValue": {"arguments": [{"expression": {"id": 15808, "name": "amountsOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15720, "src": "8155:10:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15809, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "8155:17:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15807, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "NewExpression", "src": "8142:12:30", "typeDescriptions": {"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_int256_$dyn_memory_ptr_$", "typeString": "function (uint256) pure returns (int256[] memory)"}, "typeName": {"baseType": {"id": 15805, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8146:6:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 15806, "nodeType": "ArrayTypeName", "src": "8146:8:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr", "typeString": "int256[]"}}}, "id": 15810, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8142:31:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "nodeType": "VariableDeclarationStatement", "src": "8117:56:30"}, {"body": {"id": 15834, "nodeType": "Block", "src": "8231:58:30", "statements": [{"expression": {"id": 15832, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"id": 15823, "name": "deltas", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15804, "src": "8245:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, "id": 15825, "indexExpression": {"id": 15824, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15813, "src": "8252:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "8245:9:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"baseExpression": {"id": 15828, "name": "amountsOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15720, "src": "8264:10:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15830, "indexExpression": {"id": 15829, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15813, "src": "8275:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8264:13:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15827, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "8257:6:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_int256_$", "typeString": "type(int256)"}, "typeName": {"id": 15826, "name": "int256", "nodeType": "ElementaryTypeName", "src": "8257:6:30", "typeDescriptions": {}}}, "id": 15831, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8257:21:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "src": "8245:33:30", "typeDescriptions": {"typeIdentifier": "t_int256", "typeString": "int256"}}, "id": 15833, "nodeType": "ExpressionStatement", "src": "8245:33:30"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15819, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15816, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15813, "src": "8203:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 15817, "name": "amountsOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15720, "src": "8207:10:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}, "id": 15818, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "8207:17:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8203:21:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15835, "initializationExpression": {"assignments": [15813], "declarations": [{"constant": false, "id": 15813, "mutability": "mutable", "name": "i", "nodeType": "VariableDeclaration", "scope": 15835, "src": "8188:9:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15812, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8188:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15815, "initialValue": {"hexValue": "30", "id": 15814, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8200:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "8188:13:30"}, "loopExpression": {"expression": {"id": 15821, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": true, "src": "8226:3:30", "subExpression": {"id": 15820, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15813, "src": "8228:1:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15822, "nodeType": "ExpressionStatement", "src": "8226:3:30"}, "nodeType": "ForStatement", "src": "8183:106:30"}, {"eventCall": {"arguments": [{"id": 15837, "name": "poolId", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15703, "src": "8323:6:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 15838, "name": "sender", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15705, "src": "8331:6:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 15839, "name": "tokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15792, "src": "8339:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}}, {"id": 15840, "name": "deltas", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15804, "src": "8347:6:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}}, {"id": 15841, "name": "dueProtocolFeeAmounts", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15723, "src": "8355:21:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr", "typeString": "contract IERC20[] memory"}, {"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr", "typeString": "int256[] memory"}, {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[] memory"}], "id": 15836, "name": "PoolBalanceChanged", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15181, "src": "8304:18:30", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_array$_t_contract$_IERC20_$26820_$dyn_memory_ptr_$_t_array$_t_int256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$", "typeString": "function (bytes32,address,contract IERC20[] memory,int256[] memory,uint256[] memory)"}}, "id": 15842, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8304:73:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15843, "nodeType": "EmitStatement", "src": "8299:78:30"}]}, "functionSelector": "b8acd8ad", "id": 15845, "implemented": true, "kind": "function", "modifiers": [], "name": "callExitPoolGyro", "nodeType": "FunctionDefinition", "parameters": {"id": 15717, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15701, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7012:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_contract$_IBasePool_$26884", "typeString": "contract IBasePool"}, "typeName": {"id": 15700, "name": "IBasePool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26884, "src": "7012:9:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IBasePool_$26884", "typeString": "contract IBasePool"}}, "visibility": "internal"}, {"constant": false, "id": 15703, "mutability": "mutable", "name": "poolId", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7036:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15702, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "7036:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 15705, "mutability": "mutable", "name": "sender", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7060:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15704, "name": "address", "nodeType": "ElementaryTypeName", "src": "7060:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15707, "mutability": "mutable", "name": "recipient", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7084:17:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15706, "name": "address", "nodeType": "ElementaryTypeName", "src": "7084:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15710, "mutability": "mutable", "name": "currentBalances", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7111:32:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15708, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7111:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15709, "nodeType": "ArrayTypeName", "src": "7111:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 15712, "mutability": "mutable", "name": "lastChangeBlock", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7153:23:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15711, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7153:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15714, "mutability": "mutable", "name": "protocolSwapFeePercentage", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7186:33:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15713, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7186:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15716, "mutability": "mutable", "name": "bptAmountIn", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7229:19:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15715, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7229:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "7002:252:30"}, "returnParameters": {"id": 15724, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15720, "mutability": "mutable", "name": "amountsOut", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7271:27:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15718, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7271:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15719, "nodeType": "ArrayTypeName", "src": "7271:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}, {"constant": false, "id": 15723, "mutability": "mutable", "name": "dueProtocolFeeAmounts", "nodeType": "VariableDeclaration", "scope": 15845, "src": "7300:38:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr", "typeString": "uint256[]"}, "typeName": {"baseType": {"id": 15721, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "7300:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15722, "nodeType": "ArrayTypeName", "src": "7300:9:30", "typeDescriptions": {"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr", "typeString": "uint256[]"}}, "visibility": "internal"}], "src": "7270:69:30"}, "scope": 15941, "src": "6977:1407:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 15933, "nodeType": "Block", "src": "8595:2098:30", "statements": [{"id": 15885, "nodeType": "Block", "src": "8969:286:30", "statements": [{"assignments": [15857], "declarations": [{"constant": false, "id": 15857, "mutability": "mutable", "name": "pool", "nodeType": "VariableDeclaration", "scope": 15885, "src": "8983:17:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15856, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "8983:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15862, "initialValue": {"baseExpression": {"id": 15858, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "9003:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15861, "indexExpression": {"expression": {"id": 15859, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "9009:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15860, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 26921, "src": "9009:14:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "9003:21:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "8983:41:30"}, {"assignments": [15864], "declarations": [{"constant": false, "id": 15864, "mutability": "mutable", "name": "dummy", "nodeType": "VariableDeclaration", "scope": 15885, "src": "9038:13:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15863, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "9038:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15865, "nodeType": "VariableDeclarationStatement", "src": "9038:13:30"}, {"expression": {"id": 15878, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 15866, "name": "dummy", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15864, "src": "9065:5:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15877, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"baseExpression": {"expression": {"id": 15867, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15857, "src": "9073:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15868, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "9073:13:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15871, "indexExpression": {"expression": {"id": 15869, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "9087:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15870, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenIn", "nodeType": "MemberAccess", "referencedDeclaration": 26915, "src": "9087:15:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "9073:30:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"baseExpression": {"expression": {"id": 15872, "name": "pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15857, "src": "9106:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15873, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "9106:13:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15876, "indexExpression": {"expression": {"id": 15874, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "9120:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15875, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenOut", "nodeType": "MemberAccess", "referencedDeclaration": 26917, "src": "9120:16:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "9106:31:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9073:64:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9065:72:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15879, "nodeType": "ExpressionStatement", "src": "9065:72:30"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 15882, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 15880, "name": "dummy", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15864, "src": "9226:5:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"hexValue": "30", "id": 15881, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "9235:1:30", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "9226:10:30", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 15884, "nodeType": "IfStatement", "src": "9222:23:30", "trueBody": {"functionReturnParameters": 15855, "id": 15883, "nodeType": "Return", "src": "9238:7:30"}}]}, {"assignments": [15887], "declarations": [{"constant": false, "id": 15887, "mutability": "mutable", "name": "amount", "nodeType": "VariableDeclaration", "scope": 15933, "src": "10345:14:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15886, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "10345:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 15896, "initialValue": {"arguments": [{"id": 15892, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10403:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, {"id": 15893, "name": "balanceTokenIn", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15851, "src": "10412:14:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 15894, "name": "balanceTokenOut", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15853, "src": "10428:15:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"id": 15889, "name": "poolAddress", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15847, "src": "10383:11:30", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 15888, "name": "IMinimalSwapInfoPool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 24320, "src": "10362:20:30", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IMinimalSwapInfoPool_$24320_$", "typeString": "type(contract IMinimalSwapInfoPool)"}}, "id": 15890, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10362:33:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IMinimalSwapInfoPool_$24320", "typeString": "contract IMinimalSwapInfoPool"}}, "id": 15891, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "onSwap", "nodeType": "MemberAccess", "referencedDeclaration": 24319, "src": "10362:40:30", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_struct$_SwapRequest_$26930_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$", "typeString": "function (struct IPoolSwapStructs.SwapRequest memory,uint256,uint256) external returns (uint256)"}}, "id": 15895, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10362:82:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "10345:99:30"}, {"eventCall": {"arguments": [{"expression": {"id": 15898, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10464:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15899, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 26921, "src": "10464:14:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"expression": {"id": 15900, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10480:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15901, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenIn", "nodeType": "MemberAccess", "referencedDeclaration": 26915, "src": "10480:15:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, {"expression": {"id": 15902, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10497:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15903, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenOut", "nodeType": "MemberAccess", "referencedDeclaration": 26917, "src": "10497:16:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, {"id": 15904, "name": "amount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15887, "src": "10515:6:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 15897, "name": "Swap", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15166, "src": "10459:4:30", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_contract$_IERC20_$26820_$_t_contract$_IERC20_$26820_$_t_uint256_$returns$__$", "typeString": "function (bytes32,contract IERC20,contract IERC20,uint256)"}}, "id": 15905, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10459:63:30", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 15906, "nodeType": "EmitStatement", "src": "10454:68:30"}, {"assignments": [15908], "declarations": [{"constant": false, "id": 15908, "mutability": "mutable", "name": "_pool", "nodeType": "VariableDeclaration", "scope": 15933, "src": "10533:18:30", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}, "typeName": {"id": 15907, "name": "Pool", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 15150, "src": "10533:4:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool"}}, "visibility": "internal"}], "id": 15913, "initialValue": {"baseExpression": {"id": 15909, "name": "pools", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15156, "src": "10554:5:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Pool_$15150_storage_$", "typeString": "mapping(bytes32 => struct MockVault.Pool storage ref)"}}, "id": 15912, "indexExpression": {"expression": {"id": 15910, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10560:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15911, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "poolId", "nodeType": "MemberAccess", "referencedDeclaration": 26921, "src": "10560:14:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "10554:21:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage", "typeString": "struct MockVault.Pool storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "10533:42:30"}, {"expression": {"id": 15922, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 15914, "name": "_pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15908, "src": "10585:5:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15918, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "10585:14:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15919, "indexExpression": {"expression": {"id": 15916, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10600:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15917, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenIn", "nodeType": "MemberAccess", "referencedDeclaration": 26915, "src": "10600:15:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "10585:31:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "+=", "rightHandSide": {"expression": {"id": 15920, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10620:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15921, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "amount", "nodeType": "MemberAccess", "referencedDeclaration": 26919, "src": "10620:14:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10585:49:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15923, "nodeType": "ExpressionStatement", "src": "10585:49:30"}, {"expression": {"id": 15931, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"expression": {"id": 15924, "name": "_pool", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15908, "src": "10644:5:30", "typeDescriptions": {"typeIdentifier": "t_struct$_Pool_$15150_storage_ptr", "typeString": "struct MockVault.Pool storage pointer"}}, "id": 15928, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "balances", "nodeType": "MemberAccess", "referencedDeclaration": 15149, "src": "10644:14:30", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_contract$_IERC20_$26820_$_t_uint256_$", "typeString": "mapping(contract IERC20 => uint256)"}}, "id": 15929, "indexExpression": {"expression": {"id": 15926, "name": "request", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15849, "src": "10659:7:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest memory"}}, "id": 15927, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenOut", "nodeType": "MemberAccess", "referencedDeclaration": 26917, "src": "10659:16:30", "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$26820", "typeString": "contract IERC20"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "10644:32:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "-=", "rightHandSide": {"id": 15930, "name": "amount", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 15887, "src": "10680:6:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10644:42:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 15932, "nodeType": "ExpressionStatement", "src": "10644:42:30"}]}, "functionSelector": "8acd6b9d", "id": 15934, "implemented": true, "kind": "function", "modifiers": [], "name": "callMinimalGyroPoolSwap", "nodeType": "FunctionDefinition", "parameters": {"id": 15854, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15847, "mutability": "mutable", "name": "poolAddress", "nodeType": "VariableDeclaration", "scope": 15934, "src": "8432:19:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 15846, "name": "address", "nodeType": "ElementaryTypeName", "src": "8432:7:30", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 15849, "mutability": "mutable", "name": "request", "nodeType": "VariableDeclaration", "scope": 15934, "src": "8461:26:30", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_memory_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest"}, "typeName": {"id": 15848, "name": "SwapRequest", "nodeType": "UserDefinedTypeName", "referencedDeclaration": 26930, "src": "8461:11:30", "typeDescriptions": {"typeIdentifier": "t_struct$_SwapRequest_$26930_storage_ptr", "typeString": "struct IPoolSwapStructs.SwapRequest"}}, "visibility": "internal"}, {"constant": false, "id": 15851, "mutability": "mutable", "name": "balanceTokenIn", "nodeType": "VariableDeclaration", "scope": 15934, "src": "8524:22:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15850, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8524:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15853, "mutability": "mutable", "name": "balanceTokenOut", "nodeType": "VariableDeclaration", "scope": 15934, "src": "8556:23:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 15852, "name": "uint256", "nodeType": "ElementaryTypeName", "src": "8556:7:30", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "8422:163:30"}, "returnParameters": {"id": 15855, "nodeType": "ParameterList", "parameters": [], "src": "8595:0:30"}, "scope": 15941, "src": "8390:2303:30", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 15939, "nodeType": "Block", "src": "10752:64:30", "statements": []}, "functionSelector": "38fff2d0", "id": 15940, "implemented": true, "kind": "function", "modifiers": [], "name": "getPoolId", "nodeType": "FunctionDefinition", "parameters": {"id": 15935, "nodeType": "ParameterList", "parameters": [], "src": "10717:2:30"}, "returnParameters": {"id": 15938, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 15937, "mutability": "mutable", "name": "", "nodeType": "VariableDeclaration", "scope": 15940, "src": "10743:7:30", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 15936, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "10743:7:30", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "10742:9:30"}, "scope": 15941, "src": "10699:117:30", "stateMutability": "view", "virtual": false, "visibility": "external"}], "scope": 15942, "src": "1301:9517:30"}], "src": "688:10131:30"}, "bytecode": "", "bytecodeSha1": "57571d55e7845e69e1f7e8ee3f5ce66253ebaccb", "compiler": {"evm_version": "berlin", "optimizer": {"enabled": true, "runs": 200}, "version": "0.7.6+commit.7338295f"}, "contractName": "MockVault", "coverageMap": {"branches": {"109": {}, "110": {}, "112": {}, "113": {}, "114": {}, "30": {"MockVault.callJoinPoolGyro": {"37": [5769, 5780, false]}, "MockVault.callMinimalGyroPoolSwap": {"36": [9226, 9236, false]}}, "34": {}, "52": {}, "54": {}, "55": {}, "62": {}, "69": {}, "72": {}, "74": {}, "84": {}}, "statements": {"109": {}, "110": {}, "112": {}, "113": {}, "114": {}, "30": {"MockVault.callExitPoolGyro": {"12": [7613, 7858], "13": [7977, 8025], "14": [7958, 7961], "15": [8245, 8278], "16": [8226, 8229], "17": [8299, 8377]}, "MockVault.callGeneralPoolSwap": {"0": [4584, 4652]}, "MockVault.callJoinPoolGyro": {"24": [5690, 5751], "25": [5685, 5688], "26": [5859, 5909], "27": [5800, 5841], "28": [6044, 6086], "29": [5958, 6026], "30": [6131, 6424], "31": [6549, 6594], "32": [6530, 6533], "33": [6819, 6851], "34": [6800, 6803], "35": [6872, 6964]}, "MockVault.callMinimalGyroPoolSwap": {"5": [9065, 9137], "6": [9238, 9245], "7": [10454, 10522], "8": [10585, 10634], "9": [10644, 10686]}, "MockVault.callMinimalPoolSwap": {"18": [4215, 4283]}, "MockVault.getAuthorizer": {"10": [2107, 2125]}, "MockVault.getPoolTokenInfo": {"11": [3103, 3130]}, "MockVault.getPoolTokens": {"19": [2304, 2345], "20": [2355, 2399], "21": [2473, 2499], "22": [2513, 2551], "23": [2454, 2457]}, "MockVault.registerTokens": {"3": [3631, 3658], "4": [3612, 3615]}, "MockVault.updateBalances": {"1": [3870, 3913], "2": [3851, 3854]}}, "34": {}, "52": {}, "54": {}, "55": {}, "62": {}, "69": {}, "72": {}, "74": {}, "84": {}}}, "dependencies": ["Buffer", "Errors", "IAuthorizer", "IBasePool", "IERC20", "IGeneralPool", "IMinimalSwapInfoPool", "IPoolSwapStructs", "LogCompression", "LogExpMath", "QueryProcessor", "Samples", "WeightedPoolUserData", "WordCodec"], "deployedBytecode": "", "deployedSourceMap": "1301:9517:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3248:145;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4296:363;;;;;;:::i;:::-;;:::i;:::-;;3681:249;;;;;;:::i;:::-;;:::i;10699:117::-;;;:::i;3399:276::-;;;;;;:::i;:::-;;:::i;8390:2303::-;;;;;;:::i;:::-;;:::i;2036:96::-;;;:::i;:::-;;;;;;;:::i;2807:435::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;6977:1407::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3936:354::-;;;;;;:::i;:::-;;:::i;2138:663::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;5231:1740::-;;;;;;:::i;:::-;;:::i;3248:145::-;-1:-1:-1;3320:7:30;;3248:145::o;4296:363::-;4511:63;;-1:-1:-1;;;4511:63:30;;4494:14;;-1:-1:-1;;;;;4511:25:30;;;;;:63;;4537:7;;4546:8;;4556:7;;4565:8;;4511:63;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4494:80;;4627:7;:16;;;-1:-1:-1;;;;;4589:63:30;4610:7;:15;;;-1:-1:-1;;;;;4589:63:30;4594:7;:14;;;4589:63;4645:6;4589:63;;;;;;:::i;:::-;;;;;;;;4296:363;;;;;;:::o;3681:249::-;3767:17;3787:13;;;:5;:13;;;;;;3810:114;3834:8;:15;3830:1;:19;3810:114;;;3902:8;3911:1;3902:11;;;;;;;;;;;;;;3870:4;:13;;:29;3884:4;:11;;3896:1;3884:14;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3884:14:30;3870:29;;;;;;;;;;;;:43;3884:14;3851:3;3810:114;;;;3681:249;;;:::o;10699:117::-;10743:7;10699:117;:::o;3399:276::-;3530:17;3550:13;;;:5;:13;;;;;;3573:96;3597:6;:13;3593:1;:17;3573:96;;;3631:4;:11;;3648:6;3655:1;3648:9;;;;;;;;;;;;;;;;;;;3631:27;;;;;;;;-1:-1:-1;3631:27:30;;;;;;;;;;;;-1:-1:-1;;;;;;3631:27:30;-1:-1:-1;;;;;3631:27:30;;;;;;;;;;3612:3;3573:96;;;;3399:276;;;;:::o;8390:2303::-;9009:14;;;;8983:17;9003:21;;;:5;:21;;;;;;;;9120:16;;;;-1:-1:-1;;;;;9106:31:30;;;;;:13;;;:31;;;;;;9087:15;;;;9073:30;;;;;;;;;9003:21;;9073:64;9226:10;9222:23;;9238:7;;;;9222:23;-1:-1:-1;;10362:82:30;;-1:-1:-1;;;10362:82:30;;10345:14;;-1:-1:-1;;;;;10362:40:30;;;;;:82;;10403:7;;10412:14;;10428:15;;10362:82;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10345:99;;10497:7;:16;;;-1:-1:-1;;;;;10459:63:30;10480:7;:15;;;-1:-1:-1;;;;;10459:63:30;10464:7;:14;;;10459:63;10515:6;10459:63;;;;;;:::i;:::-;;;;;;;;10560:14;;;;10533:18;10554:21;;;:5;:21;;;;;;;;10620:14;;;;10600:15;;;;-1:-1:-1;;;;;10585:31:30;;;;;:14;;;;:31;;;;;;:49;;;;;;;;10659:16;;;;10644:32;;;;;:42;;;;;;;;8390:2303;;;;:::o;2036:96::-;2084:11;2114;-1:-1:-1;;;;;2114:11:30;2036:96;:::o;2807:435::-;2923:12;3080:13;;;:5;:13;;;;;;;;-1:-1:-1;;;;;3110:20:30;;;;;:13;;;;:20;;;;;;2923:12;;;;2807:435::o;6977:1407::-;7271:27;7300:38;7444:34;7481:57;7444:94;;7549:21;7584:4;7590:11;7573:29;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7573:29:30;;;;;;;;;;-1:-1:-1;;;7651:207:30;;7573:29;-1:-1:-1;;;;;;7651:15:30;;;;;:207;;7680:6;;7700;;7720:9;;7743:15;;7772;;7801:25;;7573:29;;7651:207;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7651:207:30;;;;;;;;;;;;:::i;:::-;7869:18;7890:13;;;:5;:13;;;;;7613:245;;-1:-1:-1;7613:245:30;;-1:-1:-1;7913:123:30;7937:19;;7933:23;;7913:123;;;8012:10;8023:1;8012:13;;;;;;;;;;;;;;7977:5;:14;;:31;7992:5;:12;;8005:1;7992:15;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7992:15:30;7977:31;;;;;;;;;;;;:48;;;;;;;;7992:15;7958:3;7913:123;;;;8046:22;8084:15;:22;-1:-1:-1;;;;;8071:36:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8071:36:30;;8046:61;;8117:22;8155:10;:17;-1:-1:-1;;;;;8142:31:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8142:31:30;;8117:56;;8188:9;8183:106;8207:10;:17;8203:1;:21;8183:106;;;8264:10;8275:1;8264:13;;;;;;;;;;;;;;8245:6;8252:1;8245:9;;;;;;;;;;;;;;;;;:33;8226:3;;8183:106;;;;8331:6;-1:-1:-1;;;;;8304:73:30;8323:6;8304:73;8339:6;8347;8355:21;8304:73;;;;;;;;:::i;:::-;;;;;;;;6977:1407;;;;;;;;;;;;;;;;:::o;3936:354::-;4130:75;;-1:-1:-1;;;4130:75:30;;4113:14;;-1:-1:-1;;;;;4130:33:30;;;;;:75;;4164:7;;4173:14;;4189:15;;4130:75;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4113:92;;4258:7;:16;;;-1:-1:-1;;;;;4220:63:30;4241:7;:15;;;-1:-1:-1;;;;;4220:63:30;4225:7;:14;;;4220:63;4276:6;4220:63;;;;;;:::i;:::-;;;;;;;;3936:354;;;;;:::o;2138:663::-;2261:17;2281:13;;;:5;:13;;;;;2326:18;;2200:22;;;;-1:-1:-1;;;;;2313:32:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2313:32:30;-1:-1:-1;2380:18:30;;2304:41;;-1:-1:-1;;;;;;2366:33:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2366:33:30;;2355:44;;2415:9;2410:152;2434:18;;2430:22;;2410:152;;;2485:4;:11;;2497:1;2485:14;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2485:14:30;2473:6;2480:1;2473:9;;;;;;;;;;;;;:26;-1:-1:-1;;;;;2473:26:30;;;-1:-1:-1;;;;;2473:26:30;;;;;2527:4;:13;;:24;2541:6;2548:1;2541:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2527:24:30;-1:-1:-1;;;;;2527:24:30;;;;;;;;;;;;;2513:8;2522:1;2513:11;;;;;;;;;;;;;;;;;:38;2454:3;;2410:152;;;;2138:663;;;;:::o;5231:1740::-;5327:26;;5503:34;5327:26;5612:4;5503:34;5630:121;5654:6;:22;;;:29;5650:1;:33;5630:121;;;5704:11;:47;;;;;5720:6;:22;;;5743:1;5720:25;;;;;;;;;;;;;;5749:1;5720:30;5704:47;5690:61;-1:-1:-1;5685:3:30;;5630:121;;;;5769:11;5765:346;;;5887:16;;;;5870:39;;5807:34;;-1:-1:-1;5870:39:30;;5807:34;;5905:3;;5870:39;;;:::i;:::-;;;;;;;;;;;;;5859:50;;5765:346;;;6072:13;;;;6055:31;;5965:61;;-1:-1:-1;6055:31:30;;5965:61;;6055:31;;;:::i;:::-;;;;;;;;;;;;;6044:42;;5765:346;-1:-1:-1;6168:11:30;;6204:13;;;;6231;;;;;6258:16;;;;6288:22;;;;6324;;;;6360:32;;;;6168:256;;-1:-1:-1;;;6168:256:30;;-1:-1:-1;;;;;6168:22:30;;;;;;:256;;6204:13;;6231;6258:16;6288:22;6324;6406:8;;6168:256;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6168:256:30;;;;;;;;;;;;:::i;:::-;6461:13;;;;;6435:17;6455:20;;;:5;:20;;;;;;6131:293;;-1:-1:-1;6131:293:30;;-1:-1:-1;6486:119:30;6510:18;;6506:22;;6486:119;;;6582:9;6592:1;6582:12;;;;;;;;;;;;;;6549:4;:13;;:29;6563:4;:11;;6575:1;6563:14;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6563:14:30;6549:29;;;;;;;;;;;;:45;;;;;;;6563:14;6530:3;6486:119;;;;6615:22;6653:6;:22;;;:29;-1:-1:-1;;;;;6640:43:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6640:43:30;;6615:68;;6693:22;6731:9;:16;-1:-1:-1;;;;;6718:30:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6718:30:30;;6693:55;;6763:9;6758:104;6782:9;:16;6778:1;:20;6758:104;;;6838:9;6848:1;6838:12;;;;;;;;;;;;;;6819:6;6826:1;6819:9;;;;;;;;;;;;;;;;;:32;6800:3;;6758:104;;;;6911:6;:13;;;-1:-1:-1;;;;;6877:87:30;6896:6;:13;;;6877:87;6926:6;6934;6942:21;6877:87;;;;;;;;:::i;:::-;;;;;;;;5231:1740;;;;;;;;:::o;14:138:125:-;84:20;;113:33;84:20;113:33;:::i;:::-;65:87;;;:::o;157:782::-;;270:3;263:4;255:6;251:17;247:27;237:2;;292:5;285;278:20;237:2;332:6;319:20;358:4;382:65;397:49;443:2;397:49;:::i;:::-;382:65;:::i;:::-;481:15;;;512:12;;;;544:15;;;590:11;;;578:24;;574:33;;571:42;-1:-1:-1;568:2:125;;;630:5;623;616:20;568:2;656:5;670:240;684:2;681:1;678:9;670:240;;;755:3;742:17;772:33;799:5;772:33;:::i;:::-;818:18;;856:12;;;;888;;;;702:1;695:9;670:240;;;-1:-1:-1;928:5:125;;227:712;-1:-1:-1;;;;;;;227:712:125:o;944:705::-;;1057:3;1050:4;1042:6;1038:17;1034:27;1024:2;;1079:5;1072;1065:20;1024:2;1119:6;1106:20;1145:4;1169:65;1184:49;1230:2;1184:49;:::i;1169:65::-;1268:15;;;1299:12;;;;1331:15;;;1377:11;;;1365:24;;1361:33;;1358:42;-1:-1:-1;1355:2:125;;;1417:5;1410;1403:20;1355:2;1443:5;1457:163;1471:2;1468:1;1465:9;1457:163;;;1528:17;;1516:30;;1566:12;;;;1598;;;;1489:1;1482:9;1457:163;;1654:702;;1778:3;1771:4;1763:6;1759:17;1755:27;1745:2;;1800:5;1793;1786:20;1745:2;1833:6;1827:13;1859:4;1883:65;1898:49;1944:2;1898:49;:::i;1883:65::-;1982:15;;;2013:12;;;;2045:15;;;2091:11;;;2079:24;;2075:33;;2072:42;-1:-1:-1;2069:2:125;;;2131:5;2124;2117:20;2069:2;2157:5;2171:156;2185:2;2182:1;2179:9;2171:156;;;2242:10;;2230:23;;2273:12;;;;2305;;;;2203:1;2196:9;2171:156;;2361:542;;2458:3;2451:4;2443:6;2439:17;2435:27;2425:2;;2480:5;2473;2466:20;2425:2;2520:6;2507:20;-1:-1:-1;;;;;2542:2:125;2539:26;2536:2;;;2568:9;2536:2;2603:54;2645:2;2626:13;;-1:-1:-1;;2622:27:125;2651:4;2618:38;2603:54;:::i;:::-;2682:2;2673:7;2666:19;2728:3;2721:4;2716:2;2708:6;2704:15;2700:26;2697:35;2694:2;;;2749:5;2742;2735:20;2694:2;2818;2811:4;2803:6;2799:17;2792:4;2783:7;2779:18;2766:55;2841:16;;;2859:4;2837:27;2830:42;;;;2845:7;2415:488;-1:-1:-1;;2415:488:125:o;2908:152::-;2985:20;;3034:1;3024:12;;3014:2;;3050:1;3047;3040:12;3065:977;;3156:6;3199:2;3187:9;3182:3;3178:19;3174:28;3171:2;;;3219:5;3212;3205:20;3171:2;3245:18;3260:2;3245:18;:::i;:::-;3236:27;;;3286:38;3314:9;3286:38;:::i;:::-;3279:5;3272:53;3357:40;3393:2;3382:9;3378:18;3357:40;:::i;:::-;3352:2;3345:5;3341:14;3334:64;3430:40;3466:2;3455:9;3451:18;3430:40;:::i;:::-;3425:2;3418:5;3414:14;3407:64;3531:2;3520:9;3516:18;3503:32;3498:2;3491:5;3487:14;3480:56;3597:3;3586:9;3582:19;3569:33;3563:3;3556:5;3552:15;3545:58;3664:3;3653:9;3649:19;3636:33;3630:3;3623:5;3619:15;3612:58;3703:41;3739:3;3728:9;3724:19;3703:41;:::i;:::-;3697:3;3690:5;3686:15;3679:66;3778:41;3814:3;3803:9;3799:19;3778:41;:::i;:::-;3772:3;3765:5;3761:15;3754:66;3839:3;3893:2;3882:9;3878:18;3865:32;-1:-1:-1;;;;;3912:6:125;3909:30;3906:2;;;3952:1;3949;3942:12;3906:2;3988:47;4031:3;4022:6;4011:9;4007:22;3988:47;:::i;:::-;3983:2;3976:5;3972:14;3965:71;;;3136:906;;;;:::o;4047:915::-;;;;;;4282:3;4270:9;4261:7;4257:23;4253:33;4250:2;;;4304:6;4296;4289:22;4250:2;4348:9;4335:23;4367:33;4394:5;4367:33;:::i;:::-;4419:5;-1:-1:-1;4475:2:125;4460:18;;4447:32;-1:-1:-1;;;;;4528:14:125;;;4525:2;;;4560:6;4552;4545:22;4525:2;4588:65;4645:7;4636:6;4625:9;4621:22;4588:65;:::i;:::-;4578:75;;4706:2;4695:9;4691:18;4678:32;4662:48;;4735:2;4725:8;4722:16;4719:2;;;4756:6;4748;4741:22;4719:2;;4784:69;4845:7;4834:8;4823:9;4819:24;4784:69;:::i;:::-;4240:722;;;;-1:-1:-1;4774:79:125;;4900:2;4885:18;;4872:32;;-1:-1:-1;4951:3:125;4936:19;4923:33;;4240:722;-1:-1:-1;;;4240:722:125:o;4967:651::-;;;;;5160:3;5148:9;5139:7;5135:23;5131:33;5128:2;;;5182:6;5174;5167:22;5128:2;5226:9;5213:23;5245:33;5272:5;5245:33;:::i;:::-;5297:5;-1:-1:-1;5353:2:125;5338:18;;5325:32;-1:-1:-1;;;;;5369:30:125;;5366:2;;;5417:6;5409;5402:22;5366:2;5445:65;5502:7;5493:6;5482:9;5478:22;5445:65;:::i;:::-;5118:500;;5435:75;;-1:-1:-1;;;;5557:2:125;5542:18;;5529:32;;5608:2;5593:18;5580:32;;5118:500;-1:-1:-1;5118:500:125:o;5623:656::-;;;5813:2;5801:9;5792:7;5788:23;5784:32;5781:2;;;5834:6;5826;5819:22;5781:2;5872:9;5866:16;-1:-1:-1;;;;;5942:2:125;5934:6;5931:14;5928:2;;;5963:6;5955;5948:22;5928:2;5991:78;6061:7;6052:6;6041:9;6037:22;5991:78;:::i;:::-;5981:88;;6115:2;6104:9;6100:18;6094:25;6078:41;;6144:2;6134:8;6131:16;6128:2;;;6165:6;6157;6150:22;6128:2;;6193:80;6265:7;6254:8;6243:9;6239:24;6193:80;:::i;:::-;6183:90;;;5771:508;;;;;:::o;6284:190::-;;6396:2;6384:9;6375:7;6371:23;6367:32;6364:2;;;6417:6;6409;6402:22;6364:2;-1:-1:-1;6445:23:125;;6354:120;-1:-1:-1;6354:120:125:o;6479:1377::-;;;;6691:2;6679:9;6670:7;6666:23;6662:32;6659:2;;;6712:6;6704;6697:22;6659:2;6753:9;6740:23;6730:33;;6782:2;6835;6824:9;6820:18;6807:32;-1:-1:-1;;;;;6899:2:125;6891:6;6888:14;6885:2;;;6920:6;6912;6905:22;6885:2;6963:6;6952:9;6948:22;6938:32;;7008:7;7001:4;6997:2;6993:13;6989:27;6979:2;;7035:6;7027;7020:22;6979:2;7076;7063:16;7099:65;7114:49;7160:2;7114:49;:::i;7099:65::-;7198:15;;;7229:12;;;;7261:11;;;7299;;;7291:20;;7287:29;;7284:42;-1:-1:-1;7281:2:125;;;7344:6;7336;7329:22;7281:2;7371:6;7362:15;;7386:240;7400:2;7397:1;7394:9;7386:240;;;7471:3;7458:17;7488:33;7515:5;7488:33;:::i;:::-;7534:18;;7418:1;7411:9;;;;;7572:12;;;;7604;;7386:240;;;-1:-1:-1;7645:5:125;-1:-1:-1;;;7703:2:125;7688:18;;7675:32;;-1:-1:-1;7719:16:125;;;7716:2;;;7753:6;7745;7738:22;7716:2;;;7781:69;7842:7;7831:8;7820:9;7816:24;7781:69;:::i;:::-;7771:79;;;6649:1207;;;;;:::o;7861:442::-;;;8015:2;8003:9;7994:7;7990:23;7986:32;7983:2;;;8036:6;8028;8021:22;7983:2;8077:9;8064:23;8054:33;;8138:2;8127:9;8123:18;8110:32;-1:-1:-1;;;;;8157:6:125;8154:30;8151:2;;;8202:6;8194;8187:22;8151:2;8230:67;8289:7;8280:6;8269:9;8265:22;8230:67;:::i;8308:343::-;;;8453:2;8441:9;8432:7;8428:23;8424:32;8421:2;;;8474:6;8466;8459:22;8421:2;8515:9;8502:23;8492:33;;8575:2;8564:9;8560:18;8547:32;8588:33;8615:5;8588:33;:::i;:::-;8640:5;8630:15;;;8411:240;;;;;:::o;8656:1093::-;;;;;;;;;8931:3;8919:9;8910:7;8906:23;8902:33;8899:2;;;8953:6;8945;8938:22;8899:2;8997:9;8984:23;9016:33;9043:5;9016:33;:::i;:::-;9068:5;-1:-1:-1;9120:2:125;9105:18;;9092:32;;-1:-1:-1;9176:2:125;9161:18;;9148:32;9189:35;9148:32;9189:35;:::i;:::-;9243:7;-1:-1:-1;9302:2:125;9287:18;;9274:32;9315:35;9274:32;9315:35;:::i;:::-;9369:7;-1:-1:-1;9427:3:125;9412:19;;9399:33;-1:-1:-1;;;;;9444:30:125;;9441:2;;;9492:6;9484;9477:22;9441:2;9520:67;9579:7;9570:6;9559:9;9555:22;9520:67;:::i;:::-;8889:860;;;;-1:-1:-1;8889:860:125;;;;9510:77;9634:3;9619:19;;9606:33;;-1:-1:-1;9686:3:125;9671:19;;9658:33;;9738:3;9723:19;9710:33;;-1:-1:-1;8889:860:125;-1:-1:-1;;;8889:860:125:o;9754:300::-;;9890:2;9878:9;9869:7;9865:23;9861:32;9858:2;;;9911:6;9903;9896:22;9858:2;9955:9;9942:23;9994:1;9987:5;9984:12;9974:2;;10015:6;10007;10000:22;9974:2;10043:5;9848:206;-1:-1:-1;;;9848:206:125:o;10059:1361::-;;10212:2;10200:9;10191:7;10187:23;10183:32;10180:2;;;10233:6;10225;10218:22;10180:2;10278:9;10265:23;-1:-1:-1;;;;;10348:2:125;10340:6;10337:14;10334:2;;;10369:6;10361;10354:22;10334:2;10412:6;10401:9;10397:22;10387:32;;10438:6;10478:2;10473;10464:7;10460:16;10456:25;10453:2;;;10499:6;10491;10484:22;10453:2;10530:18;10545:2;10530:18;:::i;:::-;10517:31;;10571:24;10592:2;10571:24;:::i;:::-;10564:5;10557:39;10649:2;10645;10641:11;10628:25;10623:2;10616:5;10612:14;10605:49;10686:33;10715:2;10711;10707:11;10686:33;:::i;:::-;10681:2;10674:5;10670:14;10663:57;10752:33;10781:2;10777;10773:11;10752:33;:::i;:::-;10747:2;10740:5;10736:14;10729:57;10832:3;10828:2;10824:12;10811:26;10862:2;10852:8;10849:16;10846:2;;;10883:6;10875;10868:22;10846:2;10925:62;10979:7;10968:8;10964:2;10960:17;10925:62;:::i;:::-;10919:3;10912:5;10908:15;10901:87;;11042:3;11038:2;11034:12;11021:26;11015:3;11008:5;11004:15;10997:51;11102:3;11098:2;11094:12;11081:26;11075:3;11068:5;11064:15;11057:51;11154:3;11150:2;11146:12;11133:26;11184:2;11174:8;11171:16;11168:2;;;11205:6;11197;11190:22;11168:2;11247:62;11301:7;11290:8;11286:2;11282:17;11247:62;:::i;:::-;11241:3;11230:15;;11223:87;-1:-1:-1;11329:3:125;11377:11;;;11364:25;11348:14;;;11341:49;;;;-1:-1:-1;11234:5:125;10170:1250;-1:-1:-1;;;10170:1250:125:o;11425:194::-;;11548:2;11536:9;11527:7;11523:23;11519:32;11516:2;;;11569:6;11561;11554:22;11516:2;-1:-1:-1;11597:16:125;;11506:113;-1:-1:-1;11506:113:125:o;11624:106::-;-1:-1:-1;;;;;11692:31:125;11680:44;;11670:60::o;11735:466::-;;11829:5;11823:12;11856:6;11851:3;11844:19;11882:4;11911:2;11906:3;11902:12;11895:19;;11948:2;11941:5;11937:14;11969:3;11981:195;11995:6;11992:1;11989:13;11981:195;;;12060:13;;-1:-1:-1;;;;;12056:39:125;12044:52;;12116:12;;;;12151:15;;;;12092:1;12010:9;11981:195;;;-1:-1:-1;12192:3:125;;11799:402;-1:-1:-1;;;;;11799:402:125:o;12206:443::-;;12303:5;12297:12;12330:6;12325:3;12318:19;12356:4;12385:2;12380:3;12376:12;12369:19;;12422:2;12415:5;12411:14;12443:3;12455:169;12469:6;12466:1;12463:13;12455:169;;;12530:13;;12518:26;;12564:12;;;;12599:15;;;;12491:1;12484:9;12455:169;;12654:477;;12735:5;12729:12;12762:6;12757:3;12750:19;12787:3;12799:162;12813:6;12810:1;12807:13;12799:162;;;12875:4;12931:13;;;12927:22;;12921:29;12903:11;;;12899:20;;12892:59;12828:12;12799:162;;;12979:6;12976:1;12973:13;12970:2;;;13045:3;13038:4;13029:6;13024:3;13020:16;13016:27;13009:40;12970:2;-1:-1:-1;13113:2:125;13092:15;-1:-1:-1;;13088:29:125;13079:39;;;;13120:4;13075:50;;12705:426;-1:-1:-1;;12705:426:125:o;13136:993::-;;13221:6;13252:5;13246:12;13284:1;13280:2;13277:9;13267:2;;13290:9;13267:2;13322;13317:3;13310:15;;13371:4;13364:5;13360:16;13354:23;13386:50;13430:4;13425:3;13421:14;13407:12;13386:50;:::i;:::-;;13484:4;13477:5;13473:16;13467:23;13499:52;13545:4;13540:3;13536:14;13520;13499:52;:::i;:::-;;13600:4;13593:5;13589:16;13583:23;13576:4;13571:3;13567:14;13560:47;13656:4;13649:5;13645:16;13639:23;13632:4;13627:3;13623:14;13616:47;13712:4;13705:5;13701:16;13695:23;13688:4;13683:3;13679:14;13672:47;13767:4;13760:5;13756:16;13750:23;13782:52;13828:4;13823:3;13819:14;13803;13782:52;:::i;:::-;;13882:4;13875:5;13871:16;13865:23;13897:52;13943:4;13938:3;13934:14;13918;13897:52;:::i;:::-;;13968:6;14022:2;14015:5;14011:14;14005:21;14056:2;14051;14046:3;14042:12;14035:24;14075:48;14119:2;14114:3;14110:12;14094:14;14075:48;:::i;:::-;14068:55;13201:928;-1:-1:-1;;;;;;13201:928:125:o;14134:1002::-;;14483:2;14472:9;14465:21;14509:59;14564:2;14553:9;14549:18;14541:6;14509:59;:::i;:::-;14625:22;;;14587:2;14605:18;;;14598:50;;;;14697:13;;14719:22;;;14795:15;;;;14757;;;14828:4;14841:169;14855:6;14852:1;14849:13;14841:169;;;14916:13;;14904:26;;14985:15;;;;14950:12;;;;14877:1;14870:9;14841:169;;;14845:3;;15055:9;15050:3;15046:19;15041:2;15030:9;15026:18;15019:47;15083;15126:3;15118:6;15083:47;:::i;:::-;15075:55;14455:681;-1:-1:-1;;;;;;;;14455:681:125:o;15141:490::-;;15414:2;15403:9;15396:21;15440:59;15495:2;15484:9;15480:18;15472:6;15440:59;:::i;:::-;15547:9;15539:6;15535:22;15530:2;15519:9;15515:18;15508:50;15575;15618:6;15610;15575:50;:::i;:::-;15567:58;15386:245;-1:-1:-1;;;;;15386:245:125:o;15636:477::-;;15893:2;15882:9;15875:21;15919:62;15977:2;15966:9;15962:18;15954:6;15919:62;:::i;16118:177::-;16264:25;;;16252:2;16237:18;;16219:76::o;16300:845::-;16647:25;;;-1:-1:-1;;;;;16746:15:125;;;16741:2;16726:18;;16719:43;16798:15;;16793:2;16778:18;;16771:43;16850:3;16845:2;16830:18;;16823:31;;;16300:845;;16877:63;;16920:19;;16912:6;16877:63;:::i;:::-;16977:6;16971:3;16960:9;16956:19;16949:35;17021:6;17015:3;17004:9;17000:19;16993:35;17077:9;17069:6;17065:22;17059:3;17048:9;17044:19;17037:51;17105:34;17132:6;17124;17105:34;:::i;:::-;17097:42;16637:508;-1:-1:-1;;;;;;;;;;16637:508:125:o;17150:224::-;-1:-1:-1;;;;;17335:32:125;;;;17317:51;;17305:2;17290:18;;17272:102::o;17379:310::-;17553:2;17538:18;;17565:41;17599:6;17565:41;:::i;:::-;17615:25;;;17671:2;17656:18;17649:34;17520:169;:::o;17694:500::-;;17937:41;17971:6;17937:41;:::i;:::-;18005:6;17994:9;17987:25;18048:2;18043;18032:9;18028:18;18021:30;18068:62;18126:2;18115:9;18111:18;18103:6;18068:62;:::i;:::-;18060:70;;18178:8;18170:6;18166:21;18161:2;18150:9;18146:18;18139:49;17927:267;;;;;;:::o;18514:629::-;;18837:3;18826:9;18819:22;18864:61;18920:3;18909:9;18905:19;18897:6;18864:61;:::i;:::-;18973:9;18965:6;18961:22;18956:2;18945:9;18941:18;18934:50;19001;19044:6;19036;19001:50;:::i;:::-;19082:2;19067:18;;19060:34;;;;-1:-1:-1;;19125:2:125;19110:18;19103:34;18993:58;18809:334;-1:-1:-1;;18809:334:125:o;19148:417::-;;19393:2;19382:9;19375:21;19413:60;19469:2;19458:9;19454:18;19446:6;19413:60;:::i;:::-;19504:2;19489:18;;19482:34;;;;-1:-1:-1;19547:2:125;19532:18;19525:34;19405:68;19365:200;-1:-1:-1;19365:200:125:o;19752:417::-;19983:25;;;20039:2;20024:18;;20017:34;;;;20082:2;20067:18;;20060:34;-1:-1:-1;;;;;20130:32:125;20125:2;20110:18;;20103:60;19970:3;19955:19;;19937:232::o;20174:242::-;20244:2;20238:9;20274:17;;;-1:-1:-1;;;;;20306:34:125;;20342:22;;;20303:62;20300:2;;;20368:9;20300:2;20395;20388:22;20218:198;;-1:-1:-1;20218:198:125:o;20421:183::-;;-1:-1:-1;;;;;20512:6:125;20509:30;20506:2;;;20542:9;20506:2;-1:-1:-1;20593:4:125;20574:17;;;20570:28;;20496:108::o;20609:107::-;20693:1;20686:5;20683:12;20673:2;;20699:9;20673:2;20663:53;:::o;20721:133::-;-1:-1:-1;;;;;20798:31:125;;20788:42;;20778:2;;20844:1;20841;20834:12", "language": "Solidity", "natspec": {"kind": "dev", "methods": {}, "version": 1}, "offset": [1301, 10818], "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAAABADC5 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0xB05F8E48 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0xB8ACD8AD EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0xF76102DB EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0xF94D4668 EQ PUSH2 0x1A4 JUMPI DUP1 PUSH4 0xFB177FF5 EQ PUSH2 0x1C5 JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x9B2760F EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0xB08CF89 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x1865221A EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x38FFF2D0 EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0x66A9C7D2 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x8ACD6B9D EQ PUSH2 0x125 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A7 JUMP JUMPDEST PUSH2 0x1D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0x15E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF5 PUSH2 0xF0 CALLDATASIZE PUSH1 0x4 PUSH2 0xF84 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF5 PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x2C6 JUMP JUMPDEST PUSH2 0xCC PUSH2 0x33B JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x10DD JUMP JUMPDEST PUSH2 0x340 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0x1008 JUMP JUMPDEST PUSH2 0x3B5 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x537 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0x1650 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x15B CALLDATASIZE PUSH1 0x4 PUSH2 0x11E1 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1710 JUMP JUMPDEST PUSH2 0x183 PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH2 0x574 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP3 SWAP2 SWAP1 PUSH2 0x15D6 JUMP JUMPDEST PUSH2 0xF5 PUSH2 0x19F CALLDATASIZE PUSH1 0x4 PUSH2 0x1008 JUMP JUMPDEST PUSH2 0x7D0 JUMP JUMPDEST PUSH2 0x1B7 PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP3 SWAP2 SWAP1 PUSH2 0x15A8 JUMP JUMPDEST PUSH2 0x183 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CD JUMP JUMPDEST PUSH2 0xA18 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xF64AA5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x1EC954A SWAP1 PUSH2 0x212 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x240 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x13BC JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x80 ADD MLOAD PUSH32 0xAF6C437771B0B661385E6B30C82A76E9067D1C318485CF0F0C47AEB35A9A1DE3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x2B6 SWAP2 SWAP1 PUSH2 0x15E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x335 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x308 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD SWAP1 KECCAK256 SSTORE PUSH1 0x1 ADD PUSH2 0x2D6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x3AE JUMPI DUP2 PUSH1 0x0 ADD DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x369 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE PUSH1 0x0 SWAP5 DUP6 MSTORE SWAP3 SWAP1 SWAP4 KECCAK256 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE ADD PUSH2 0x350 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 DUP9 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP7 MSTORE SWAP4 DUP2 ADD DUP4 MSTORE DUP2 DUP6 KECCAK256 SLOAD SWAP3 DUP9 ADD MLOAD SWAP1 SWAP4 AND DUP5 MSTORE SWAP1 SWAP3 KECCAK256 SLOAD SWAP1 SWAP2 ADD DUP1 PUSH2 0x401 JUMPI POP POP PUSH2 0x335 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x274B0443 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x9D2C110C SWAP1 PUSH2 0x436 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x16EB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x464 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x488 SWAP2 SWAP1 PUSH2 0x13BC JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x80 ADD MLOAD PUSH32 0xAF6C437771B0B661385E6B30C82A76E9067D1C318485CF0F0C47AEB35A9A1DE3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x4DA SWAP2 SWAP1 PUSH2 0x15E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x60 DUP10 ADD MLOAD DUP4 DUP11 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP8 MSTORE SWAP2 SWAP1 SWAP5 ADD SWAP1 SWAP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE DUP2 DUP8 ADD MLOAD AND DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP6 MSTORE SWAP3 SWAP1 SWAP2 ADD SWAP1 MSTORE DUP2 KECCAK256 SLOAD SWAP2 DUP2 SWAP1 DUP2 SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 DUP2 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x592 SWAP3 SWAP2 SWAP1 PUSH2 0x1664 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH4 0x74F3B009 PUSH1 0xE0 SHL DUP3 MSTORE SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP1 PUSH4 0x74F3B009 SWAP1 PUSH2 0x5DA SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x608 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x630 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1065 JUMP JUMPDEST PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP3 SWAP7 POP SWAP1 SWAP5 POP JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0x6AB JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x65A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x677 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x645 JUMP JUMPDEST POP PUSH1 0x0 DUP10 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6EF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x735 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x777 JUMPI DUP8 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x750 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x764 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x73B JUMP JUMPDEST POP DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH32 0xE5CE249087CE04F05A957192435400FD97868DBA0E6A4B4C049ABF8AF80DAE78 DUP5 DUP5 DUP11 PUSH1 0x40 MLOAD PUSH2 0x7B6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP SWAP9 POP SWAP9 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x274B0443 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x9D2C110C SWAP1 PUSH2 0x803 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x16EB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x81D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x831 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x855 SWAP2 SWAP1 PUSH2 0x13BC JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x80 ADD MLOAD PUSH32 0xAF6C437771B0B661385E6B30C82A76E9067D1C318485CF0F0C47AEB35A9A1DE3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x8A7 SWAP2 SWAP1 PUSH2 0x15E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x8E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x90A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP2 SLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x925 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x94F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0xA11 JUMPI DUP2 PUSH1 0x0 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x96D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x997 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x9C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9FE JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x955 JUMP JUMPDEST POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP2 PUSH1 0x1 DUP3 JUMPDEST DUP7 PUSH1 0x80 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xA5D JUMPI DUP2 DUP1 ISZERO PUSH2 0xA53 JUMPI POP DUP7 PUSH1 0x80 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xA47 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xA22 JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xA99 JUMPI PUSH1 0xE0 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP5 POP PUSH2 0xA83 SWAP2 DUP6 SWAP2 PUSH3 0x989680 SWAP1 PUSH1 0x20 ADD PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x100 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP5 POP PUSH2 0xAB4 SWAP2 DUP6 SWAP2 PUSH1 0x20 ADD PUSH2 0x1664 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP JUMPDEST POP DUP5 MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP1 DUP9 ADD MLOAD PUSH1 0x60 DUP10 ADD MLOAD PUSH1 0x80 DUP11 ADD MLOAD PUSH1 0xA0 DUP12 ADD MLOAD PUSH1 0xC0 DUP13 ADD MLOAD SWAP5 MLOAD PUSH4 0x357025B1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND SWAP7 PUSH4 0xD5C096C4 SWAP7 PUSH2 0xB1A SWAP7 SWAP1 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB48 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xB70 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1065 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP9 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP3 SWAP7 POP SWAP1 SWAP5 POP JUMPDEST DUP2 SLOAD DUP2 LT ISZERO PUSH2 0xBF0 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xBA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP5 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0xBBD JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 ADD SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0xB8B JUMP JUMPDEST POP PUSH1 0x0 DUP7 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC38 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC7E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0xCC0 JUMPI DUP8 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xC99 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCAD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0xC84 JUMP JUMPDEST POP DUP8 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x20 ADD MLOAD PUSH32 0xE5CE249087CE04F05A957192435400FD97868DBA0E6A4B4C049ABF8AF80DAE78 DUP5 DUP5 DUP11 PUSH1 0x40 MLOAD PUSH2 0xD07 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x153F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD24 DUP2 PUSH2 0x1781 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD39 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xD4E PUSH2 0xD49 DUP4 PUSH2 0x1757 JUMP JUMPDEST PUSH2 0x1734 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP4 DUP6 MUL DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0xD6A JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xD91 JUMPI DUP2 CALLDATALOAD PUSH2 0xD7F DUP2 PUSH2 0x1781 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xD6C JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDAE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0xDBE PUSH2 0xD49 DUP4 PUSH2 0x1757 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP4 DUP6 MUL DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0xDDA JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xD91 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE08 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH2 0xE18 PUSH2 0xD49 DUP4 PUSH2 0x1757 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP4 DUP6 MUL DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0xE34 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xD91 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xE36 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE62 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xE75 JUMPI INVALID JUMPDEST PUSH2 0xE88 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1734 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xE9C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0xD24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xED8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xEE1 DUP2 PUSH2 0x1734 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xEED DUP3 PUSH2 0xEB6 JUMP JUMPDEST DUP2 MSTORE PUSH2 0xEFB PUSH1 0x20 DUP4 ADD PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xF0C PUSH1 0x40 DUP4 ADD PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xF3B PUSH1 0xC0 DUP4 ADD PUSH2 0xD19 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0xF4C PUSH1 0xE0 DUP4 ADD PUSH2 0xD19 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xF6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF78 DUP6 DUP3 DUP7 ADD PUSH2 0xE52 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xF9B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xFA6 DUP2 PUSH2 0x1781 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xFC1 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xFCD DUP10 DUP4 DUP11 ADD PUSH2 0xEC5 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xFE2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xFEF DUP9 DUP3 DUP10 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP5 SWAP6 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x101D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1028 DUP2 PUSH2 0x1781 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1042 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x104E DUP8 DUP3 DUP9 ADD PUSH2 0xEC5 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1077 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x108D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1099 DUP7 DUP4 DUP8 ADD PUSH2 0xDF8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10AE JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x10BB DUP6 DUP3 DUP7 ADD PUSH2 0xDF8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10D6 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x10F1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x110F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1122 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1130 PUSH2 0xD49 DUP3 PUSH2 0x1757 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP7 DUP5 MUL DUP7 ADD DUP8 ADD DUP13 LT ISZERO PUSH2 0x114C JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1177 JUMPI DUP1 CALLDATALOAD PUSH2 0x1163 DUP2 PUSH2 0x1781 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x1150 JUMP JUMPDEST POP SWAP7 POP POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x118F JUMPI DUP4 DUP5 REVERT JUMPDEST POP POP PUSH2 0x119D DUP7 DUP3 DUP8 ADD PUSH2 0xD29 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11B9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x11D5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10BB DUP6 DUP3 DUP7 ADD PUSH2 0xD9E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11F3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1205 DUP2 PUSH2 0x1781 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x122C JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x1237 DUP2 PUSH2 0x1781 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH2 0x124E DUP2 PUSH2 0x1781 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH2 0x125E DUP2 PUSH2 0x1781 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1278 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1284 DUP12 DUP3 DUP13 ADD PUSH2 0xD9E JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP6 SWAP9 SWAP5 SWAP8 SWAP7 PUSH1 0xA0 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0xC0 DUP7 ADD CALLDATALOAD SWAP6 PUSH1 0xE0 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x12C6 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12DE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x12F4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP PUSH2 0x120 DUP1 DUP4 DUP8 SUB SLT ISZERO PUSH2 0x130A JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1313 DUP2 PUSH2 0x1734 JUMP JUMPDEST SWAP1 POP PUSH2 0x131E DUP4 PUSH2 0xD19 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1336 PUSH1 0x40 DUP5 ADD PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1347 PUSH1 0x60 DUP5 ADD PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x135D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x1369 DUP8 DUP3 DUP7 ADD PUSH2 0xD9E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1394 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x13A0 DUP8 DUP3 DUP7 ADD PUSH2 0xD9E JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 SWAP3 DUP4 ADD CALLDATALOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13CD JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1419 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x13F4 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1419 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1437 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1478 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x145C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1489 JUMPI DUP3 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x14AF JUMPI INVALID JUMPDEST DUP1 DUP6 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x14C5 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x14D8 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH2 0x1509 PUSH1 0xC0 DUP7 ADD DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x151C PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x13D4 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x1535 DUP4 DUP8 ADD DUP3 PUSH2 0x1453 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x1552 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x13E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP1 DUP4 MSTORE DUP7 DUP3 ADD SWAP3 DUP3 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1588 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x156C JUMP JUMPDEST POP POP DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x159C DUP2 DUP8 PUSH2 0x1424 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x15BB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x13E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x15CD DUP2 DUP6 PUSH2 0x1424 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x15BB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1424 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP7 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1624 SWAP1 DUP4 ADD DUP8 PUSH2 0x1424 JUMP JUMPDEST DUP6 PUSH1 0x80 DUP5 ADD MSTORE DUP5 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x1642 DUP2 DUP6 PUSH2 0x1453 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x1671 DUP5 PUSH2 0x1774 JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1686 DUP6 PUSH2 0x1774 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x169D PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1424 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x16C5 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x149E JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x16D7 DUP2 DUP8 PUSH2 0x1424 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x16FE PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x149E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x40 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x174F JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x176A JUMPI INVALID JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x177E JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x177E JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0x19FE84B109382F8C302C81AF14A2CBEA7472D7E6D55A24AD279BC8 NOT SWAP13 SLOAD GASLIMIT PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ", "pcMap": {"0": {"offset": [1301, 10818], "op": "PUSH1", "path": "30", "value": "0x80"}, "2": {"fn": null, "offset": [1301, 10818], "op": "PUSH1", "path": "30", "value": "0x40"}, "4": {"fn": null, "offset": [1301, 10818], "op": "MSTORE", "path": "30"}, "5": {"fn": null, "offset": [1301, 10818], "op": "CALLVALUE", "path": "30"}, "6": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "7": {"fn": null, "offset": [1301, 10818], "op": "ISZERO", "path": "30"}, "8": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x10"}, "11": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "12": {"fn": null, "offset": [1301, 10818], "op": "PUSH1", "path": "30", "value": "0x0"}, "14": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "15": {"dev": "Cannot send ether to nonpayable function", "fn": null, "offset": [1301, 10818], "op": "REVERT", "path": "30"}, "16": {"fn": null, "offset": [1301, 10818], "op": "JUMPDEST", "path": "30"}, "17": {"fn": null, "offset": [1301, 10818], "op": "POP", "path": "30"}, "18": {"fn": null, "offset": [1301, 10818], "op": "PUSH1", "path": "30", "value": "0x4"}, "20": {"fn": null, "offset": [1301, 10818], "op": "CALLDATASIZE", "path": "30"}, "21": {"fn": null, "offset": [1301, 10818], "op": "LT", "path": "30"}, "22": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0xB4"}, "25": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "26": {"fn": null, "offset": [1301, 10818], "op": "PUSH1", "path": "30", "value": "0x0"}, "28": {"fn": null, "offset": [1301, 10818], "op": "CALLDATALOAD", "path": "30"}, "29": {"fn": null, "offset": [1301, 10818], "op": "PUSH1", "path": "30", "value": "0xE0"}, "31": {"fn": null, "offset": [1301, 10818], "op": "SHR", "path": "30"}, "32": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "33": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xAAABADC5"}, "38": {"fn": null, "offset": [1301, 10818], "op": "GT", "path": "30"}, "39": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x71"}, "42": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "43": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "44": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xAAABADC5"}, "49": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "50": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x138"}, "53": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "54": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "55": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xB05F8E48"}, "60": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "61": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x14D"}, "64": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "65": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "66": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xB8ACD8AD"}, "71": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "72": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x170"}, "75": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "76": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "77": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xF76102DB"}, "82": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "83": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x191"}, "86": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "87": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "88": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xF94D4668"}, "93": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "94": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x1A4"}, "97": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "98": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "99": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xFB177FF5"}, "104": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "105": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x1C5"}, "108": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "109": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0xB4"}, "112": {"fn": null, "offset": [1301, 10818], "op": "JUMP", "path": "30"}, "113": {"fn": null, "offset": [1301, 10818], "op": "JUMPDEST", "path": "30"}, "114": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "115": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0x9B2760F"}, "120": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "121": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0xB9"}, "124": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "125": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "126": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0xB08CF89"}, "131": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "132": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0xE2"}, "135": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "136": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "137": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0x1865221A"}, "142": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "143": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0xF7"}, "146": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "147": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "148": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0x38FFF2D0"}, "153": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "154": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x10A"}, "157": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "158": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "159": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0x66A9C7D2"}, "164": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "165": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x112"}, "168": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "169": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "170": {"fn": null, "offset": [1301, 10818], "op": "PUSH4", "path": "30", "value": "0x8ACD6B9D"}, "175": {"fn": null, "offset": [1301, 10818], "op": "EQ", "path": "30"}, "176": {"fn": null, "offset": [1301, 10818], "op": "PUSH2", "path": "30", "value": "0x125"}, "179": {"fn": null, "offset": [1301, 10818], "op": "JUMPI", "path": "30"}, "180": {"fn": null, "offset": [1301, 10818], "op": "JUMPDEST", "path": "30"}, "181": {"fn": null, "offset": [1301, 10818], "op": "PUSH1", "path": "30", "value": "0x0"}, "183": {"fn": null, "offset": [1301, 10818], "op": "DUP1", "path": "30"}, "184": {"first_revert": true, "fn": null, "offset": [1301, 10818], "op": "REVERT", "path": "30"}, "185": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "JUMPDEST", "path": "30"}, "186": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH2", "path": "30", "value": "0xCC"}, "189": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH2", "path": "30", "value": "0xC7"}, "192": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "CALLDATASIZE", "path": "30"}, "193": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH1", "path": "30", "value": "0x4"}, "195": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH2", "path": "30", "value": "0x12A7"}, "198": {"fn": "MockVault.registerPool", "jump": "i", "offset": [3248, 3393], "op": "JUMP", "path": "30"}, "199": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "JUMPDEST", "path": "30"}, "200": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH2", "path": "30", "value": "0x1D8"}, "203": {"fn": "MockVault.registerPool", "jump": "i", "offset": [3248, 3393], "op": "JUMP", "path": "30"}, "204": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "JUMPDEST", "path": "30"}, "205": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH1", "path": "30", "value": "0x40"}, "207": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "MLOAD", "path": "30"}, "208": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH2", "path": "30", "value": "0xD9"}, "211": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "SWAP2", "path": "30"}, "212": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "SWAP1", "path": "30"}, "213": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH2", "path": "30", "value": "0x15E9"}, "216": {"fn": "MockVault.registerPool", "jump": "i", "offset": [3248, 3393], "op": "JUMP", "path": "30"}, "217": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "JUMPDEST", "path": "30"}, "218": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "PUSH1", "path": "30", "value": "0x40"}, "220": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "MLOAD", "path": "30"}, "221": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "DUP1", "path": "30"}, "222": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "SWAP2", "path": "30"}, "223": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "SUB", "path": "30"}, "224": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "SWAP1", "path": "30"}, "225": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "RETURN", "path": "30"}, "226": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "JUMPDEST", "path": "30"}, "227": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "PUSH2", "path": "30", "value": "0xF5"}, "230": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "PUSH2", "path": "30", "value": "0xF0"}, "233": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "CALLDATASIZE", "path": "30"}, "234": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "PUSH1", "path": "30", "value": "0x4"}, "236": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "PUSH2", "path": "30", "value": "0xF84"}, "239": {"fn": "MockVault.callGeneralPoolSwap", "jump": "i", "offset": [4296, 4659], "op": "JUMP", "path": "30"}, "240": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "JUMPDEST", "path": "30"}, "241": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "PUSH2", "path": "30", "value": "0x1DE"}, "244": {"fn": "MockVault.callGeneralPoolSwap", "jump": "i", "offset": [4296, 4659], "op": "JUMP", "path": "30"}, "245": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "JUMPDEST", "path": "30"}, "246": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "STOP", "path": "30"}, "247": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "JUMPDEST", "path": "30"}, "248": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "PUSH2", "path": "30", "value": "0xF5"}, "251": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "PUSH2", "path": "30", "value": "0x105"}, "254": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "CALLDATASIZE", "path": "30"}, "255": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "PUSH1", "path": "30", "value": "0x4"}, "257": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "PUSH2", "path": "30", "value": "0x11A7"}, "260": {"fn": "MockVault.updateBalances", "jump": "i", "offset": [3681, 3930], "op": "JUMP", "path": "30"}, "261": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "JUMPDEST", "path": "30"}, "262": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "PUSH2", "path": "30", "value": "0x2C6"}, "265": {"fn": "MockVault.updateBalances", "jump": "i", "offset": [3681, 3930], "op": "JUMP", "path": "30"}, "266": {"fn": "MockVault.getPoolId", "offset": [10699, 10816], "op": "JUMPDEST", "path": "30"}, "267": {"fn": "MockVault.getPoolId", "offset": [10699, 10816], "op": "PUSH2", "path": "30", "value": "0xCC"}, "270": {"fn": "MockVault.getPoolId", "offset": [10699, 10816], "op": "PUSH2", "path": "30", "value": "0x33B"}, "273": {"fn": "MockVault.getPoolId", "jump": "i", "offset": [10699, 10816], "op": "JUMP", "path": "30"}, "274": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "JUMPDEST", "path": "30"}, "275": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "PUSH2", "path": "30", "value": "0xF5"}, "278": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "PUSH2", "path": "30", "value": "0x120"}, "281": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "CALLDATASIZE", "path": "30"}, "282": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "PUSH1", "path": "30", "value": "0x4"}, "284": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "PUSH2", "path": "30", "value": "0x10DD"}, "287": {"fn": "MockVault.registerTokens", "jump": "i", "offset": [3399, 3675], "op": "JUMP", "path": "30"}, "288": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "JUMPDEST", "path": "30"}, "289": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "PUSH2", "path": "30", "value": "0x340"}, "292": {"fn": "MockVault.registerTokens", "jump": "i", "offset": [3399, 3675], "op": "JUMP", "path": "30"}, "293": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "JUMPDEST", "path": "30"}, "294": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "PUSH2", "path": "30", "value": "0xF5"}, "297": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "PUSH2", "path": "30", "value": "0x133"}, "300": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "CALLDATASIZE", "path": "30"}, "301": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "PUSH1", "path": "30", "value": "0x4"}, "303": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "PUSH2", "path": "30", "value": "0x1008"}, "306": {"fn": "MockVault.callMinimalGyroPoolSwap", "jump": "i", "offset": [8390, 10693], "op": "JUMP", "path": "30"}, "307": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "JUMPDEST", "path": "30"}, "308": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "PUSH2", "path": "30", "value": "0x3B5"}, "311": {"fn": "MockVault.callMinimalGyroPoolSwap", "jump": "i", "offset": [8390, 10693], "op": "JUMP", "path": "30"}, "312": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "JUMPDEST", "path": "30"}, "313": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "PUSH2", "path": "30", "value": "0x140"}, "316": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "PUSH2", "path": "30", "value": "0x537"}, "319": {"fn": "MockVault.getAuthorizer", "jump": "i", "offset": [2036, 2132], "op": "JUMP", "path": "30"}, "320": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "JUMPDEST", "path": "30"}, "321": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "PUSH1", "path": "30", "value": "0x40"}, "323": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "MLOAD", "path": "30"}, "324": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "PUSH2", "path": "30", "value": "0xD9"}, "327": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "SWAP2", "path": "30"}, "328": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "SWAP1", "path": "30"}, "329": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "PUSH2", "path": "30", "value": "0x1650"}, "332": {"fn": "MockVault.getAuthorizer", "jump": "i", "offset": [2036, 2132], "op": "JUMP", "path": "30"}, "333": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "JUMPDEST", "path": "30"}, "334": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH2", "path": "30", "value": "0x160"}, "337": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH2", "path": "30", "value": "0x15B"}, "340": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "CALLDATASIZE", "path": "30"}, "341": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH1", "path": "30", "value": "0x4"}, "343": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH2", "path": "30", "value": "0x11E1"}, "346": {"fn": "MockVault.getPoolTokenInfo", "jump": "i", "offset": [2807, 3242], "op": "JUMP", "path": "30"}, "347": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "JUMPDEST", "path": "30"}, "348": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH2", "path": "30", "value": "0x546"}, "351": {"fn": "MockVault.getPoolTokenInfo", "jump": "i", "offset": [2807, 3242], "op": "JUMP", "path": "30"}, "352": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "JUMPDEST", "path": "30"}, "353": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH1", "path": "30", "value": "0x40"}, "355": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "MLOAD", "path": "30"}, "356": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH2", "path": "30", "value": "0xD9"}, "359": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "SWAP5", "path": "30"}, "360": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "SWAP4", "path": "30"}, "361": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "SWAP3", "path": "30"}, "362": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "SWAP2", "path": "30"}, "363": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "SWAP1", "path": "30"}, "364": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "PUSH2", "path": "30", "value": "0x1710"}, "367": {"fn": "MockVault.getPoolTokenInfo", "jump": "i", "offset": [2807, 3242], "op": "JUMP", "path": "30"}, "368": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "JUMPDEST", "path": "30"}, "369": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH2", "path": "30", "value": "0x183"}, "372": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH2", "path": "30", "value": "0x17E"}, "375": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "CALLDATASIZE", "path": "30"}, "376": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH1", "path": "30", "value": "0x4"}, "378": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH2", "path": "30", "value": "0x1210"}, "381": {"fn": "MockVault.callExitPoolGyro", "jump": "i", "offset": [6977, 8384], "op": "JUMP", "path": "30"}, "382": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "JUMPDEST", "path": "30"}, "383": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH2", "path": "30", "value": "0x574"}, "386": {"fn": "MockVault.callExitPoolGyro", "jump": "i", "offset": [6977, 8384], "op": "JUMP", "path": "30"}, "387": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "JUMPDEST", "path": "30"}, "388": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH1", "path": "30", "value": "0x40"}, "390": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "MLOAD", "path": "30"}, "391": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH2", "path": "30", "value": "0xD9"}, "394": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "SWAP3", "path": "30"}, "395": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "SWAP2", "path": "30"}, "396": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "SWAP1", "path": "30"}, "397": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "PUSH2", "path": "30", "value": "0x15D6"}, "400": {"fn": "MockVault.callExitPoolGyro", "jump": "i", "offset": [6977, 8384], "op": "JUMP", "path": "30"}, "401": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "JUMPDEST", "path": "30"}, "402": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "PUSH2", "path": "30", "value": "0xF5"}, "405": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "PUSH2", "path": "30", "value": "0x19F"}, "408": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "CALLDATASIZE", "path": "30"}, "409": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "PUSH1", "path": "30", "value": "0x4"}, "411": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "PUSH2", "path": "30", "value": "0x1008"}, "414": {"fn": "MockVault.callMinimalPoolSwap", "jump": "i", "offset": [3936, 4290], "op": "JUMP", "path": "30"}, "415": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "JUMPDEST", "path": "30"}, "416": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "PUSH2", "path": "30", "value": "0x7D0"}, "419": {"fn": "MockVault.callMinimalPoolSwap", "jump": "i", "offset": [3936, 4290], "op": "JUMP", "path": "30"}, "420": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "JUMPDEST", "path": "30"}, "421": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH2", "path": "30", "value": "0x1B7"}, "424": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH2", "path": "30", "value": "0x1B2"}, "427": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "CALLDATASIZE", "path": "30"}, "428": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH1", "path": "30", "value": "0x4"}, "430": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH2", "path": "30", "value": "0x10C5"}, "433": {"fn": "MockVault.getPoolTokens", "jump": "i", "offset": [2138, 2801], "op": "JUMP", "path": "30"}, "434": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "JUMPDEST", "path": "30"}, "435": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH2", "path": "30", "value": "0x8B6"}, "438": {"fn": "MockVault.getPoolTokens", "jump": "i", "offset": [2138, 2801], "op": "JUMP", "path": "30"}, "439": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "JUMPDEST", "path": "30"}, "440": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH1", "path": "30", "value": "0x40"}, "442": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "MLOAD", "path": "30"}, "443": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH2", "path": "30", "value": "0xD9"}, "446": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "SWAP3", "path": "30"}, "447": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "SWAP2", "path": "30"}, "448": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "SWAP1", "path": "30"}, "449": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "PUSH2", "path": "30", "value": "0x15A8"}, "452": {"fn": "MockVault.getPoolTokens", "jump": "i", "offset": [2138, 2801], "op": "JUMP", "path": "30"}, "453": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "JUMPDEST", "path": "30"}, "454": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "PUSH2", "path": "30", "value": "0x183"}, "457": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "PUSH2", "path": "30", "value": "0x1D3"}, "460": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "CALLDATASIZE", "path": "30"}, "461": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "PUSH1", "path": "30", "value": "0x4"}, "463": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "PUSH2", "path": "30", "value": "0x12CD"}, "466": {"fn": "MockVault.callJoinPoolGyro", "jump": "i", "offset": [5231, 6971], "op": "JUMP", "path": "30"}, "467": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "JUMPDEST", "path": "30"}, "468": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "PUSH2", "path": "30", "value": "0xA18"}, "471": {"fn": "MockVault.callJoinPoolGyro", "jump": "i", "offset": [5231, 6971], "op": "JUMP", "path": "30"}, "472": {"fn": "MockVault.registerPool", "offset": [3248, 3393], "op": "JUMPDEST", "path": "30"}, "473": {"op": "POP"}, "474": {"fn": "MockVault.registerPool", "offset": [3320, 3327], "op": "PUSH1", "path": "30", "value": "0x0"}, "476": {"fn": "MockVault.registerPool", "offset": [3320, 3327], "op": "SWAP1", "path": "30"}, "477": {"fn": "MockVault.registerPool", "jump": "o", "offset": [3248, 3393], "op": "JUMP", "path": "30"}, "478": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "JUMPDEST", "path": "30"}, "479": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x40"}, "481": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "MLOAD", "path": "30"}, "482": {"op": "PUSH3", "value": "0xF64AA5"}, "486": {"op": "PUSH1", "value": "0xE1"}, "488": {"op": "SHL"}, "489": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP2", "path": "30"}, "490": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "MSTORE", "path": "30"}, "491": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4494, 4508], "op": "PUSH1", "path": "30", "value": "0x0"}, "493": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4494, 4508], "op": "SWAP1", "path": "30"}, "494": {"op": "PUSH1", "value": "0x1"}, "496": {"op": "PUSH1", "value": "0x1"}, "498": {"op": "PUSH1", "value": "0xA0"}, "500": {"op": "SHL"}, "501": {"op": "SUB"}, "502": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4536], "op": "DUP8", "path": "30"}, "503": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4536], "op": "AND", "path": "30"}, "504": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4536], "op": "SWAP1", "path": "30"}, "505": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4536], "op": "PUSH4", "path": "30", "value": "0x1EC954A"}, "510": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4536], "op": "SWAP1", "path": "30"}, "511": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH2", "path": "30", "value": "0x212"}, "514": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "SWAP1", "path": "30"}, "515": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4537, 4544], "op": "DUP9", "path": "30"}, "516": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4537, 4544], "op": "SWAP1", "path": "30"}, "517": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4546, 4554], "op": "DUP9", "path": "30"}, "518": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4546, 4554], "op": "SWAP1", "path": "30"}, "519": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4556, 4563], "op": "DUP9", "path": "30"}, "520": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4556, 4563], "op": "SWAP1", "path": "30"}, "521": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4565, 4573], "op": "DUP9", "path": "30"}, "522": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4565, 4573], "op": "SWAP1", "path": "30"}, "523": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x4"}, "525": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ADD", "path": "30"}, "526": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH2", "path": "30", "value": "0x16B2"}, "529": {"fn": "MockVault.callGeneralPoolSwap", "jump": "i", "offset": [4511, 4574], "op": "JUMP", "path": "30"}, "530": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "JUMPDEST", "path": "30"}, "531": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x20"}, "533": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x40"}, "535": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "MLOAD", "path": "30"}, "536": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP1", "path": "30"}, "537": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP4", "path": "30"}, "538": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "SUB", "path": "30"}, "539": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP2", "path": "30"}, "540": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x0"}, "542": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP8", "path": "30"}, "543": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP1", "path": "30"}, "544": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "EXTCODESIZE", "path": "30"}, "545": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ISZERO", "path": "30"}, "546": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP1", "path": "30"}, "547": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ISZERO", "path": "30"}, "548": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH2", "path": "30", "value": "0x22C"}, "551": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "JUMPI", "path": "30"}, "552": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x0"}, "554": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP1", "path": "30"}, "555": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "REVERT", "path": "30"}, "556": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "JUMPDEST", "path": "30"}, "557": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "POP", "path": "30"}, "558": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "GAS", "path": "30"}, "559": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "CALL", "path": "30"}, "560": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ISZERO", "path": "30"}, "561": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP1", "path": "30"}, "562": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ISZERO", "path": "30"}, "563": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH2", "path": "30", "value": "0x240"}, "566": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "JUMPI", "path": "30"}, "567": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "RETURNDATASIZE", "path": "30"}, "568": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x0"}, "570": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP1", "path": "30"}, "571": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "RETURNDATACOPY", "path": "30"}, "572": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "RETURNDATASIZE", "path": "30"}, "573": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x0"}, "575": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "REVERT", "path": "30"}, "576": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "JUMPDEST", "path": "30"}, "577": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "POP", "path": "30"}, "578": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "POP", "path": "30"}, "579": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "POP", "path": "30"}, "580": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "POP", "path": "30"}, "581": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x40"}, "583": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "MLOAD", "path": "30"}, "584": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "RETURNDATASIZE", "path": "30"}, "585": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x1F"}, "587": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "NOT", "path": "30"}, "588": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x1F"}, "590": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP3", "path": "30"}, "591": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ADD", "path": "30"}, "592": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "AND", "path": "30"}, "593": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP3", "path": "30"}, "594": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ADD", "path": "30"}, "595": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP1", "path": "30"}, "596": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH1", "path": "30", "value": "0x40"}, "598": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "MSTORE", "path": "30"}, "599": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "POP", "path": "30"}, "600": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "DUP2", "path": "30"}, "601": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "ADD", "path": "30"}, "602": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "SWAP1", "path": "30"}, "603": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH2", "path": "30", "value": "0x264"}, "606": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "SWAP2", "path": "30"}, "607": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "SWAP1", "path": "30"}, "608": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "PUSH2", "path": "30", "value": "0x13BC"}, "611": {"fn": "MockVault.callGeneralPoolSwap", "jump": "i", "offset": [4511, 4574], "op": "JUMP", "path": "30"}, "612": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4511, 4574], "op": "JUMPDEST", "path": "30"}, "613": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4494, 4574], "op": "SWAP1", "path": "30"}, "614": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4494, 4574], "op": "POP", "path": "30"}, "615": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4627, 4634], "op": "DUP5", "path": "30", "statement": 0}, "616": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4627, 4643], "op": "PUSH1", "path": "30", "value": "0x40"}, "618": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4627, 4643], "op": "ADD", "path": "30"}, "619": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4627, 4643], "op": "MLOAD", "path": "30"}, "620": {"op": "PUSH1", "value": "0x1"}, "622": {"op": "PUSH1", "value": "0x1"}, "624": {"op": "PUSH1", "value": "0xA0"}, "626": {"op": "SHL"}, "627": {"op": "SUB"}, "628": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "AND", "path": "30"}, "629": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4610, 4617], "op": "DUP6", "path": "30"}, "630": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4610, 4625], "op": "PUSH1", "path": "30", "value": "0x20"}, "632": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4610, 4625], "op": "ADD", "path": "30"}, "633": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4610, 4625], "op": "MLOAD", "path": "30"}, "634": {"op": "PUSH1", "value": "0x1"}, "636": {"op": "PUSH1", "value": "0x1"}, "638": {"op": "PUSH1", "value": "0xA0"}, "640": {"op": "SHL"}, "641": {"op": "SUB"}, "642": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "AND", "path": "30"}, "643": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4594, 4601], "op": "DUP7", "path": "30"}, "644": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4594, 4608], "op": "PUSH1", "path": "30", "value": "0x80"}, "646": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4594, 4608], "op": "ADD", "path": "30"}, "647": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4594, 4608], "op": "MLOAD", "path": "30"}, "648": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "PUSH32", "path": "30", "value": "0xAF6C437771B0B661385E6B30C82A76E9067D1C318485CF0F0C47AEB35A9A1DE3"}, "681": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4645, 4651], "op": "DUP5", "path": "30"}, "682": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "PUSH1", "path": "30", "value": "0x40"}, "684": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "MLOAD", "path": "30"}, "685": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "PUSH2", "path": "30", "value": "0x2B6"}, "688": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "SWAP2", "path": "30"}, "689": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "SWAP1", "path": "30"}, "690": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "PUSH2", "path": "30", "value": "0x15E9"}, "693": {"fn": "MockVault.callGeneralPoolSwap", "jump": "i", "offset": [4589, 4652], "op": "JUMP", "path": "30"}, "694": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "JUMPDEST", "path": "30"}, "695": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "PUSH1", "path": "30", "value": "0x40"}, "697": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "MLOAD", "path": "30"}, "698": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "DUP1", "path": "30"}, "699": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "SWAP2", "path": "30"}, "700": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "SUB", "path": "30"}, "701": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "SWAP1", "path": "30"}, "702": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4589, 4652], "op": "LOG4", "path": "30"}, "703": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "POP", "path": "30"}, "704": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "POP", "path": "30"}, "705": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "POP", "path": "30"}, "706": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "POP", "path": "30"}, "707": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "POP", "path": "30"}, "708": {"fn": "MockVault.callGeneralPoolSwap", "offset": [4296, 4659], "op": "POP", "path": "30"}, "709": {"fn": "MockVault.callGeneralPoolSwap", "jump": "o", "offset": [4296, 4659], "op": "JUMP", "path": "30"}, "710": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "JUMPDEST", "path": "30"}, "711": {"fn": "MockVault.updateBalances", "offset": [3767, 3784], "op": "PUSH1", "path": "30", "value": "0x0"}, "713": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "DUP3", "path": "30"}, "714": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "DUP2", "path": "30"}, "715": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "MSTORE", "path": "30"}, "716": {"fn": "MockVault.updateBalances", "offset": [3787, 3792], "op": "PUSH1", "path": "30", "value": "0x1"}, "718": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "PUSH1", "path": "30", "value": "0x20"}, "720": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "MSTORE", "path": "30"}, "721": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "PUSH1", "path": "30", "value": "0x40"}, "723": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "DUP2", "path": "30"}, "724": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "KECCAK256", "path": "30"}, "725": {"fn": "MockVault.updateBalances", "offset": [3787, 3800], "op": "SWAP1", "path": "30"}, "726": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "JUMPDEST", "path": "30"}, "727": {"fn": "MockVault.updateBalances", "offset": [3834, 3842], "op": "DUP3", "path": "30"}, "728": {"fn": "MockVault.updateBalances", "offset": [3834, 3849], "op": "MLOAD", "path": "30"}, "729": {"fn": "MockVault.updateBalances", "offset": [3830, 3831], "op": "DUP2", "path": "30"}, "730": {"fn": "MockVault.updateBalances", "offset": [3830, 3849], "op": "LT", "path": "30"}, "731": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "ISZERO", "path": "30"}, "732": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "PUSH2", "path": "30", "value": "0x335"}, "735": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "JUMPI", "path": "30"}, "736": {"fn": "MockVault.updateBalances", "offset": [3902, 3910], "op": "DUP3", "path": "30", "statement": 1}, "737": {"fn": "MockVault.updateBalances", "offset": [3911, 3912], "op": "DUP2", "path": "30"}, "738": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "DUP2", "path": "30"}, "739": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "MLOAD", "path": "30"}, "740": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "DUP2", "path": "30"}, "741": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "LT", "path": "30"}, "742": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "PUSH2", "path": "30", "value": "0x2EB"}, "745": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "JUMPI", "path": "30"}, "746": {"dev": "Index out of range", "fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "INVALID", "path": "30"}, "747": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "JUMPDEST", "path": "30"}, "748": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "PUSH1", "path": "30", "value": "0x20"}, "750": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "MUL", "path": "30"}, "751": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "PUSH1", "path": "30", "value": "0x20"}, "753": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "ADD", "path": "30"}, "754": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "ADD", "path": "30"}, "755": {"fn": "MockVault.updateBalances", "offset": [3902, 3913], "op": "MLOAD", "path": "30"}, "756": {"fn": "MockVault.updateBalances", "offset": [3870, 3874], "op": "DUP3", "path": "30"}, "757": {"fn": "MockVault.updateBalances", "offset": [3870, 3883], "op": "PUSH1", "path": "30", "value": "0x1"}, "759": {"fn": "MockVault.updateBalances", "offset": [3870, 3883], "op": "ADD", "path": "30"}, "760": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "PUSH1", "path": "30", "value": "0x0"}, "762": {"fn": "MockVault.updateBalances", "offset": [3884, 3888], "op": "DUP5", "path": "30"}, "763": {"fn": "MockVault.updateBalances", "offset": [3884, 3895], "op": "PUSH1", "path": "30", "value": "0x0"}, "765": {"fn": "MockVault.updateBalances", "offset": [3884, 3895], "op": "ADD", "path": "30"}, "766": {"fn": "MockVault.updateBalances", "offset": [3896, 3897], "op": "DUP5", "path": "30"}, "767": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "DUP2", "path": "30"}, "768": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "SLOAD", "path": "30"}, "769": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "DUP2", "path": "30"}, "770": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "LT", "path": "30"}, "771": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "PUSH2", "path": "30", "value": "0x308"}, "774": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "JUMPI", "path": "30"}, "775": {"dev": "Index out of range", "fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "INVALID", "path": "30"}, "776": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "JUMPDEST", "path": "30"}, "777": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "PUSH1", "path": "30", "value": "0x0"}, "779": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "SWAP2", "path": "30"}, "780": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "DUP3", "path": "30"}, "781": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "MSTORE", "path": "30"}, "782": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "PUSH1", "path": "30", "value": "0x20"}, "784": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "DUP1", "path": "30"}, "785": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "DUP4", "path": "30"}, "786": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "KECCAK256", "path": "30"}, "787": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "SWAP1", "path": "30"}, "788": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "SWAP2", "path": "30"}, "789": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "ADD", "path": "30"}, "790": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "SLOAD", "path": "30"}, "791": {"op": "PUSH1", "value": "0x1"}, "793": {"op": "PUSH1", "value": "0x1"}, "795": {"op": "PUSH1", "value": "0xA0"}, "797": {"op": "SHL"}, "798": {"op": "SUB"}, "799": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "AND", "path": "30"}, "800": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "DUP4", "path": "30"}, "801": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "MSTORE", "path": "30"}, "802": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "DUP3", "path": "30"}, "803": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "ADD", "path": "30"}, "804": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "SWAP3", "path": "30"}, "805": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "SWAP1", "path": "30"}, "806": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "SWAP3", "path": "30"}, "807": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "MSTORE", "path": "30"}, "808": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "PUSH1", "path": "30", "value": "0x40"}, "810": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "ADD", "path": "30"}, "811": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "SWAP1", "path": "30"}, "812": {"fn": "MockVault.updateBalances", "offset": [3870, 3899], "op": "KECCAK256", "path": "30"}, "813": {"fn": "MockVault.updateBalances", "offset": [3870, 3913], "op": "SSTORE", "path": "30"}, "814": {"fn": "MockVault.updateBalances", "offset": [3884, 3898], "op": "PUSH1", "path": "30", "value": "0x1"}, "816": {"fn": "MockVault.updateBalances", "offset": [3851, 3854], "op": "ADD", "path": "30", "statement": 2}, "817": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "PUSH2", "path": "30", "value": "0x2D6"}, "820": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "JUMP", "path": "30"}, "821": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "JUMPDEST", "path": "30"}, "822": {"fn": "MockVault.updateBalances", "offset": [3810, 3924], "op": "POP", "path": "30"}, "823": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "POP", "path": "30"}, "824": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "POP", "path": "30"}, "825": {"fn": "MockVault.updateBalances", "offset": [3681, 3930], "op": "POP", "path": "30"}, "826": {"fn": "MockVault.updateBalances", "jump": "o", "offset": [3681, 3930], "op": "JUMP", "path": "30"}, "827": {"fn": "MockVault.getPoolId", "offset": [10699, 10816], "op": "JUMPDEST", "path": "30"}, "828": {"fn": "MockVault.getPoolId", "offset": [10743, 10750], "op": "PUSH1", "path": "30", "value": "0x0"}, "830": {"fn": "MockVault.getPoolId", "offset": [10699, 10816], "op": "SWAP1", "path": "30"}, "831": {"fn": "MockVault.getPoolId", "jump": "o", "offset": [10699, 10816], "op": "JUMP", "path": "30"}, "832": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "JUMPDEST", "path": "30"}, "833": {"fn": "MockVault.registerTokens", "offset": [3530, 3547], "op": "PUSH1", "path": "30", "value": "0x0"}, "835": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "DUP4", "path": "30"}, "836": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "DUP2", "path": "30"}, "837": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "MSTORE", "path": "30"}, "838": {"fn": "MockVault.registerTokens", "offset": [3550, 3555], "op": "PUSH1", "path": "30", "value": "0x1"}, "840": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "PUSH1", "path": "30", "value": "0x20"}, "842": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "MSTORE", "path": "30"}, "843": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "PUSH1", "path": "30", "value": "0x40"}, "845": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "DUP2", "path": "30"}, "846": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "KECCAK256", "path": "30"}, "847": {"fn": "MockVault.registerTokens", "offset": [3550, 3563], "op": "SWAP1", "path": "30"}, "848": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "JUMPDEST", "path": "30"}, "849": {"fn": "MockVault.registerTokens", "offset": [3597, 3603], "op": "DUP4", "path": "30"}, "850": {"fn": "MockVault.registerTokens", "offset": [3597, 3610], "op": "MLOAD", "path": "30"}, "851": {"fn": "MockVault.registerTokens", "offset": [3593, 3594], "op": "DUP2", "path": "30"}, "852": {"fn": "MockVault.registerTokens", "offset": [3593, 3610], "op": "LT", "path": "30"}, "853": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "ISZERO", "path": "30"}, "854": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "PUSH2", "path": "30", "value": "0x3AE"}, "857": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "JUMPI", "path": "30"}, "858": {"fn": "MockVault.registerTokens", "offset": [3631, 3635], "op": "DUP2", "path": "30", "statement": 3}, "859": {"fn": "MockVault.registerTokens", "offset": [3631, 3642], "op": "PUSH1", "path": "30", "value": "0x0"}, "861": {"fn": "MockVault.registerTokens", "offset": [3631, 3642], "op": "ADD", "path": "30"}, "862": {"fn": "MockVault.registerTokens", "offset": [3648, 3654], "op": "DUP5", "path": "30"}, "863": {"fn": "MockVault.registerTokens", "offset": [3655, 3656], "op": "DUP3", "path": "30"}, "864": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "DUP2", "path": "30"}, "865": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "MLOAD", "path": "30"}, "866": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "DUP2", "path": "30"}, "867": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "LT", "path": "30"}, "868": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "PUSH2", "path": "30", "value": "0x369"}, "871": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "JUMPI", "path": "30"}, "872": {"dev": "Index out of range", "fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "INVALID", "path": "30"}, "873": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "JUMPDEST", "path": "30"}, "874": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "PUSH1", "path": "30", "value": "0x20"}, "876": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "SWAP1", "path": "30"}, "877": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "DUP2", "path": "30"}, "878": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "MUL", "path": "30"}, "879": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "SWAP2", "path": "30"}, "880": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "SWAP1", "path": "30"}, "881": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "SWAP2", "path": "30"}, "882": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "ADD", "path": "30"}, "883": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "DUP2", "path": "30"}, "884": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "ADD", "path": "30"}, "885": {"fn": "MockVault.registerTokens", "offset": [3648, 3657], "op": "MLOAD", "path": "30"}, "886": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "DUP3", "path": "30"}, "887": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SLOAD", "path": "30"}, "888": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "PUSH1", "path": "30", "value": "0x1"}, "890": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "DUP1", "path": "30"}, "891": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "DUP3", "path": "30"}, "892": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "ADD", "path": "30"}, "893": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "DUP6", "path": "30"}, "894": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SSTORE", "path": "30"}, "895": {"op": "PUSH1", "value": "0x0"}, "897": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP5", "path": "30"}, "898": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "DUP6", "path": "30"}, "899": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "MSTORE", "path": "30"}, "900": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP3", "path": "30"}, "901": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP1", "path": "30"}, "902": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP4", "path": "30"}, "903": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "KECCAK256", "path": "30"}, "904": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP1", "path": "30"}, "905": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP3", "path": "30"}, "906": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "ADD", "path": "30"}, "907": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "DUP1", "path": "30"}, "908": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SLOAD", "path": "30"}, "909": {"op": "PUSH1", "value": "0x1"}, "911": {"op": "PUSH1", "value": "0x1"}, "913": {"op": "PUSH1", "value": "0xA0"}, "915": {"op": "SHL"}, "916": {"op": "SUB"}, "917": {"op": "NOT"}, "918": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "AND", "path": "30"}, "919": {"op": "PUSH1", "value": "0x1"}, "921": {"op": "PUSH1", "value": "0x1"}, "923": {"op": "PUSH1", "value": "0xA0"}, "925": {"op": "SHL"}, "926": {"op": "SUB"}, "927": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP1", "path": "30"}, "928": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP4", "path": "30"}, "929": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "AND", "path": "30"}, "930": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP3", "path": "30"}, "931": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP1", "path": "30"}, "932": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP3", "path": "30"}, "933": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "OR", "path": "30"}, "934": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP1", "path": "30"}, "935": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SWAP2", "path": "30"}, "936": {"fn": "MockVault.registerTokens", "offset": [3631, 3658], "op": "SSTORE", "path": "30"}, "937": {"fn": "MockVault.registerTokens", "offset": [3612, 3615], "op": "ADD", "path": "30", "statement": 4}, "938": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "PUSH2", "path": "30", "value": "0x350"}, "941": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "JUMP", "path": "30"}, "942": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "JUMPDEST", "path": "30"}, "943": {"fn": "MockVault.registerTokens", "offset": [3573, 3669], "op": "POP", "path": "30"}, "944": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "POP", "path": "30"}, "945": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "POP", "path": "30"}, "946": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "POP", "path": "30"}, "947": {"fn": "MockVault.registerTokens", "offset": [3399, 3675], "op": "POP", "path": "30"}, "948": {"fn": "MockVault.registerTokens", "jump": "o", "offset": [3399, 3675], "op": "JUMP", "path": "30"}, "949": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "JUMPDEST", "path": "30"}, "950": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9009, 9023], "op": "PUSH1", "path": "30", "value": "0x80"}, "952": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9009, 9023], "op": "DUP4", "path": "30"}, "953": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9009, 9023], "op": "ADD", "path": "30"}, "954": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9009, 9023], "op": "MLOAD", "path": "30"}, "955": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8983, 9000], "op": "PUSH1", "path": "30", "value": "0x0"}, "957": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "SWAP1", "path": "30"}, "958": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "DUP2", "path": "30"}, "959": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "MSTORE", "path": "30"}, "960": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9008], "op": "PUSH1", "path": "30", "value": "0x1"}, "962": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "PUSH1", "path": "30", "value": "0x20"}, "964": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "DUP2", "path": "30"}, "965": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "DUP2", "path": "30"}, "966": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "MSTORE", "path": "30"}, "967": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "PUSH1", "path": "30", "value": "0x40"}, "969": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "DUP1", "path": "30"}, "970": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "DUP5", "path": "30"}, "971": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "KECCAK256", "path": "30"}, "972": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9120, 9136], "op": "DUP2", "path": "30", "statement": 5}, "973": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9120, 9136], "op": "DUP9", "path": "30"}, "974": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9120, 9136], "op": "ADD", "path": "30"}, "975": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9120, 9136], "op": "MLOAD", "path": "30"}, "976": {"op": "PUSH1", "value": "0x1"}, "978": {"op": "PUSH1", "value": "0x1"}, "980": {"op": "PUSH1", "value": "0xA0"}, "982": {"op": "SHL"}, "983": {"op": "SUB"}, "984": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "SWAP1", "path": "30"}, "985": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "DUP2", "path": "30"}, "986": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "AND", "path": "30"}, "987": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "DUP7", "path": "30"}, "988": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "MSTORE", "path": "30"}, "989": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9119], "op": "SWAP4", "path": "30"}, "990": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9119], "op": "DUP2", "path": "30"}, "991": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9119], "op": "ADD", "path": "30"}, "992": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "DUP4", "path": "30"}, "993": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "MSTORE", "path": "30"}, "994": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "DUP2", "path": "30"}, "995": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "DUP6", "path": "30"}, "996": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "KECCAK256", "path": "30"}, "997": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9106, 9137], "op": "SLOAD", "path": "30"}, "998": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9087, 9102], "op": "SWAP3", "path": "30"}, "999": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9087, 9102], "op": "DUP9", "path": "30"}, "1000": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9087, 9102], "op": "ADD", "path": "30"}, "1001": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9087, 9102], "op": "MLOAD", "path": "30"}, "1002": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "SWAP1", "path": "30"}, "1003": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "SWAP4", "path": "30"}, "1004": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "AND", "path": "30"}, "1005": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "DUP5", "path": "30"}, "1006": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "MSTORE", "path": "30"}, "1007": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "SWAP1", "path": "30"}, "1008": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "SWAP3", "path": "30"}, "1009": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "KECCAK256", "path": "30"}, "1010": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9103], "op": "SLOAD", "path": "30"}, "1011": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "SWAP1", "path": "30"}, "1012": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9003, 9024], "op": "SWAP2", "path": "30"}, "1013": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9073, 9137], "op": "ADD", "path": "30"}, "1014": {"branch": 36, "fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9226, 9236], "op": "DUP1", "path": "30"}, "1015": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9222, 9245], "op": "PUSH2", "path": "30", "value": "0x401"}, "1018": {"branch": 36, "fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9222, 9245], "op": "JUMPI", "path": "30"}, "1019": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9238, 9245], "op": "POP", "path": "30", "statement": 6}, "1020": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9238, 9245], "op": "POP", "path": "30"}, "1021": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9238, 9245], "op": "PUSH2", "path": "30", "value": "0x335"}, "1024": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9238, 9245], "op": "JUMP", "path": "30"}, "1025": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [9222, 9245], "op": "JUMPDEST", "path": "30"}, "1026": {"op": "POP"}, "1027": {"op": "POP"}, "1028": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x40"}, "1030": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "MLOAD", "path": "30"}, "1031": {"op": "PUSH4", "value": "0x274B0443"}, "1036": {"op": "PUSH1", "value": "0xE2"}, "1038": {"op": "SHL"}, "1039": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP2", "path": "30"}, "1040": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "MSTORE", "path": "30"}, "1041": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10345, 10359], "op": "PUSH1", "path": "30", "value": "0x0"}, "1043": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10345, 10359], "op": "SWAP1", "path": "30"}, "1044": {"op": "PUSH1", "value": "0x1"}, "1046": {"op": "PUSH1", "value": "0x1"}, "1048": {"op": "PUSH1", "value": "0xA0"}, "1050": {"op": "SHL"}, "1051": {"op": "SUB"}, "1052": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10402], "op": "DUP7", "path": "30"}, "1053": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10402], "op": "AND", "path": "30"}, "1054": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10402], "op": "SWAP1", "path": "30"}, "1055": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10402], "op": "PUSH4", "path": "30", "value": "0x9D2C110C"}, "1060": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10402], "op": "SWAP1", "path": "30"}, "1061": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH2", "path": "30", "value": "0x436"}, "1064": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "SWAP1", "path": "30"}, "1065": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10403, 10410], "op": "DUP8", "path": "30"}, "1066": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10403, 10410], "op": "SWAP1", "path": "30"}, "1067": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10412, 10426], "op": "DUP8", "path": "30"}, "1068": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10412, 10426], "op": "SWAP1", "path": "30"}, "1069": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10428, 10443], "op": "DUP8", "path": "30"}, "1070": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10428, 10443], "op": "SWAP1", "path": "30"}, "1071": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x4"}, "1073": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ADD", "path": "30"}, "1074": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH2", "path": "30", "value": "0x16EB"}, "1077": {"fn": "MockVault.callMinimalGyroPoolSwap", "jump": "i", "offset": [10362, 10444], "op": "JUMP", "path": "30"}, "1078": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "JUMPDEST", "path": "30"}, "1079": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x20"}, "1081": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x40"}, "1083": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "MLOAD", "path": "30"}, "1084": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP1", "path": "30"}, "1085": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP4", "path": "30"}, "1086": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "SUB", "path": "30"}, "1087": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP2", "path": "30"}, "1088": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x0"}, "1090": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP8", "path": "30"}, "1091": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP1", "path": "30"}, "1092": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "EXTCODESIZE", "path": "30"}, "1093": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ISZERO", "path": "30"}, "1094": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP1", "path": "30"}, "1095": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ISZERO", "path": "30"}, "1096": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH2", "path": "30", "value": "0x450"}, "1099": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "JUMPI", "path": "30"}, "1100": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x0"}, "1102": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP1", "path": "30"}, "1103": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "REVERT", "path": "30"}, "1104": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "JUMPDEST", "path": "30"}, "1105": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "POP", "path": "30"}, "1106": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "GAS", "path": "30"}, "1107": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "CALL", "path": "30"}, "1108": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ISZERO", "path": "30"}, "1109": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP1", "path": "30"}, "1110": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ISZERO", "path": "30"}, "1111": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH2", "path": "30", "value": "0x464"}, "1114": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "JUMPI", "path": "30"}, "1115": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "RETURNDATASIZE", "path": "30"}, "1116": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x0"}, "1118": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP1", "path": "30"}, "1119": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "RETURNDATACOPY", "path": "30"}, "1120": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "RETURNDATASIZE", "path": "30"}, "1121": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x0"}, "1123": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "REVERT", "path": "30"}, "1124": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "JUMPDEST", "path": "30"}, "1125": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "POP", "path": "30"}, "1126": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "POP", "path": "30"}, "1127": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "POP", "path": "30"}, "1128": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "POP", "path": "30"}, "1129": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x40"}, "1131": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "MLOAD", "path": "30"}, "1132": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "RETURNDATASIZE", "path": "30"}, "1133": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x1F"}, "1135": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "NOT", "path": "30"}, "1136": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x1F"}, "1138": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP3", "path": "30"}, "1139": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ADD", "path": "30"}, "1140": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "AND", "path": "30"}, "1141": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP3", "path": "30"}, "1142": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ADD", "path": "30"}, "1143": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP1", "path": "30"}, "1144": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH1", "path": "30", "value": "0x40"}, "1146": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "MSTORE", "path": "30"}, "1147": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "POP", "path": "30"}, "1148": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "DUP2", "path": "30"}, "1149": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "ADD", "path": "30"}, "1150": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "SWAP1", "path": "30"}, "1151": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH2", "path": "30", "value": "0x488"}, "1154": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "SWAP2", "path": "30"}, "1155": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "SWAP1", "path": "30"}, "1156": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "PUSH2", "path": "30", "value": "0x13BC"}, "1159": {"fn": "MockVault.callMinimalGyroPoolSwap", "jump": "i", "offset": [10362, 10444], "op": "JUMP", "path": "30"}, "1160": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10362, 10444], "op": "JUMPDEST", "path": "30"}, "1161": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10345, 10444], "op": "SWAP1", "path": "30"}, "1162": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10345, 10444], "op": "POP", "path": "30"}, "1163": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10497, 10504], "op": "DUP4", "path": "30", "statement": 7}, "1164": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10497, 10513], "op": "PUSH1", "path": "30", "value": "0x40"}, "1166": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10497, 10513], "op": "ADD", "path": "30"}, "1167": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10497, 10513], "op": "MLOAD", "path": "30"}, "1168": {"op": "PUSH1", "value": "0x1"}, "1170": {"op": "PUSH1", "value": "0x1"}, "1172": {"op": "PUSH1", "value": "0xA0"}, "1174": {"op": "SHL"}, "1175": {"op": "SUB"}, "1176": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "AND", "path": "30"}, "1177": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10480, 10487], "op": "DUP5", "path": "30"}, "1178": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10480, 10495], "op": "PUSH1", "path": "30", "value": "0x20"}, "1180": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10480, 10495], "op": "ADD", "path": "30"}, "1181": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10480, 10495], "op": "MLOAD", "path": "30"}, "1182": {"op": "PUSH1", "value": "0x1"}, "1184": {"op": "PUSH1", "value": "0x1"}, "1186": {"op": "PUSH1", "value": "0xA0"}, "1188": {"op": "SHL"}, "1189": {"op": "SUB"}, "1190": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "AND", "path": "30"}, "1191": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10464, 10471], "op": "DUP6", "path": "30"}, "1192": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10464, 10478], "op": "PUSH1", "path": "30", "value": "0x80"}, "1194": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10464, 10478], "op": "ADD", "path": "30"}, "1195": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10464, 10478], "op": "MLOAD", "path": "30"}, "1196": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "PUSH32", "path": "30", "value": "0xAF6C437771B0B661385E6B30C82A76E9067D1C318485CF0F0C47AEB35A9A1DE3"}, "1229": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10515, 10521], "op": "DUP5", "path": "30"}, "1230": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "PUSH1", "path": "30", "value": "0x40"}, "1232": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "MLOAD", "path": "30"}, "1233": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "PUSH2", "path": "30", "value": "0x4DA"}, "1236": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "SWAP2", "path": "30"}, "1237": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "SWAP1", "path": "30"}, "1238": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "PUSH2", "path": "30", "value": "0x15E9"}, "1241": {"fn": "MockVault.callMinimalGyroPoolSwap", "jump": "i", "offset": [10459, 10522], "op": "JUMP", "path": "30"}, "1242": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "JUMPDEST", "path": "30"}, "1243": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "PUSH1", "path": "30", "value": "0x40"}, "1245": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "MLOAD", "path": "30"}, "1246": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "DUP1", "path": "30"}, "1247": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "SWAP2", "path": "30"}, "1248": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "SUB", "path": "30"}, "1249": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "SWAP1", "path": "30"}, "1250": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10459, 10522], "op": "LOG4", "path": "30"}, "1251": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10560, 10574], "op": "PUSH1", "path": "30", "value": "0x80"}, "1253": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10560, 10574], "op": "DUP5", "path": "30"}, "1254": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10560, 10574], "op": "ADD", "path": "30"}, "1255": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10560, 10574], "op": "MLOAD", "path": "30"}, "1256": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10533, 10551], "op": "PUSH1", "path": "30", "value": "0x0"}, "1258": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "SWAP1", "path": "30"}, "1259": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "DUP2", "path": "30"}, "1260": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "MSTORE", "path": "30"}, "1261": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10559], "op": "PUSH1", "path": "30", "value": "0x1"}, "1263": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "PUSH1", "path": "30", "value": "0x20"}, "1265": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "DUP2", "path": "30"}, "1266": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "DUP2", "path": "30"}, "1267": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "MSTORE", "path": "30"}, "1268": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "PUSH1", "path": "30", "value": "0x40"}, "1270": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "DUP1", "path": "30"}, "1271": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "DUP5", "path": "30"}, "1272": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10554, 10575], "op": "KECCAK256", "path": "30"}, "1273": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10620, 10634], "op": "PUSH1", "path": "30", "statement": 8, "value": "0x60"}, "1275": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10620, 10634], "op": "DUP10", "path": "30"}, "1276": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10620, 10634], "op": "ADD", "path": "30"}, "1277": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10620, 10634], "op": "MLOAD", "path": "30"}, "1278": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10600, 10615], "op": "DUP4", "path": "30"}, "1279": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10600, 10615], "op": "DUP11", "path": "30"}, "1280": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10600, 10615], "op": "ADD", "path": "30"}, "1281": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10600, 10615], "op": "MLOAD", "path": "30"}, "1282": {"op": "PUSH1", "value": "0x1"}, "1284": {"op": "PUSH1", "value": "0x1"}, "1286": {"op": "PUSH1", "value": "0xA0"}, "1288": {"op": "SHL"}, "1289": {"op": "SUB"}, "1290": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "SWAP1", "path": "30"}, "1291": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "DUP2", "path": "30"}, "1292": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "AND", "path": "30"}, "1293": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "DUP8", "path": "30"}, "1294": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "MSTORE", "path": "30"}, "1295": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10599], "op": "SWAP2", "path": "30"}, "1296": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10599], "op": "SWAP1", "path": "30"}, "1297": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10599], "op": "SWAP5", "path": "30"}, "1298": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10599], "op": "ADD", "path": "30"}, "1299": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "SWAP1", "path": "30"}, "1300": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "SWAP3", "path": "30"}, "1301": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "MSTORE", "path": "30"}, "1302": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "DUP1", "path": "30"}, "1303": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "DUP5", "path": "30"}, "1304": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10616], "op": "KECCAK256", "path": "30"}, "1305": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "DUP1", "path": "30"}, "1306": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "SLOAD", "path": "30"}, "1307": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "SWAP1", "path": "30"}, "1308": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "SWAP4", "path": "30"}, "1309": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "ADD", "path": "30"}, "1310": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "SWAP1", "path": "30"}, "1311": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "SWAP3", "path": "30"}, "1312": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10585, 10634], "op": "SSTORE", "path": "30"}, "1313": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10659, 10675], "op": "DUP2", "path": "30", "statement": 9}, "1314": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10659, 10675], "op": "DUP8", "path": "30"}, "1315": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10659, 10675], "op": "ADD", "path": "30"}, "1316": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10659, 10675], "op": "MLOAD", "path": "30"}, "1317": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10676], "op": "AND", "path": "30"}, "1318": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10676], "op": "DUP3", "path": "30"}, "1319": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10676], "op": "MSTORE", "path": "30"}, "1320": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10676], "op": "SWAP1", "path": "30"}, "1321": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10676], "op": "KECCAK256", "path": "30"}, "1322": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "DUP1", "path": "30"}, "1323": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "SLOAD", "path": "30"}, "1324": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "SWAP2", "path": "30"}, "1325": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "SWAP1", "path": "30"}, "1326": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "SWAP2", "path": "30"}, "1327": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "SUB", "path": "30"}, "1328": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "SWAP1", "path": "30"}, "1329": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [10644, 10686], "op": "SSTORE", "path": "30"}, "1330": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "POP", "path": "30"}, "1331": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "POP", "path": "30"}, "1332": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "POP", "path": "30"}, "1333": {"fn": "MockVault.callMinimalGyroPoolSwap", "offset": [8390, 10693], "op": "POP", "path": "30"}, "1334": {"fn": "MockVault.callMinimalGyroPoolSwap", "jump": "o", "offset": [8390, 10693], "op": "JUMP", "path": "30"}, "1335": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "JUMPDEST", "path": "30"}, "1336": {"fn": "MockVault.getAuthorizer", "offset": [2084, 2095], "op": "PUSH1", "path": "30", "value": "0x0"}, "1338": {"fn": "MockVault.getAuthorizer", "offset": [2114, 2125], "op": "SLOAD", "path": "30", "statement": 10}, "1339": {"op": "PUSH1", "value": "0x1"}, "1341": {"op": "PUSH1", "value": "0x1"}, "1343": {"op": "PUSH1", "value": "0xA0"}, "1345": {"op": "SHL"}, "1346": {"op": "SUB"}, "1347": {"fn": "MockVault.getAuthorizer", "offset": [2114, 2125], "op": "AND", "path": "30"}, "1348": {"fn": "MockVault.getAuthorizer", "offset": [2036, 2132], "op": "SWAP1", "path": "30"}, "1349": {"fn": "MockVault.getAuthorizer", "jump": "o", "offset": [2036, 2132], "op": "JUMP", "path": "30"}, "1350": {"fn": "MockVault.getPoolTokenInfo", "offset": [2807, 3242], "op": "JUMPDEST", "path": "30"}, "1351": {"fn": "MockVault.getPoolTokenInfo", "offset": [2923, 2935], "op": "PUSH1", "path": "30", "value": "0x0"}, "1353": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "SWAP2", "path": "30"}, "1354": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "DUP3", "path": "30"}, "1355": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "MSTORE", "path": "30"}, "1356": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3085], "op": "PUSH1", "path": "30", "value": "0x1"}, "1358": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "PUSH1", "path": "30", "value": "0x20"}, "1360": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "DUP2", "path": "30"}, "1361": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "DUP2", "path": "30"}, "1362": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "MSTORE", "path": "30"}, "1363": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "PUSH1", "path": "30", "value": "0x40"}, "1365": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "DUP1", "path": "30"}, "1366": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "DUP6", "path": "30"}, "1367": {"fn": "MockVault.getPoolTokenInfo", "offset": [3080, 3093], "op": "KECCAK256", "path": "30"}, "1368": {"op": "PUSH1", "value": "0x1"}, "1370": {"op": "PUSH1", "value": "0x1"}, "1372": {"op": "PUSH1", "value": "0xA0"}, "1374": {"op": "SHL"}, "1375": {"op": "SUB"}, "1376": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "SWAP1", "path": "30", "statement": 11}, "1377": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "SWAP5", "path": "30"}, "1378": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "AND", "path": "30"}, "1379": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "DUP6", "path": "30"}, "1380": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "MSTORE", "path": "30"}, "1381": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3123], "op": "SWAP3", "path": "30"}, "1382": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3123], "op": "SWAP1", "path": "30"}, "1383": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3123], "op": "SWAP2", "path": "30"}, "1384": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3123], "op": "ADD", "path": "30"}, "1385": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "SWAP1", "path": "30"}, "1386": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "MSTORE", "path": "30"}, "1387": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "DUP2", "path": "30"}, "1388": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "KECCAK256", "path": "30"}, "1389": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "SLOAD", "path": "30"}, "1390": {"fn": "MockVault.getPoolTokenInfo", "offset": [3110, 3130], "op": "SWAP2", "path": "30"}, "1391": {"fn": "MockVault.getPoolTokenInfo", "offset": [2923, 2935], "op": "DUP2", "path": "30"}, "1392": {"fn": "MockVault.getPoolTokenInfo", "offset": [2923, 2935], "op": "SWAP1", "path": "30"}, "1393": {"fn": "MockVault.getPoolTokenInfo", "offset": [2923, 2935], "op": "DUP2", "path": "30"}, "1394": {"fn": "MockVault.getPoolTokenInfo", "offset": [2923, 2935], "op": "SWAP1", "path": "30"}, "1395": {"fn": "MockVault.getPoolTokenInfo", "jump": "o", "offset": [2807, 3242], "op": "JUMP", "path": "30"}, "1396": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "JUMPDEST", "path": "30"}, "1397": {"fn": "MockVault.callExitPoolGyro", "offset": [7271, 7298], "op": "PUSH1", "path": "30", "value": "0x60"}, "1399": {"fn": "MockVault.callExitPoolGyro", "offset": [7300, 7338], "op": "DUP1", "path": "30"}, "1400": {"fn": "MockVault.callExitPoolGyro", "offset": [7444, 7478], "op": "PUSH1", "path": "30", "value": "0x0"}, "1402": {"fn": "MockVault.callExitPoolGyro", "offset": [7481, 7538], "op": "PUSH1", "path": "30", "value": "0x1"}, "1404": {"fn": "MockVault.callExitPoolGyro", "offset": [7444, 7538], "op": "SWAP1", "path": "30"}, "1405": {"fn": "MockVault.callExitPoolGyro", "offset": [7444, 7538], "op": "POP", "path": "30"}, "1406": {"fn": "MockVault.callExitPoolGyro", "offset": [7549, 7570], "op": "PUSH1", "path": "30", "value": "0x0"}, "1408": {"fn": "MockVault.callExitPoolGyro", "offset": [7584, 7588], "op": "DUP2", "path": "30"}, "1409": {"fn": "MockVault.callExitPoolGyro", "offset": [7590, 7601], "op": "DUP6", "path": "30"}, "1410": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "PUSH1", "path": "30", "value": "0x40"}, "1412": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "MLOAD", "path": "30"}, "1413": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "PUSH1", "path": "30", "value": "0x20"}, "1415": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "ADD", "path": "30"}, "1416": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "PUSH2", "path": "30", "value": "0x592"}, "1419": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SWAP3", "path": "30"}, "1420": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SWAP2", "path": "30"}, "1421": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SWAP1", "path": "30"}, "1422": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "PUSH2", "path": "30", "value": "0x1664"}, "1425": {"fn": "MockVault.callExitPoolGyro", "jump": "i", "offset": [7573, 7602], "op": "JUMP", "path": "30"}, "1426": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "JUMPDEST", "path": "30"}, "1427": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "PUSH1", "path": "30", "value": "0x40"}, "1429": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "DUP1", "path": "30"}, "1430": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "MLOAD", "path": "30"}, "1431": {"op": "PUSH1", "value": "0x1F"}, "1433": {"op": "NOT"}, "1434": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "DUP2", "path": "30"}, "1435": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "DUP5", "path": "30"}, "1436": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SUB", "path": "30"}, "1437": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "ADD", "path": "30"}, "1438": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "DUP2", "path": "30"}, "1439": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "MSTORE", "path": "30"}, "1440": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SWAP1", "path": "30"}, "1441": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "DUP3", "path": "30"}, "1442": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SWAP1", "path": "30"}, "1443": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "MSTORE", "path": "30"}, "1444": {"op": "PUSH4", "value": "0x74F3B009"}, "1449": {"op": "PUSH1", "value": "0xE0"}, "1451": {"op": "SHL"}, "1452": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP3", "path": "30", "statement": 12}, "1453": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "MSTORE", "path": "30"}, "1454": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SWAP2", "path": "30"}, "1455": {"op": "POP"}, "1456": {"op": "PUSH1", "value": "0x1"}, "1458": {"op": "PUSH1", "value": "0x1"}, "1460": {"op": "PUSH1", "value": "0xA0"}, "1462": {"op": "SHL"}, "1463": {"op": "SUB"}, "1464": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7666], "op": "DUP14", "path": "30"}, "1465": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7666], "op": "AND", "path": "30"}, "1466": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7666], "op": "SWAP1", "path": "30"}, "1467": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7666], "op": "PUSH4", "path": "30", "value": "0x74F3B009"}, "1472": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7666], "op": "SWAP1", "path": "30"}, "1473": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH2", "path": "30", "value": "0x5DA"}, "1476": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "SWAP1", "path": "30"}, "1477": {"fn": "MockVault.callExitPoolGyro", "offset": [7680, 7686], "op": "DUP15", "path": "30"}, "1478": {"fn": "MockVault.callExitPoolGyro", "offset": [7680, 7686], "op": "SWAP1", "path": "30"}, "1479": {"fn": "MockVault.callExitPoolGyro", "offset": [7700, 7706], "op": "DUP15", "path": "30"}, "1480": {"fn": "MockVault.callExitPoolGyro", "offset": [7700, 7706], "op": "SWAP1", "path": "30"}, "1481": {"fn": "MockVault.callExitPoolGyro", "offset": [7720, 7729], "op": "DUP15", "path": "30"}, "1482": {"fn": "MockVault.callExitPoolGyro", "offset": [7720, 7729], "op": "SWAP1", "path": "30"}, "1483": {"fn": "MockVault.callExitPoolGyro", "offset": [7743, 7758], "op": "DUP15", "path": "30"}, "1484": {"fn": "MockVault.callExitPoolGyro", "offset": [7743, 7758], "op": "SWAP1", "path": "30"}, "1485": {"fn": "MockVault.callExitPoolGyro", "offset": [7772, 7787], "op": "DUP15", "path": "30"}, "1486": {"fn": "MockVault.callExitPoolGyro", "offset": [7772, 7787], "op": "SWAP1", "path": "30"}, "1487": {"fn": "MockVault.callExitPoolGyro", "offset": [7801, 7826], "op": "DUP15", "path": "30"}, "1488": {"fn": "MockVault.callExitPoolGyro", "offset": [7801, 7826], "op": "SWAP1", "path": "30"}, "1489": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "DUP11", "path": "30"}, "1490": {"fn": "MockVault.callExitPoolGyro", "offset": [7573, 7602], "op": "SWAP1", "path": "30"}, "1491": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x4"}, "1493": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ADD", "path": "30"}, "1494": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH2", "path": "30", "value": "0x15F2"}, "1497": {"fn": "MockVault.callExitPoolGyro", "jump": "i", "offset": [7651, 7858], "op": "JUMP", "path": "30"}, "1498": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "JUMPDEST", "path": "30"}, "1499": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x0"}, "1501": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x40"}, "1503": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "MLOAD", "path": "30"}, "1504": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP1", "path": "30"}, "1505": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP4", "path": "30"}, "1506": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "SUB", "path": "30"}, "1507": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP2", "path": "30"}, "1508": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x0"}, "1510": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP8", "path": "30"}, "1511": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP1", "path": "30"}, "1512": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "EXTCODESIZE", "path": "30"}, "1513": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ISZERO", "path": "30"}, "1514": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP1", "path": "30"}, "1515": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ISZERO", "path": "30"}, "1516": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH2", "path": "30", "value": "0x5F4"}, "1519": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "JUMPI", "path": "30"}, "1520": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x0"}, "1522": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP1", "path": "30"}, "1523": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "REVERT", "path": "30"}, "1524": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "JUMPDEST", "path": "30"}, "1525": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "POP", "path": "30"}, "1526": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "GAS", "path": "30"}, "1527": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "CALL", "path": "30"}, "1528": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ISZERO", "path": "30"}, "1529": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP1", "path": "30"}, "1530": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ISZERO", "path": "30"}, "1531": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH2", "path": "30", "value": "0x608"}, "1534": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "JUMPI", "path": "30"}, "1535": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "RETURNDATASIZE", "path": "30"}, "1536": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x0"}, "1538": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP1", "path": "30"}, "1539": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "RETURNDATACOPY", "path": "30"}, "1540": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "RETURNDATASIZE", "path": "30"}, "1541": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x0"}, "1543": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "REVERT", "path": "30"}, "1544": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "JUMPDEST", "path": "30"}, "1545": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "POP", "path": "30"}, "1546": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "POP", "path": "30"}, "1547": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "POP", "path": "30"}, "1548": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "POP", "path": "30"}, "1549": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x40"}, "1551": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "MLOAD", "path": "30"}, "1552": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "RETURNDATASIZE", "path": "30"}, "1553": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x0"}, "1555": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP3", "path": "30"}, "1556": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "RETURNDATACOPY", "path": "30"}, "1557": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x1F"}, "1559": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "RETURNDATASIZE", "path": "30"}, "1560": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "SWAP1", "path": "30"}, "1561": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP2", "path": "30"}, "1562": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ADD", "path": "30"}, "1563": {"op": "PUSH1", "value": "0x1F"}, "1565": {"op": "NOT"}, "1566": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "AND", "path": "30"}, "1567": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP3", "path": "30"}, "1568": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ADD", "path": "30"}, "1569": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH1", "path": "30", "value": "0x40"}, "1571": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "MSTORE", "path": "30"}, "1572": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH2", "path": "30", "value": "0x630"}, "1575": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "SWAP2", "path": "30"}, "1576": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "SWAP1", "path": "30"}, "1577": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "DUP2", "path": "30"}, "1578": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "ADD", "path": "30"}, "1579": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "SWAP1", "path": "30"}, "1580": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "PUSH2", "path": "30", "value": "0x1065"}, "1583": {"fn": "MockVault.callExitPoolGyro", "jump": "i", "offset": [7651, 7858], "op": "JUMP", "path": "30"}, "1584": {"fn": "MockVault.callExitPoolGyro", "offset": [7651, 7858], "op": "JUMPDEST", "path": "30"}, "1585": {"fn": "MockVault.callExitPoolGyro", "offset": [7869, 7887], "op": "PUSH1", "path": "30", "value": "0x0"}, "1587": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "DUP14", "path": "30"}, "1588": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "DUP2", "path": "30"}, "1589": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "MSTORE", "path": "30"}, "1590": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7895], "op": "PUSH1", "path": "30", "value": "0x1"}, "1592": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "PUSH1", "path": "30", "value": "0x20"}, "1594": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "MSTORE", "path": "30"}, "1595": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "PUSH1", "path": "30", "value": "0x40"}, "1597": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "DUP2", "path": "30"}, "1598": {"fn": "MockVault.callExitPoolGyro", "offset": [7890, 7903], "op": "KECCAK256", "path": "30"}, "1599": {"fn": "MockVault.callExitPoolGyro", "offset": [7613, 7858], "op": "SWAP3", "path": "30"}, "1600": {"fn": "MockVault.callExitPoolGyro", "offset": [7613, 7858], "op": "SWAP7", "path": "30"}, "1601": {"op": "POP"}, "1602": {"fn": "MockVault.callExitPoolGyro", "offset": [7613, 7858], "op": "SWAP1", "path": "30"}, "1603": {"fn": "MockVault.callExitPoolGyro", "offset": [7613, 7858], "op": "SWAP5", "path": "30"}, "1604": {"op": "POP"}, "1605": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "JUMPDEST", "path": "30"}, "1606": {"fn": "MockVault.callExitPoolGyro", "offset": [7937, 7956], "op": "DUP2", "path": "30"}, "1607": {"fn": "MockVault.callExitPoolGyro", "offset": [7937, 7956], "op": "SLOAD", "path": "30"}, "1608": {"fn": "MockVault.callExitPoolGyro", "offset": [7933, 7956], "op": "DUP2", "path": "30"}, "1609": {"fn": "MockVault.callExitPoolGyro", "offset": [7933, 7956], "op": "LT", "path": "30"}, "1610": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "ISZERO", "path": "30"}, "1611": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "PUSH2", "path": "30", "value": "0x6AB"}, "1614": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "JUMPI", "path": "30"}, "1615": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8022], "op": "DUP6", "path": "30", "statement": 13}, "1616": {"fn": "MockVault.callExitPoolGyro", "offset": [8023, 8024], "op": "DUP2", "path": "30"}, "1617": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "DUP2", "path": "30"}, "1618": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "MLOAD", "path": "30"}, "1619": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "DUP2", "path": "30"}, "1620": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "LT", "path": "30"}, "1621": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "PUSH2", "path": "30", "value": "0x65A"}, "1624": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "JUMPI", "path": "30"}, "1625": {"dev": "Index out of range", "fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "INVALID", "path": "30"}, "1626": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "JUMPDEST", "path": "30"}, "1627": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "PUSH1", "path": "30", "value": "0x20"}, "1629": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "MUL", "path": "30"}, "1630": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "PUSH1", "path": "30", "value": "0x20"}, "1632": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "ADD", "path": "30"}, "1633": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "ADD", "path": "30"}, "1634": {"fn": "MockVault.callExitPoolGyro", "offset": [8012, 8025], "op": "MLOAD", "path": "30"}, "1635": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 7982], "op": "DUP3", "path": "30"}, "1636": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 7991], "op": "PUSH1", "path": "30", "value": "0x1"}, "1638": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 7991], "op": "ADD", "path": "30"}, "1639": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "PUSH1", "path": "30", "value": "0x0"}, "1641": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 7997], "op": "DUP5", "path": "30"}, "1642": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8004], "op": "PUSH1", "path": "30", "value": "0x0"}, "1644": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8004], "op": "ADD", "path": "30"}, "1645": {"fn": "MockVault.callExitPoolGyro", "offset": [8005, 8006], "op": "DUP5", "path": "30"}, "1646": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "DUP2", "path": "30"}, "1647": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "SLOAD", "path": "30"}, "1648": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "DUP2", "path": "30"}, "1649": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "LT", "path": "30"}, "1650": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "PUSH2", "path": "30", "value": "0x677"}, "1653": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "JUMPI", "path": "30"}, "1654": {"dev": "Index out of range", "fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "INVALID", "path": "30"}, "1655": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "JUMPDEST", "path": "30"}, "1656": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "PUSH1", "path": "30", "value": "0x0"}, "1658": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "SWAP2", "path": "30"}, "1659": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "DUP3", "path": "30"}, "1660": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "MSTORE", "path": "30"}, "1661": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "PUSH1", "path": "30", "value": "0x20"}, "1663": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "DUP1", "path": "30"}, "1664": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "DUP4", "path": "30"}, "1665": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "KECCAK256", "path": "30"}, "1666": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "SWAP1", "path": "30"}, "1667": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "SWAP2", "path": "30"}, "1668": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "ADD", "path": "30"}, "1669": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "SLOAD", "path": "30"}, "1670": {"op": "PUSH1", "value": "0x1"}, "1672": {"op": "PUSH1", "value": "0x1"}, "1674": {"op": "PUSH1", "value": "0xA0"}, "1676": {"op": "SHL"}, "1677": {"op": "SUB"}, "1678": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "AND", "path": "30"}, "1679": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "DUP4", "path": "30"}, "1680": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "MSTORE", "path": "30"}, "1681": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "DUP3", "path": "30"}, "1682": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "ADD", "path": "30"}, "1683": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "SWAP3", "path": "30"}, "1684": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "SWAP1", "path": "30"}, "1685": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "SWAP3", "path": "30"}, "1686": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "MSTORE", "path": "30"}, "1687": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "PUSH1", "path": "30", "value": "0x40"}, "1689": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "ADD", "path": "30"}, "1690": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "SWAP1", "path": "30"}, "1691": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8008], "op": "KECCAK256", "path": "30"}, "1692": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "DUP1", "path": "30"}, "1693": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "SLOAD", "path": "30"}, "1694": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "SWAP2", "path": "30"}, "1695": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "SWAP1", "path": "30"}, "1696": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "SWAP2", "path": "30"}, "1697": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "SUB", "path": "30"}, "1698": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "SWAP1", "path": "30"}, "1699": {"fn": "MockVault.callExitPoolGyro", "offset": [7977, 8025], "op": "SSTORE", "path": "30"}, "1700": {"fn": "MockVault.callExitPoolGyro", "offset": [7992, 8007], "op": "PUSH1", "path": "30", "value": "0x1"}, "1702": {"fn": "MockVault.callExitPoolGyro", "offset": [7958, 7961], "op": "ADD", "path": "30", "statement": 14}, "1703": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "PUSH2", "path": "30", "value": "0x645"}, "1706": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "JUMP", "path": "30"}, "1707": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "JUMPDEST", "path": "30"}, "1708": {"fn": "MockVault.callExitPoolGyro", "offset": [7913, 8036], "op": "POP", "path": "30"}, "1709": {"fn": "MockVault.callExitPoolGyro", "offset": [8046, 8068], "op": "PUSH1", "path": "30", "value": "0x0"}, "1711": {"fn": "MockVault.callExitPoolGyro", "offset": [8084, 8099], "op": "DUP10", "path": "30"}, "1712": {"fn": "MockVault.callExitPoolGyro", "offset": [8084, 8106], "op": "MLOAD", "path": "30"}, "1713": {"op": "PUSH1", "value": "0x1"}, "1715": {"op": "PUSH1", "value": "0x1"}, "1717": {"op": "PUSH1", "value": "0x40"}, "1719": {"op": "SHL"}, "1720": {"op": "SUB"}, "1721": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP2", "path": "30"}, "1722": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "GT", "path": "30"}, "1723": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP1", "path": "30"}, "1724": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "ISZERO", "path": "30"}, "1725": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH2", "path": "30", "value": "0x6C5"}, "1728": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "JUMPI", "path": "30"}, "1729": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH1", "path": "30", "value": "0x0"}, "1731": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP1", "path": "30"}, "1732": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "REVERT", "path": "30"}, "1733": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "JUMPDEST", "path": "30"}, "1734": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "POP", "path": "30"}, "1735": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH1", "path": "30", "value": "0x40"}, "1737": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "MLOAD", "path": "30"}, "1738": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "SWAP1", "path": "30"}, "1739": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP1", "path": "30"}, "1740": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP3", "path": "30"}, "1741": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "MSTORE", "path": "30"}, "1742": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP1", "path": "30"}, "1743": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH1", "path": "30", "value": "0x20"}, "1745": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "MUL", "path": "30"}, "1746": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH1", "path": "30", "value": "0x20"}, "1748": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "ADD", "path": "30"}, "1749": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP3", "path": "30"}, "1750": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "ADD", "path": "30"}, "1751": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH1", "path": "30", "value": "0x40"}, "1753": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "MSTORE", "path": "30"}, "1754": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP1", "path": "30"}, "1755": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "ISZERO", "path": "30"}, "1756": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH2", "path": "30", "value": "0x6EF"}, "1759": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "JUMPI", "path": "30"}, "1760": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP2", "path": "30"}, "1761": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH1", "path": "30", "value": "0x20"}, "1763": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "ADD", "path": "30"}, "1764": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "PUSH1", "path": "30", "value": "0x20"}, "1766": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP3", "path": "30"}, "1767": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "MUL", "path": "30"}, "1768": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP1", "path": "30"}, "1769": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "CALLDATASIZE", "path": "30"}, "1770": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "DUP4", "path": "30"}, "1771": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "CALLDATACOPY", "path": "30"}, "1772": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "ADD", "path": "30"}, "1773": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "SWAP1", "path": "30"}, "1774": {"op": "POP"}, "1775": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "JUMPDEST", "path": "30"}, "1776": {"fn": "MockVault.callExitPoolGyro", "offset": [8071, 8107], "op": "POP", "path": "30"}, "1777": {"fn": "MockVault.callExitPoolGyro", "offset": [8046, 8107], "op": "SWAP1", "path": "30"}, "1778": {"fn": "MockVault.callExitPoolGyro", "offset": [8046, 8107], "op": "POP", "path": "30"}, "1779": {"fn": "MockVault.callExitPoolGyro", "offset": [8117, 8139], "op": "PUSH1", "path": "30", "value": "0x0"}, "1781": {"fn": "MockVault.callExitPoolGyro", "offset": [8155, 8165], "op": "DUP7", "path": "30"}, "1782": {"fn": "MockVault.callExitPoolGyro", "offset": [8155, 8172], "op": "MLOAD", "path": "30"}, "1783": {"op": "PUSH1", "value": "0x1"}, "1785": {"op": "PUSH1", "value": "0x1"}, "1787": {"op": "PUSH1", "value": "0x40"}, "1789": {"op": "SHL"}, "1790": {"op": "SUB"}, "1791": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP2", "path": "30"}, "1792": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "GT", "path": "30"}, "1793": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP1", "path": "30"}, "1794": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "ISZERO", "path": "30"}, "1795": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH2", "path": "30", "value": "0x70B"}, "1798": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "JUMPI", "path": "30"}, "1799": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH1", "path": "30", "value": "0x0"}, "1801": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP1", "path": "30"}, "1802": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "REVERT", "path": "30"}, "1803": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "JUMPDEST", "path": "30"}, "1804": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "POP", "path": "30"}, "1805": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH1", "path": "30", "value": "0x40"}, "1807": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "MLOAD", "path": "30"}, "1808": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "SWAP1", "path": "30"}, "1809": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP1", "path": "30"}, "1810": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP3", "path": "30"}, "1811": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "MSTORE", "path": "30"}, "1812": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP1", "path": "30"}, "1813": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH1", "path": "30", "value": "0x20"}, "1815": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "MUL", "path": "30"}, "1816": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH1", "path": "30", "value": "0x20"}, "1818": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "ADD", "path": "30"}, "1819": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP3", "path": "30"}, "1820": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "ADD", "path": "30"}, "1821": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH1", "path": "30", "value": "0x40"}, "1823": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "MSTORE", "path": "30"}, "1824": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP1", "path": "30"}, "1825": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "ISZERO", "path": "30"}, "1826": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH2", "path": "30", "value": "0x735"}, "1829": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "JUMPI", "path": "30"}, "1830": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP2", "path": "30"}, "1831": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH1", "path": "30", "value": "0x20"}, "1833": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "ADD", "path": "30"}, "1834": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "PUSH1", "path": "30", "value": "0x20"}, "1836": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP3", "path": "30"}, "1837": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "MUL", "path": "30"}, "1838": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP1", "path": "30"}, "1839": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "CALLDATASIZE", "path": "30"}, "1840": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "DUP4", "path": "30"}, "1841": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "CALLDATACOPY", "path": "30"}, "1842": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "ADD", "path": "30"}, "1843": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "SWAP1", "path": "30"}, "1844": {"op": "POP"}, "1845": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "JUMPDEST", "path": "30"}, "1846": {"fn": "MockVault.callExitPoolGyro", "offset": [8142, 8173], "op": "POP", "path": "30"}, "1847": {"fn": "MockVault.callExitPoolGyro", "offset": [8117, 8173], "op": "SWAP1", "path": "30"}, "1848": {"fn": "MockVault.callExitPoolGyro", "offset": [8117, 8173], "op": "POP", "path": "30"}, "1849": {"fn": "MockVault.callExitPoolGyro", "offset": [8188, 8197], "op": "PUSH1", "path": "30", "value": "0x0"}, "1851": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "JUMPDEST", "path": "30"}, "1852": {"fn": "MockVault.callExitPoolGyro", "offset": [8207, 8217], "op": "DUP8", "path": "30"}, "1853": {"fn": "MockVault.callExitPoolGyro", "offset": [8207, 8224], "op": "MLOAD", "path": "30"}, "1854": {"fn": "MockVault.callExitPoolGyro", "offset": [8203, 8204], "op": "DUP2", "path": "30"}, "1855": {"fn": "MockVault.callExitPoolGyro", "offset": [8203, 8224], "op": "LT", "path": "30"}, "1856": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "ISZERO", "path": "30"}, "1857": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "PUSH2", "path": "30", "value": "0x777"}, "1860": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "JUMPI", "path": "30"}, "1861": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8274], "op": "DUP8", "path": "30", "statement": 15}, "1862": {"fn": "MockVault.callExitPoolGyro", "offset": [8275, 8276], "op": "DUP2", "path": "30"}, "1863": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "DUP2", "path": "30"}, "1864": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "MLOAD", "path": "30"}, "1865": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "DUP2", "path": "30"}, "1866": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "LT", "path": "30"}, "1867": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "PUSH2", "path": "30", "value": "0x750"}, "1870": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "JUMPI", "path": "30"}, "1871": {"dev": "Index out of range", "fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "INVALID", "path": "30"}, "1872": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "JUMPDEST", "path": "30"}, "1873": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "PUSH1", "path": "30", "value": "0x20"}, "1875": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "MUL", "path": "30"}, "1876": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "PUSH1", "path": "30", "value": "0x20"}, "1878": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "ADD", "path": "30"}, "1879": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "ADD", "path": "30"}, "1880": {"fn": "MockVault.callExitPoolGyro", "offset": [8264, 8277], "op": "MLOAD", "path": "30"}, "1881": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8251], "op": "DUP3", "path": "30"}, "1882": {"fn": "MockVault.callExitPoolGyro", "offset": [8252, 8253], "op": "DUP3", "path": "30"}, "1883": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "DUP2", "path": "30"}, "1884": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "MLOAD", "path": "30"}, "1885": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "DUP2", "path": "30"}, "1886": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "LT", "path": "30"}, "1887": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "PUSH2", "path": "30", "value": "0x764"}, "1890": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "JUMPI", "path": "30"}, "1891": {"dev": "Index out of range", "fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "INVALID", "path": "30"}, "1892": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "JUMPDEST", "path": "30"}, "1893": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "PUSH1", "path": "30", "value": "0x20"}, "1895": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "SWAP1", "path": "30"}, "1896": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "DUP2", "path": "30"}, "1897": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "MUL", "path": "30"}, "1898": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "SWAP2", "path": "30"}, "1899": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "SWAP1", "path": "30"}, "1900": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "SWAP2", "path": "30"}, "1901": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "ADD", "path": "30"}, "1902": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8254], "op": "ADD", "path": "30"}, "1903": {"fn": "MockVault.callExitPoolGyro", "offset": [8245, 8278], "op": "MSTORE", "path": "30"}, "1904": {"fn": "MockVault.callExitPoolGyro", "offset": [8226, 8229], "op": "PUSH1", "path": "30", "statement": 16, "value": "0x1"}, "1906": {"fn": "MockVault.callExitPoolGyro", "offset": [8226, 8229], "op": "ADD", "path": "30"}, "1907": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "PUSH2", "path": "30", "value": "0x73B"}, "1910": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "JUMP", "path": "30"}, "1911": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "JUMPDEST", "path": "30"}, "1912": {"fn": "MockVault.callExitPoolGyro", "offset": [8183, 8289], "op": "POP", "path": "30"}, "1913": {"fn": "MockVault.callExitPoolGyro", "offset": [8331, 8337], "op": "DUP13", "path": "30", "statement": 17}, "1914": {"op": "PUSH1", "value": "0x1"}, "1916": {"op": "PUSH1", "value": "0x1"}, "1918": {"op": "PUSH1", "value": "0xA0"}, "1920": {"op": "SHL"}, "1921": {"op": "SUB"}, "1922": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "AND", "path": "30"}, "1923": {"fn": "MockVault.callExitPoolGyro", "offset": [8323, 8329], "op": "DUP15", "path": "30"}, "1924": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "PUSH32", "path": "30", "value": "0xE5CE249087CE04F05A957192435400FD97868DBA0E6A4B4C049ABF8AF80DAE78"}, "1957": {"fn": "MockVault.callExitPoolGyro", "offset": [8339, 8345], "op": "DUP5", "path": "30"}, "1958": {"fn": "MockVault.callExitPoolGyro", "offset": [8347, 8353], "op": "DUP5", "path": "30"}, "1959": {"fn": "MockVault.callExitPoolGyro", "offset": [8355, 8376], "op": "DUP11", "path": "30"}, "1960": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "PUSH1", "path": "30", "value": "0x40"}, "1962": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "MLOAD", "path": "30"}, "1963": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "PUSH2", "path": "30", "value": "0x7B6"}, "1966": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "SWAP4", "path": "30"}, "1967": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "SWAP3", "path": "30"}, "1968": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "SWAP2", "path": "30"}, "1969": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "SWAP1", "path": "30"}, "1970": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "PUSH2", "path": "30", "value": "0x153F"}, "1973": {"fn": "MockVault.callExitPoolGyro", "jump": "i", "offset": [8304, 8377], "op": "JUMP", "path": "30"}, "1974": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "JUMPDEST", "path": "30"}, "1975": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "PUSH1", "path": "30", "value": "0x40"}, "1977": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "MLOAD", "path": "30"}, "1978": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "DUP1", "path": "30"}, "1979": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "SWAP2", "path": "30"}, "1980": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "SUB", "path": "30"}, "1981": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "SWAP1", "path": "30"}, "1982": {"fn": "MockVault.callExitPoolGyro", "offset": [8304, 8377], "op": "LOG3", "path": "30"}, "1983": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1984": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1985": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1986": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1987": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1988": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "SWAP9", "path": "30"}, "1989": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1990": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "SWAP9", "path": "30"}, "1991": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "SWAP7", "path": "30"}, "1992": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1993": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1994": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1995": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1996": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1997": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1998": {"fn": "MockVault.callExitPoolGyro", "offset": [6977, 8384], "op": "POP", "path": "30"}, "1999": {"fn": "MockVault.callExitPoolGyro", "jump": "o", "offset": [6977, 8384], "op": "JUMP", "path": "30"}, "2000": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "JUMPDEST", "path": "30"}, "2001": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x40"}, "2003": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "MLOAD", "path": "30"}, "2004": {"op": "PUSH4", "value": "0x274B0443"}, "2009": {"op": "PUSH1", "value": "0xE2"}, "2011": {"op": "SHL"}, "2012": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP2", "path": "30"}, "2013": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "MSTORE", "path": "30"}, "2014": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4113, 4127], "op": "PUSH1", "path": "30", "value": "0x0"}, "2016": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4113, 4127], "op": "SWAP1", "path": "30"}, "2017": {"op": "PUSH1", "value": "0x1"}, "2019": {"op": "PUSH1", "value": "0x1"}, "2021": {"op": "PUSH1", "value": "0xA0"}, "2023": {"op": "SHL"}, "2024": {"op": "SUB"}, "2025": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4163], "op": "DUP7", "path": "30"}, "2026": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4163], "op": "AND", "path": "30"}, "2027": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4163], "op": "SWAP1", "path": "30"}, "2028": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4163], "op": "PUSH4", "path": "30", "value": "0x9D2C110C"}, "2033": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4163], "op": "SWAP1", "path": "30"}, "2034": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH2", "path": "30", "value": "0x803"}, "2037": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "SWAP1", "path": "30"}, "2038": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4164, 4171], "op": "DUP8", "path": "30"}, "2039": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4164, 4171], "op": "SWAP1", "path": "30"}, "2040": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4173, 4187], "op": "DUP8", "path": "30"}, "2041": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4173, 4187], "op": "SWAP1", "path": "30"}, "2042": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4189, 4204], "op": "DUP8", "path": "30"}, "2043": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4189, 4204], "op": "SWAP1", "path": "30"}, "2044": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x4"}, "2046": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ADD", "path": "30"}, "2047": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH2", "path": "30", "value": "0x16EB"}, "2050": {"fn": "MockVault.callMinimalPoolSwap", "jump": "i", "offset": [4130, 4205], "op": "JUMP", "path": "30"}, "2051": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "JUMPDEST", "path": "30"}, "2052": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x20"}, "2054": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x40"}, "2056": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "MLOAD", "path": "30"}, "2057": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP1", "path": "30"}, "2058": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP4", "path": "30"}, "2059": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "SUB", "path": "30"}, "2060": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP2", "path": "30"}, "2061": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x0"}, "2063": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP8", "path": "30"}, "2064": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP1", "path": "30"}, "2065": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "EXTCODESIZE", "path": "30"}, "2066": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ISZERO", "path": "30"}, "2067": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP1", "path": "30"}, "2068": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ISZERO", "path": "30"}, "2069": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH2", "path": "30", "value": "0x81D"}, "2072": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "JUMPI", "path": "30"}, "2073": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x0"}, "2075": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP1", "path": "30"}, "2076": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "REVERT", "path": "30"}, "2077": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "JUMPDEST", "path": "30"}, "2078": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "POP", "path": "30"}, "2079": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "GAS", "path": "30"}, "2080": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "CALL", "path": "30"}, "2081": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ISZERO", "path": "30"}, "2082": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP1", "path": "30"}, "2083": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ISZERO", "path": "30"}, "2084": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH2", "path": "30", "value": "0x831"}, "2087": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "JUMPI", "path": "30"}, "2088": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "RETURNDATASIZE", "path": "30"}, "2089": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x0"}, "2091": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP1", "path": "30"}, "2092": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "RETURNDATACOPY", "path": "30"}, "2093": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "RETURNDATASIZE", "path": "30"}, "2094": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x0"}, "2096": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "REVERT", "path": "30"}, "2097": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "JUMPDEST", "path": "30"}, "2098": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "POP", "path": "30"}, "2099": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "POP", "path": "30"}, "2100": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "POP", "path": "30"}, "2101": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "POP", "path": "30"}, "2102": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x40"}, "2104": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "MLOAD", "path": "30"}, "2105": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "RETURNDATASIZE", "path": "30"}, "2106": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x1F"}, "2108": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "NOT", "path": "30"}, "2109": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x1F"}, "2111": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP3", "path": "30"}, "2112": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ADD", "path": "30"}, "2113": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "AND", "path": "30"}, "2114": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP3", "path": "30"}, "2115": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ADD", "path": "30"}, "2116": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP1", "path": "30"}, "2117": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH1", "path": "30", "value": "0x40"}, "2119": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "MSTORE", "path": "30"}, "2120": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "POP", "path": "30"}, "2121": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "DUP2", "path": "30"}, "2122": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "ADD", "path": "30"}, "2123": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "SWAP1", "path": "30"}, "2124": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH2", "path": "30", "value": "0x855"}, "2127": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "SWAP2", "path": "30"}, "2128": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "SWAP1", "path": "30"}, "2129": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "PUSH2", "path": "30", "value": "0x13BC"}, "2132": {"fn": "MockVault.callMinimalPoolSwap", "jump": "i", "offset": [4130, 4205], "op": "JUMP", "path": "30"}, "2133": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4130, 4205], "op": "JUMPDEST", "path": "30"}, "2134": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4113, 4205], "op": "SWAP1", "path": "30"}, "2135": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4113, 4205], "op": "POP", "path": "30"}, "2136": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4258, 4265], "op": "DUP4", "path": "30", "statement": 18}, "2137": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4258, 4274], "op": "PUSH1", "path": "30", "value": "0x40"}, "2139": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4258, 4274], "op": "ADD", "path": "30"}, "2140": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4258, 4274], "op": "MLOAD", "path": "30"}, "2141": {"op": "PUSH1", "value": "0x1"}, "2143": {"op": "PUSH1", "value": "0x1"}, "2145": {"op": "PUSH1", "value": "0xA0"}, "2147": {"op": "SHL"}, "2148": {"op": "SUB"}, "2149": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "AND", "path": "30"}, "2150": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4241, 4248], "op": "DUP5", "path": "30"}, "2151": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4241, 4256], "op": "PUSH1", "path": "30", "value": "0x20"}, "2153": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4241, 4256], "op": "ADD", "path": "30"}, "2154": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4241, 4256], "op": "MLOAD", "path": "30"}, "2155": {"op": "PUSH1", "value": "0x1"}, "2157": {"op": "PUSH1", "value": "0x1"}, "2159": {"op": "PUSH1", "value": "0xA0"}, "2161": {"op": "SHL"}, "2162": {"op": "SUB"}, "2163": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "AND", "path": "30"}, "2164": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4225, 4232], "op": "DUP6", "path": "30"}, "2165": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4225, 4239], "op": "PUSH1", "path": "30", "value": "0x80"}, "2167": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4225, 4239], "op": "ADD", "path": "30"}, "2168": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4225, 4239], "op": "MLOAD", "path": "30"}, "2169": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "PUSH32", "path": "30", "value": "0xAF6C437771B0B661385E6B30C82A76E9067D1C318485CF0F0C47AEB35A9A1DE3"}, "2202": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4276, 4282], "op": "DUP5", "path": "30"}, "2203": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "PUSH1", "path": "30", "value": "0x40"}, "2205": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "MLOAD", "path": "30"}, "2206": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "PUSH2", "path": "30", "value": "0x8A7"}, "2209": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "SWAP2", "path": "30"}, "2210": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "SWAP1", "path": "30"}, "2211": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "PUSH2", "path": "30", "value": "0x15E9"}, "2214": {"fn": "MockVault.callMinimalPoolSwap", "jump": "i", "offset": [4220, 4283], "op": "JUMP", "path": "30"}, "2215": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "JUMPDEST", "path": "30"}, "2216": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "PUSH1", "path": "30", "value": "0x40"}, "2218": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "MLOAD", "path": "30"}, "2219": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "DUP1", "path": "30"}, "2220": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "SWAP2", "path": "30"}, "2221": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "SUB", "path": "30"}, "2222": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "SWAP1", "path": "30"}, "2223": {"fn": "MockVault.callMinimalPoolSwap", "offset": [4220, 4283], "op": "LOG4", "path": "30"}, "2224": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "POP", "path": "30"}, "2225": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "POP", "path": "30"}, "2226": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "POP", "path": "30"}, "2227": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "POP", "path": "30"}, "2228": {"fn": "MockVault.callMinimalPoolSwap", "offset": [3936, 4290], "op": "POP", "path": "30"}, "2229": {"fn": "MockVault.callMinimalPoolSwap", "jump": "o", "offset": [3936, 4290], "op": "JUMP", "path": "30"}, "2230": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "JUMPDEST", "path": "30"}, "2231": {"fn": "MockVault.getPoolTokens", "offset": [2261, 2278], "op": "PUSH1", "path": "30", "value": "0x0"}, "2233": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "DUP2", "path": "30"}, "2234": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "DUP2", "path": "30"}, "2235": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "MSTORE", "path": "30"}, "2236": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2286], "op": "PUSH1", "path": "30", "value": "0x1"}, "2238": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "PUSH1", "path": "30", "value": "0x20"}, "2240": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "MSTORE", "path": "30"}, "2241": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "PUSH1", "path": "30", "value": "0x40"}, "2243": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "SWAP1", "path": "30"}, "2244": {"fn": "MockVault.getPoolTokens", "offset": [2281, 2294], "op": "KECCAK256", "path": "30"}, "2245": {"fn": "MockVault.getPoolTokens", "offset": [2326, 2344], "op": "DUP1", "path": "30", "statement": 19}, "2246": {"fn": "MockVault.getPoolTokens", "offset": [2326, 2344], "op": "SLOAD", "path": "30"}, "2247": {"fn": "MockVault.getPoolTokens", "offset": [2200, 2222], "op": "PUSH1", "path": "30", "value": "0x60"}, "2249": {"fn": "MockVault.getPoolTokens", "offset": [2200, 2222], "op": "SWAP2", "path": "30"}, "2250": {"fn": "MockVault.getPoolTokens", "offset": [2200, 2222], "op": "DUP3", "path": "30"}, "2251": {"fn": "MockVault.getPoolTokens", "offset": [2200, 2222], "op": "SWAP2", "path": "30"}, "2252": {"op": "PUSH1", "value": "0x1"}, "2254": {"op": "PUSH1", "value": "0x1"}, "2256": {"op": "PUSH1", "value": "0x40"}, "2258": {"op": "SHL"}, "2259": {"op": "SUB"}, "2260": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP2", "path": "30"}, "2261": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "GT", "path": "30"}, "2262": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP1", "path": "30"}, "2263": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "ISZERO", "path": "30"}, "2264": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH2", "path": "30", "value": "0x8E0"}, "2267": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "JUMPI", "path": "30"}, "2268": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH1", "path": "30", "value": "0x0"}, "2270": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP1", "path": "30"}, "2271": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "REVERT", "path": "30"}, "2272": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "JUMPDEST", "path": "30"}, "2273": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "POP", "path": "30"}, "2274": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH1", "path": "30", "value": "0x40"}, "2276": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "MLOAD", "path": "30"}, "2277": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "SWAP1", "path": "30"}, "2278": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP1", "path": "30"}, "2279": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP3", "path": "30"}, "2280": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "MSTORE", "path": "30"}, "2281": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP1", "path": "30"}, "2282": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH1", "path": "30", "value": "0x20"}, "2284": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "MUL", "path": "30"}, "2285": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH1", "path": "30", "value": "0x20"}, "2287": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "ADD", "path": "30"}, "2288": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP3", "path": "30"}, "2289": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "ADD", "path": "30"}, "2290": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH1", "path": "30", "value": "0x40"}, "2292": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "MSTORE", "path": "30"}, "2293": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP1", "path": "30"}, "2294": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "ISZERO", "path": "30"}, "2295": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH2", "path": "30", "value": "0x90A"}, "2298": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "JUMPI", "path": "30"}, "2299": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP2", "path": "30"}, "2300": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH1", "path": "30", "value": "0x20"}, "2302": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "ADD", "path": "30"}, "2303": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "PUSH1", "path": "30", "value": "0x20"}, "2305": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP3", "path": "30"}, "2306": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "MUL", "path": "30"}, "2307": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP1", "path": "30"}, "2308": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "CALLDATASIZE", "path": "30"}, "2309": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "DUP4", "path": "30"}, "2310": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "CALLDATACOPY", "path": "30"}, "2311": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "ADD", "path": "30"}, "2312": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "SWAP1", "path": "30"}, "2313": {"op": "POP"}, "2314": {"fn": "MockVault.getPoolTokens", "offset": [2313, 2345], "op": "JUMPDEST", "path": "30"}, "2315": {"op": "POP"}, "2316": {"fn": "MockVault.getPoolTokens", "offset": [2380, 2398], "op": "DUP2", "path": "30", "statement": 20}, "2317": {"fn": "MockVault.getPoolTokens", "offset": [2380, 2398], "op": "SLOAD", "path": "30"}, "2318": {"fn": "MockVault.getPoolTokens", "offset": [2304, 2345], "op": "SWAP1", "path": "30"}, "2319": {"fn": "MockVault.getPoolTokens", "offset": [2304, 2345], "op": "SWAP4", "path": "30"}, "2320": {"op": "POP"}, "2321": {"op": "PUSH1", "value": "0x1"}, "2323": {"op": "PUSH1", "value": "0x1"}, "2325": {"op": "PUSH1", "value": "0x40"}, "2327": {"op": "SHL"}, "2328": {"op": "SUB"}, "2329": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP2", "path": "30"}, "2330": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "GT", "path": "30"}, "2331": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP1", "path": "30"}, "2332": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "ISZERO", "path": "30"}, "2333": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH2", "path": "30", "value": "0x925"}, "2336": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "JUMPI", "path": "30"}, "2337": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH1", "path": "30", "value": "0x0"}, "2339": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP1", "path": "30"}, "2340": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "REVERT", "path": "30"}, "2341": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "JUMPDEST", "path": "30"}, "2342": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "POP", "path": "30"}, "2343": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH1", "path": "30", "value": "0x40"}, "2345": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "MLOAD", "path": "30"}, "2346": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "SWAP1", "path": "30"}, "2347": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP1", "path": "30"}, "2348": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP3", "path": "30"}, "2349": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "MSTORE", "path": "30"}, "2350": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP1", "path": "30"}, "2351": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH1", "path": "30", "value": "0x20"}, "2353": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "MUL", "path": "30"}, "2354": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH1", "path": "30", "value": "0x20"}, "2356": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "ADD", "path": "30"}, "2357": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP3", "path": "30"}, "2358": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "ADD", "path": "30"}, "2359": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH1", "path": "30", "value": "0x40"}, "2361": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "MSTORE", "path": "30"}, "2362": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP1", "path": "30"}, "2363": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "ISZERO", "path": "30"}, "2364": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH2", "path": "30", "value": "0x94F"}, "2367": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "JUMPI", "path": "30"}, "2368": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP2", "path": "30"}, "2369": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH1", "path": "30", "value": "0x20"}, "2371": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "ADD", "path": "30"}, "2372": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "PUSH1", "path": "30", "value": "0x20"}, "2374": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP3", "path": "30"}, "2375": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "MUL", "path": "30"}, "2376": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP1", "path": "30"}, "2377": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "CALLDATASIZE", "path": "30"}, "2378": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "DUP4", "path": "30"}, "2379": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "CALLDATACOPY", "path": "30"}, "2380": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "ADD", "path": "30"}, "2381": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "SWAP1", "path": "30"}, "2382": {"op": "POP"}, "2383": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "JUMPDEST", "path": "30"}, "2384": {"fn": "MockVault.getPoolTokens", "offset": [2366, 2399], "op": "POP", "path": "30"}, "2385": {"fn": "MockVault.getPoolTokens", "offset": [2355, 2399], "op": "SWAP2", "path": "30"}, "2386": {"fn": "MockVault.getPoolTokens", "offset": [2355, 2399], "op": "POP", "path": "30"}, "2387": {"fn": "MockVault.getPoolTokens", "offset": [2415, 2424], "op": "PUSH1", "path": "30", "value": "0x0"}, "2389": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "JUMPDEST", "path": "30"}, "2390": {"fn": "MockVault.getPoolTokens", "offset": [2434, 2452], "op": "DUP2", "path": "30"}, "2391": {"fn": "MockVault.getPoolTokens", "offset": [2434, 2452], "op": "SLOAD", "path": "30"}, "2392": {"fn": "MockVault.getPoolTokens", "offset": [2430, 2452], "op": "DUP2", "path": "30"}, "2393": {"fn": "MockVault.getPoolTokens", "offset": [2430, 2452], "op": "LT", "path": "30"}, "2394": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "ISZERO", "path": "30"}, "2395": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "PUSH2", "path": "30", "value": "0xA11"}, "2398": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "JUMPI", "path": "30"}, "2399": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2489], "op": "DUP2", "path": "30", "statement": 21}, "2400": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2496], "op": "PUSH1", "path": "30", "value": "0x0"}, "2402": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2496], "op": "ADD", "path": "30"}, "2403": {"fn": "MockVault.getPoolTokens", "offset": [2497, 2498], "op": "DUP2", "path": "30"}, "2404": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "DUP2", "path": "30"}, "2405": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "SLOAD", "path": "30"}, "2406": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "DUP2", "path": "30"}, "2407": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "LT", "path": "30"}, "2408": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "PUSH2", "path": "30", "value": "0x96D"}, "2411": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "JUMPI", "path": "30"}, "2412": {"dev": "Index out of range", "fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "INVALID", "path": "30"}, "2413": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "JUMPDEST", "path": "30"}, "2414": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "SWAP1", "path": "30"}, "2415": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "PUSH1", "path": "30", "value": "0x0"}, "2417": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "MSTORE", "path": "30"}, "2418": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "PUSH1", "path": "30", "value": "0x20"}, "2420": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "PUSH1", "path": "30", "value": "0x0"}, "2422": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "KECCAK256", "path": "30"}, "2423": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "ADD", "path": "30"}, "2424": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "PUSH1", "path": "30", "value": "0x0"}, "2426": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "SWAP1", "path": "30"}, "2427": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "SLOAD", "path": "30"}, "2428": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "SWAP1", "path": "30"}, "2429": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "PUSH2", "path": "30", "value": "0x100"}, "2432": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "EXP", "path": "30"}, "2433": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "SWAP1", "path": "30"}, "2434": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "DIV", "path": "30"}, "2435": {"op": "PUSH1", "value": "0x1"}, "2437": {"op": "PUSH1", "value": "0x1"}, "2439": {"op": "PUSH1", "value": "0xA0"}, "2441": {"op": "SHL"}, "2442": {"op": "SUB"}, "2443": {"fn": "MockVault.getPoolTokens", "offset": [2485, 2499], "op": "AND", "path": "30"}, "2444": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2479], "op": "DUP5", "path": "30"}, "2445": {"fn": "MockVault.getPoolTokens", "offset": [2480, 2481], "op": "DUP3", "path": "30"}, "2446": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "DUP2", "path": "30"}, "2447": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "MLOAD", "path": "30"}, "2448": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "DUP2", "path": "30"}, "2449": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "LT", "path": "30"}, "2450": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "PUSH2", "path": "30", "value": "0x997"}, "2453": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "JUMPI", "path": "30"}, "2454": {"dev": "Index out of range", "fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "INVALID", "path": "30"}, "2455": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "JUMPDEST", "path": "30"}, "2456": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "PUSH1", "path": "30", "value": "0x20"}, "2458": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "MUL", "path": "30"}, "2459": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "PUSH1", "path": "30", "value": "0x20"}, "2461": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "ADD", "path": "30"}, "2462": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2482], "op": "ADD", "path": "30"}, "2463": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "SWAP1", "path": "30"}, "2464": {"op": "PUSH1", "value": "0x1"}, "2466": {"op": "PUSH1", "value": "0x1"}, "2468": {"op": "PUSH1", "value": "0xA0"}, "2470": {"op": "SHL"}, "2471": {"op": "SUB"}, "2472": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "AND", "path": "30"}, "2473": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "SWAP1", "path": "30"}, "2474": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "DUP2", "path": "30"}, "2475": {"op": "PUSH1", "value": "0x1"}, "2477": {"op": "PUSH1", "value": "0x1"}, "2479": {"op": "PUSH1", "value": "0xA0"}, "2481": {"op": "SHL"}, "2482": {"op": "SUB"}, "2483": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "AND", "path": "30"}, "2484": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "DUP2", "path": "30"}, "2485": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "MSTORE", "path": "30"}, "2486": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "POP", "path": "30"}, "2487": {"fn": "MockVault.getPoolTokens", "offset": [2473, 2499], "op": "POP", "path": "30"}, "2488": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2531], "op": "DUP2", "path": "30", "statement": 22}, "2489": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2540], "op": "PUSH1", "path": "30", "value": "0x1"}, "2491": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2540], "op": "ADD", "path": "30"}, "2492": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "PUSH1", "path": "30", "value": "0x0"}, "2494": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2547], "op": "DUP6", "path": "30"}, "2495": {"fn": "MockVault.getPoolTokens", "offset": [2548, 2549], "op": "DUP4", "path": "30"}, "2496": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "DUP2", "path": "30"}, "2497": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "MLOAD", "path": "30"}, "2498": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "DUP2", "path": "30"}, "2499": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "LT", "path": "30"}, "2500": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "PUSH2", "path": "30", "value": "0x9C9"}, "2503": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "JUMPI", "path": "30"}, "2504": {"dev": "Index out of range", "fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "INVALID", "path": "30"}, "2505": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "JUMPDEST", "path": "30"}, "2506": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "PUSH1", "path": "30", "value": "0x20"}, "2508": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "MUL", "path": "30"}, "2509": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "PUSH1", "path": "30", "value": "0x20"}, "2511": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "ADD", "path": "30"}, "2512": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "ADD", "path": "30"}, "2513": {"fn": "MockVault.getPoolTokens", "offset": [2541, 2550], "op": "MLOAD", "path": "30"}, "2514": {"op": "PUSH1", "value": "0x1"}, "2516": {"op": "PUSH1", "value": "0x1"}, "2518": {"op": "PUSH1", "value": "0xA0"}, "2520": {"op": "SHL"}, "2521": {"op": "SUB"}, "2522": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "AND", "path": "30"}, "2523": {"op": "PUSH1", "value": "0x1"}, "2525": {"op": "PUSH1", "value": "0x1"}, "2527": {"op": "PUSH1", "value": "0xA0"}, "2529": {"op": "SHL"}, "2530": {"op": "SUB"}, "2531": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "AND", "path": "30"}, "2532": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "DUP2", "path": "30"}, "2533": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "MSTORE", "path": "30"}, "2534": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "PUSH1", "path": "30", "value": "0x20"}, "2536": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "ADD", "path": "30"}, "2537": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "SWAP1", "path": "30"}, "2538": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "DUP2", "path": "30"}, "2539": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "MSTORE", "path": "30"}, "2540": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "PUSH1", "path": "30", "value": "0x20"}, "2542": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "ADD", "path": "30"}, "2543": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "PUSH1", "path": "30", "value": "0x0"}, "2545": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "KECCAK256", "path": "30"}, "2546": {"fn": "MockVault.getPoolTokens", "offset": [2527, 2551], "op": "SLOAD", "path": "30"}, "2547": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2521], "op": "DUP4", "path": "30"}, "2548": {"fn": "MockVault.getPoolTokens", "offset": [2522, 2523], "op": "DUP3", "path": "30"}, "2549": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "DUP2", "path": "30"}, "2550": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "MLOAD", "path": "30"}, "2551": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "DUP2", "path": "30"}, "2552": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "LT", "path": "30"}, "2553": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "PUSH2", "path": "30", "value": "0x9FE"}, "2556": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "JUMPI", "path": "30"}, "2557": {"dev": "Index out of range", "fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "INVALID", "path": "30"}, "2558": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "JUMPDEST", "path": "30"}, "2559": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "PUSH1", "path": "30", "value": "0x20"}, "2561": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "SWAP1", "path": "30"}, "2562": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "DUP2", "path": "30"}, "2563": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "MUL", "path": "30"}, "2564": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "SWAP2", "path": "30"}, "2565": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "SWAP1", "path": "30"}, "2566": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "SWAP2", "path": "30"}, "2567": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "ADD", "path": "30"}, "2568": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2524], "op": "ADD", "path": "30"}, "2569": {"fn": "MockVault.getPoolTokens", "offset": [2513, 2551], "op": "MSTORE", "path": "30"}, "2570": {"fn": "MockVault.getPoolTokens", "offset": [2454, 2457], "op": "PUSH1", "path": "30", "statement": 23, "value": "0x1"}, "2572": {"fn": "MockVault.getPoolTokens", "offset": [2454, 2457], "op": "ADD", "path": "30"}, "2573": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "PUSH2", "path": "30", "value": "0x955"}, "2576": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "JUMP", "path": "30"}, "2577": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "JUMPDEST", "path": "30"}, "2578": {"fn": "MockVault.getPoolTokens", "offset": [2410, 2562], "op": "POP", "path": "30"}, "2579": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "POP", "path": "30"}, "2580": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "SWAP2", "path": "30"}, "2581": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "POP", "path": "30"}, "2582": {"fn": "MockVault.getPoolTokens", "offset": [2138, 2801], "op": "SWAP2", "path": "30"}, "2583": {"fn": "MockVault.getPoolTokens", "jump": "o", "offset": [2138, 2801], "op": "JUMP", "path": "30"}, "2584": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "JUMPDEST", "path": "30"}, "2585": {"fn": "MockVault.callJoinPoolGyro", "offset": [5327, 5353], "op": "PUSH1", "path": "30", "value": "0x60"}, "2587": {"fn": "MockVault.callJoinPoolGyro", "offset": [5327, 5353], "op": "DUP1", "path": "30"}, "2588": {"fn": "MockVault.callJoinPoolGyro", "offset": [5503, 5537], "op": "PUSH1", "path": "30", "value": "0x0"}, "2590": {"fn": "MockVault.callJoinPoolGyro", "offset": [5327, 5353], "op": "DUP2", "path": "30"}, "2591": {"fn": "MockVault.callJoinPoolGyro", "offset": [5612, 5616], "op": "PUSH1", "path": "30", "value": "0x1"}, "2593": {"fn": "MockVault.callJoinPoolGyro", "offset": [5503, 5537], "op": "DUP3", "path": "30"}, "2594": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "JUMPDEST", "path": "30"}, "2595": {"fn": "MockVault.callJoinPoolGyro", "offset": [5654, 5660], "op": "DUP7", "path": "30"}, "2596": {"fn": "MockVault.callJoinPoolGyro", "offset": [5654, 5676], "op": "PUSH1", "path": "30", "value": "0x80"}, "2598": {"fn": "MockVault.callJoinPoolGyro", "offset": [5654, 5676], "op": "ADD", "path": "30"}, "2599": {"fn": "MockVault.callJoinPoolGyro", "offset": [5654, 5676], "op": "MLOAD", "path": "30"}, "2600": {"fn": "MockVault.callJoinPoolGyro", "offset": [5654, 5683], "op": "MLOAD", "path": "30"}, "2601": {"fn": "MockVault.callJoinPoolGyro", "offset": [5650, 5651], "op": "DUP2", "path": "30"}, "2602": {"fn": "MockVault.callJoinPoolGyro", "offset": [5650, 5683], "op": "LT", "path": "30"}, "2603": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "ISZERO", "path": "30"}, "2604": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "PUSH2", "path": "30", "value": "0xA5D"}, "2607": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "JUMPI", "path": "30"}, "2608": {"fn": "MockVault.callJoinPoolGyro", "offset": [5704, 5715], "op": "DUP2", "path": "30", "statement": 24}, "2609": {"fn": "MockVault.callJoinPoolGyro", "offset": [5704, 5751], "op": "DUP1", "path": "30"}, "2610": {"fn": "MockVault.callJoinPoolGyro", "offset": [5704, 5751], "op": "ISZERO", "path": "30"}, "2611": {"fn": "MockVault.callJoinPoolGyro", "offset": [5704, 5751], "op": "PUSH2", "path": "30", "value": "0xA53"}, "2614": {"fn": "MockVault.callJoinPoolGyro", "offset": [5704, 5751], "op": "JUMPI", "path": "30"}, "2615": {"fn": "MockVault.callJoinPoolGyro", "offset": [5704, 5751], "op": "POP", "path": "30"}, "2616": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5726], "op": "DUP7", "path": "30"}, "2617": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5742], "op": "PUSH1", "path": "30", "value": "0x80"}, "2619": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5742], "op": "ADD", "path": "30"}, "2620": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5742], "op": "MLOAD", "path": "30"}, "2621": {"fn": "MockVault.callJoinPoolGyro", "offset": [5743, 5744], "op": "DUP2", "path": "30"}, "2622": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "DUP2", "path": "30"}, "2623": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "MLOAD", "path": "30"}, "2624": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "DUP2", "path": "30"}, "2625": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "LT", "path": "30"}, "2626": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "PUSH2", "path": "30", "value": "0xA47"}, "2629": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "JUMPI", "path": "30"}, "2630": {"dev": "Index out of range", "fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "INVALID", "path": "30"}, "2631": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "JUMPDEST", "path": "30"}, "2632": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "PUSH1", "path": "30", "value": "0x20"}, "2634": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "MUL", "path": "30"}, "2635": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "PUSH1", "path": "30", "value": "0x20"}, "2637": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "ADD", "path": "30"}, "2638": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "ADD", "path": "30"}, "2639": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5745], "op": "MLOAD", "path": "30"}, "2640": {"fn": "MockVault.callJoinPoolGyro", "offset": [5749, 5750], "op": "PUSH1", "path": "30", "value": "0x0"}, "2642": {"fn": "MockVault.callJoinPoolGyro", "offset": [5720, 5750], "op": "EQ", "path": "30"}, "2643": {"fn": "MockVault.callJoinPoolGyro", "offset": [5704, 5751], "op": "JUMPDEST", "path": "30"}, "2644": {"fn": "MockVault.callJoinPoolGyro", "offset": [5690, 5751], "op": "SWAP2", "path": "30"}, "2645": {"op": "POP"}, "2646": {"fn": "MockVault.callJoinPoolGyro", "offset": [5685, 5688], "op": "PUSH1", "path": "30", "statement": 25, "value": "0x1"}, "2648": {"fn": "MockVault.callJoinPoolGyro", "offset": [5685, 5688], "op": "ADD", "path": "30"}, "2649": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "PUSH2", "path": "30", "value": "0xA22"}, "2652": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "JUMP", "path": "30"}, "2653": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "JUMPDEST", "path": "30"}, "2654": {"fn": "MockVault.callJoinPoolGyro", "offset": [5630, 5751], "op": "POP", "path": "30"}, "2655": {"branch": 37, "fn": "MockVault.callJoinPoolGyro", "offset": [5769, 5780], "op": "DUP1", "path": "30"}, "2656": {"fn": "MockVault.callJoinPoolGyro", "offset": [5765, 6111], "op": "ISZERO", "path": "30"}, "2657": {"fn": "MockVault.callJoinPoolGyro", "offset": [5765, 6111], "op": "PUSH2", "path": "30", "value": "0xA99"}, "2660": {"branch": 37, "fn": "MockVault.callJoinPoolGyro", "offset": [5765, 6111], "op": "JUMPI", "path": "30"}, "2661": {"fn": "MockVault.callJoinPoolGyro", "offset": [5887, 5903], "op": "PUSH1", "path": "30", "statement": 26, "value": "0xE0"}, "2663": {"fn": "MockVault.callJoinPoolGyro", "offset": [5887, 5903], "op": "DUP7", "path": "30"}, "2664": {"fn": "MockVault.callJoinPoolGyro", "offset": [5887, 5903], "op": "ADD", "path": "30"}, "2665": {"fn": "MockVault.callJoinPoolGyro", "offset": [5887, 5903], "op": "MLOAD", "path": "30"}, "2666": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "PUSH1", "path": "30", "value": "0x40"}, "2668": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "MLOAD", "path": "30"}, "2669": {"fn": "MockVault.callJoinPoolGyro", "offset": [5807, 5841], "op": "PUSH1", "path": "30", "statement": 27, "value": "0x0"}, "2671": {"fn": "MockVault.callJoinPoolGyro", "offset": [5807, 5841], "op": "SWAP5", "path": "30"}, "2672": {"op": "POP"}, "2673": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "PUSH2", "path": "30", "value": "0xA83"}, "2676": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "SWAP2", "path": "30"}, "2677": {"fn": "MockVault.callJoinPoolGyro", "offset": [5807, 5841], "op": "DUP6", "path": "30"}, "2678": {"fn": "MockVault.callJoinPoolGyro", "offset": [5807, 5841], "op": "SWAP2", "path": "30"}, "2679": {"fn": "MockVault.callJoinPoolGyro", "offset": [5905, 5908], "op": "PUSH3", "path": "30", "value": "0x989680"}, "2683": {"fn": "MockVault.callJoinPoolGyro", "offset": [5905, 5908], "op": "SWAP1", "path": "30"}, "2684": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "PUSH1", "path": "30", "value": "0x20"}, "2686": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "ADD", "path": "30"}, "2687": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "PUSH2", "path": "30", "value": "0x167B"}, "2690": {"fn": "MockVault.callJoinPoolGyro", "jump": "i", "offset": [5870, 5909], "op": "JUMP", "path": "30"}, "2691": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "JUMPDEST", "path": "30"}, "2692": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "PUSH1", "path": "30", "value": "0x40"}, "2694": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "MLOAD", "path": "30"}, "2695": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "PUSH1", "path": "30", "value": "0x20"}, "2697": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "DUP2", "path": "30"}, "2698": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "DUP4", "path": "30"}, "2699": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "SUB", "path": "30"}, "2700": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "SUB", "path": "30"}, "2701": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "DUP2", "path": "30"}, "2702": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "MSTORE", "path": "30"}, "2703": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "SWAP1", "path": "30"}, "2704": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "PUSH1", "path": "30", "value": "0x40"}, "2706": {"fn": "MockVault.callJoinPoolGyro", "offset": [5870, 5909], "op": "MSTORE", "path": "30"}, "2707": {"fn": "MockVault.callJoinPoolGyro", "offset": [5859, 5909], "op": "SWAP2", "path": "30"}, "2708": {"fn": "MockVault.callJoinPoolGyro", "offset": [5859, 5909], "op": "POP", "path": "30"}, "2709": {"fn": "MockVault.callJoinPoolGyro", "offset": [5765, 6111], "op": "PUSH2", "path": "30", "value": "0xAC6"}, "2712": {"fn": "MockVault.callJoinPoolGyro", "offset": [5765, 6111], "op": "JUMP", "path": "30"}, "2713": {"fn": "MockVault.callJoinPoolGyro", "offset": [5765, 6111], "op": "JUMPDEST", "path": "30"}, "2714": {"fn": "MockVault.callJoinPoolGyro", "offset": [6072, 6085], "op": "PUSH2", "path": "30", "statement": 28, "value": "0x100"}, "2717": {"fn": "MockVault.callJoinPoolGyro", "offset": [6072, 6085], "op": "DUP7", "path": "30"}, "2718": {"fn": "MockVault.callJoinPoolGyro", "offset": [6072, 6085], "op": "ADD", "path": "30"}, "2719": {"fn": "MockVault.callJoinPoolGyro", "offset": [6072, 6085], "op": "MLOAD", "path": "30"}, "2720": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "PUSH1", "path": "30", "value": "0x40"}, "2722": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "MLOAD", "path": "30"}, "2723": {"fn": "MockVault.callJoinPoolGyro", "offset": [5965, 6026], "op": "PUSH1", "path": "30", "statement": 29, "value": "0x3"}, "2725": {"fn": "MockVault.callJoinPoolGyro", "offset": [5965, 6026], "op": "SWAP5", "path": "30"}, "2726": {"op": "POP"}, "2727": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "PUSH2", "path": "30", "value": "0xAB4"}, "2730": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "SWAP2", "path": "30"}, "2731": {"fn": "MockVault.callJoinPoolGyro", "offset": [5965, 6026], "op": "DUP6", "path": "30"}, "2732": {"fn": "MockVault.callJoinPoolGyro", "offset": [5965, 6026], "op": "SWAP2", "path": "30"}, "2733": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "PUSH1", "path": "30", "value": "0x20"}, "2735": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "ADD", "path": "30"}, "2736": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "PUSH2", "path": "30", "value": "0x1664"}, "2739": {"fn": "MockVault.callJoinPoolGyro", "jump": "i", "offset": [6055, 6086], "op": "JUMP", "path": "30"}, "2740": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "JUMPDEST", "path": "30"}, "2741": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "PUSH1", "path": "30", "value": "0x40"}, "2743": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "MLOAD", "path": "30"}, "2744": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "PUSH1", "path": "30", "value": "0x20"}, "2746": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "DUP2", "path": "30"}, "2747": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "DUP4", "path": "30"}, "2748": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "SUB", "path": "30"}, "2749": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "SUB", "path": "30"}, "2750": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "DUP2", "path": "30"}, "2751": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "MSTORE", "path": "30"}, "2752": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "SWAP1", "path": "30"}, "2753": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "PUSH1", "path": "30", "value": "0x40"}, "2755": {"fn": "MockVault.callJoinPoolGyro", "offset": [6055, 6086], "op": "MSTORE", "path": "30"}, "2756": {"fn": "MockVault.callJoinPoolGyro", "offset": [6044, 6086], "op": "SWAP2", "path": "30"}, "2757": {"fn": "MockVault.callJoinPoolGyro", "offset": [6044, 6086], "op": "POP", "path": "30"}, "2758": {"fn": "MockVault.callJoinPoolGyro", "offset": [5765, 6111], "op": "JUMPDEST", "path": "30"}, "2759": {"op": "POP"}, "2760": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6179], "op": "DUP5", "path": "30", "statement": 30}, "2761": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6179], "op": "MLOAD", "path": "30"}, "2762": {"fn": "MockVault.callJoinPoolGyro", "offset": [6204, 6217], "op": "PUSH1", "path": "30", "value": "0x20"}, "2764": {"fn": "MockVault.callJoinPoolGyro", "offset": [6204, 6217], "op": "DUP7", "path": "30"}, "2765": {"fn": "MockVault.callJoinPoolGyro", "offset": [6204, 6217], "op": "ADD", "path": "30"}, "2766": {"fn": "MockVault.callJoinPoolGyro", "offset": [6204, 6217], "op": "MLOAD", "path": "30"}, "2767": {"fn": "MockVault.callJoinPoolGyro", "offset": [6231, 6244], "op": "PUSH1", "path": "30", "value": "0x40"}, "2769": {"fn": "MockVault.callJoinPoolGyro", "offset": [6231, 6244], "op": "DUP1", "path": "30"}, "2770": {"fn": "MockVault.callJoinPoolGyro", "offset": [6231, 6244], "op": "DUP9", "path": "30"}, "2771": {"fn": "MockVault.callJoinPoolGyro", "offset": [6231, 6244], "op": "ADD", "path": "30"}, "2772": {"fn": "MockVault.callJoinPoolGyro", "offset": [6231, 6244], "op": "MLOAD", "path": "30"}, "2773": {"fn": "MockVault.callJoinPoolGyro", "offset": [6258, 6274], "op": "PUSH1", "path": "30", "value": "0x60"}, "2775": {"fn": "MockVault.callJoinPoolGyro", "offset": [6258, 6274], "op": "DUP10", "path": "30"}, "2776": {"fn": "MockVault.callJoinPoolGyro", "offset": [6258, 6274], "op": "ADD", "path": "30"}, "2777": {"fn": "MockVault.callJoinPoolGyro", "offset": [6258, 6274], "op": "MLOAD", "path": "30"}, "2778": {"fn": "MockVault.callJoinPoolGyro", "offset": [6288, 6310], "op": "PUSH1", "path": "30", "value": "0x80"}, "2780": {"fn": "MockVault.callJoinPoolGyro", "offset": [6288, 6310], "op": "DUP11", "path": "30"}, "2781": {"fn": "MockVault.callJoinPoolGyro", "offset": [6288, 6310], "op": "ADD", "path": "30"}, "2782": {"fn": "MockVault.callJoinPoolGyro", "offset": [6288, 6310], "op": "MLOAD", "path": "30"}, "2783": {"fn": "MockVault.callJoinPoolGyro", "offset": [6324, 6346], "op": "PUSH1", "path": "30", "value": "0xA0"}, "2785": {"fn": "MockVault.callJoinPoolGyro", "offset": [6324, 6346], "op": "DUP12", "path": "30"}, "2786": {"fn": "MockVault.callJoinPoolGyro", "offset": [6324, 6346], "op": "ADD", "path": "30"}, "2787": {"fn": "MockVault.callJoinPoolGyro", "offset": [6324, 6346], "op": "MLOAD", "path": "30"}, "2788": {"fn": "MockVault.callJoinPoolGyro", "offset": [6360, 6392], "op": "PUSH1", "path": "30", "value": "0xC0"}, "2790": {"fn": "MockVault.callJoinPoolGyro", "offset": [6360, 6392], "op": "DUP13", "path": "30"}, "2791": {"fn": "MockVault.callJoinPoolGyro", "offset": [6360, 6392], "op": "ADD", "path": "30"}, "2792": {"fn": "MockVault.callJoinPoolGyro", "offset": [6360, 6392], "op": "MLOAD", "path": "30"}, "2793": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "SWAP5", "path": "30"}, "2794": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "MLOAD", "path": "30"}, "2795": {"op": "PUSH4", "value": "0x357025B1"}, "2800": {"op": "PUSH1", "value": "0xE2"}, "2802": {"op": "SHL"}, "2803": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP2", "path": "30"}, "2804": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "MSTORE", "path": "30"}, "2805": {"op": "PUSH1", "value": "0x1"}, "2807": {"op": "PUSH1", "value": "0x1"}, "2809": {"op": "PUSH1", "value": "0xA0"}, "2811": {"op": "SHL"}, "2812": {"op": "SUB"}, "2813": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6190], "op": "SWAP1", "path": "30"}, "2814": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6190], "op": "SWAP8", "path": "30"}, "2815": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6190], "op": "AND", "path": "30"}, "2816": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6190], "op": "SWAP7", "path": "30"}, "2817": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6190], "op": "PUSH4", "path": "30", "value": "0xD5C096C4"}, "2822": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6190], "op": "SWAP7", "path": "30"}, "2823": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH2", "path": "30", "value": "0xB1A"}, "2826": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "SWAP7", "path": "30"}, "2827": {"fn": "MockVault.callJoinPoolGyro", "offset": [6204, 6217], "op": "SWAP1", "path": "30"}, "2828": {"fn": "MockVault.callJoinPoolGyro", "offset": [6204, 6217], "op": "SWAP6", "path": "30"}, "2829": {"fn": "MockVault.callJoinPoolGyro", "offset": [6231, 6244], "op": "SWAP5", "path": "30"}, "2830": {"fn": "MockVault.callJoinPoolGyro", "offset": [6258, 6274], "op": "SWAP4", "path": "30"}, "2831": {"fn": "MockVault.callJoinPoolGyro", "offset": [6288, 6310], "op": "SWAP3", "path": "30"}, "2832": {"fn": "MockVault.callJoinPoolGyro", "offset": [6324, 6346], "op": "SWAP2", "path": "30"}, "2833": {"fn": "MockVault.callJoinPoolGyro", "offset": [6406, 6414], "op": "DUP11", "path": "30"}, "2834": {"fn": "MockVault.callJoinPoolGyro", "offset": [6406, 6414], "op": "SWAP1", "path": "30"}, "2835": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x4"}, "2837": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ADD", "path": "30"}, "2838": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH2", "path": "30", "value": "0x15F2"}, "2841": {"fn": "MockVault.callJoinPoolGyro", "jump": "i", "offset": [6168, 6424], "op": "JUMP", "path": "30"}, "2842": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "JUMPDEST", "path": "30"}, "2843": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x0"}, "2845": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x40"}, "2847": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "MLOAD", "path": "30"}, "2848": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP1", "path": "30"}, "2849": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP4", "path": "30"}, "2850": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "SUB", "path": "30"}, "2851": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP2", "path": "30"}, "2852": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x0"}, "2854": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP8", "path": "30"}, "2855": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP1", "path": "30"}, "2856": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "EXTCODESIZE", "path": "30"}, "2857": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ISZERO", "path": "30"}, "2858": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP1", "path": "30"}, "2859": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ISZERO", "path": "30"}, "2860": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH2", "path": "30", "value": "0xB34"}, "2863": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "JUMPI", "path": "30"}, "2864": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x0"}, "2866": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP1", "path": "30"}, "2867": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "REVERT", "path": "30"}, "2868": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "JUMPDEST", "path": "30"}, "2869": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "POP", "path": "30"}, "2870": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "GAS", "path": "30"}, "2871": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "CALL", "path": "30"}, "2872": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ISZERO", "path": "30"}, "2873": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP1", "path": "30"}, "2874": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ISZERO", "path": "30"}, "2875": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH2", "path": "30", "value": "0xB48"}, "2878": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "JUMPI", "path": "30"}, "2879": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "RETURNDATASIZE", "path": "30"}, "2880": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x0"}, "2882": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP1", "path": "30"}, "2883": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "RETURNDATACOPY", "path": "30"}, "2884": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "RETURNDATASIZE", "path": "30"}, "2885": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x0"}, "2887": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "REVERT", "path": "30"}, "2888": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "JUMPDEST", "path": "30"}, "2889": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "POP", "path": "30"}, "2890": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "POP", "path": "30"}, "2891": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "POP", "path": "30"}, "2892": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "POP", "path": "30"}, "2893": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x40"}, "2895": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "MLOAD", "path": "30"}, "2896": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "RETURNDATASIZE", "path": "30"}, "2897": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x0"}, "2899": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP3", "path": "30"}, "2900": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "RETURNDATACOPY", "path": "30"}, "2901": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x1F"}, "2903": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "RETURNDATASIZE", "path": "30"}, "2904": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "SWAP1", "path": "30"}, "2905": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP2", "path": "30"}, "2906": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ADD", "path": "30"}, "2907": {"op": "PUSH1", "value": "0x1F"}, "2909": {"op": "NOT"}, "2910": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "AND", "path": "30"}, "2911": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP3", "path": "30"}, "2912": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ADD", "path": "30"}, "2913": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH1", "path": "30", "value": "0x40"}, "2915": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "MSTORE", "path": "30"}, "2916": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH2", "path": "30", "value": "0xB70"}, "2919": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "SWAP2", "path": "30"}, "2920": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "SWAP1", "path": "30"}, "2921": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "DUP2", "path": "30"}, "2922": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "ADD", "path": "30"}, "2923": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "SWAP1", "path": "30"}, "2924": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "PUSH2", "path": "30", "value": "0x1065"}, "2927": {"fn": "MockVault.callJoinPoolGyro", "jump": "i", "offset": [6168, 6424], "op": "JUMP", "path": "30"}, "2928": {"fn": "MockVault.callJoinPoolGyro", "offset": [6168, 6424], "op": "JUMPDEST", "path": "30"}, "2929": {"fn": "MockVault.callJoinPoolGyro", "offset": [6461, 6474], "op": "PUSH1", "path": "30", "value": "0x20"}, "2931": {"fn": "MockVault.callJoinPoolGyro", "offset": [6461, 6474], "op": "DUP1", "path": "30"}, "2932": {"fn": "MockVault.callJoinPoolGyro", "offset": [6461, 6474], "op": "DUP9", "path": "30"}, "2933": {"fn": "MockVault.callJoinPoolGyro", "offset": [6461, 6474], "op": "ADD", "path": "30"}, "2934": {"fn": "MockVault.callJoinPoolGyro", "offset": [6461, 6474], "op": "MLOAD", "path": "30"}, "2935": {"fn": "MockVault.callJoinPoolGyro", "offset": [6435, 6452], "op": "PUSH1", "path": "30", "value": "0x0"}, "2937": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "SWAP1", "path": "30"}, "2938": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "DUP2", "path": "30"}, "2939": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "MSTORE", "path": "30"}, "2940": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6460], "op": "PUSH1", "path": "30", "value": "0x1"}, "2942": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "SWAP1", "path": "30"}, "2943": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "SWAP2", "path": "30"}, "2944": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "MSTORE", "path": "30"}, "2945": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "PUSH1", "path": "30", "value": "0x40"}, "2947": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "DUP2", "path": "30"}, "2948": {"fn": "MockVault.callJoinPoolGyro", "offset": [6455, 6475], "op": "KECCAK256", "path": "30"}, "2949": {"fn": "MockVault.callJoinPoolGyro", "offset": [6131, 6424], "op": "SWAP3", "path": "30"}, "2950": {"fn": "MockVault.callJoinPoolGyro", "offset": [6131, 6424], "op": "SWAP7", "path": "30"}, "2951": {"op": "POP"}, "2952": {"fn": "MockVault.callJoinPoolGyro", "offset": [6131, 6424], "op": "SWAP1", "path": "30"}, "2953": {"fn": "MockVault.callJoinPoolGyro", "offset": [6131, 6424], "op": "SWAP5", "path": "30"}, "2954": {"op": "POP"}, "2955": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "JUMPDEST", "path": "30"}, "2956": {"fn": "MockVault.callJoinPoolGyro", "offset": [6510, 6528], "op": "DUP2", "path": "30"}, "2957": {"fn": "MockVault.callJoinPoolGyro", "offset": [6510, 6528], "op": "SLOAD", "path": "30"}, "2958": {"fn": "MockVault.callJoinPoolGyro", "offset": [6506, 6528], "op": "DUP2", "path": "30"}, "2959": {"fn": "MockVault.callJoinPoolGyro", "offset": [6506, 6528], "op": "LT", "path": "30"}, "2960": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "ISZERO", "path": "30"}, "2961": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "PUSH2", "path": "30", "value": "0xBF0"}, "2964": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "JUMPI", "path": "30"}, "2965": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6591], "op": "DUP6", "path": "30", "statement": 31}, "2966": {"fn": "MockVault.callJoinPoolGyro", "offset": [6592, 6593], "op": "DUP2", "path": "30"}, "2967": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "DUP2", "path": "30"}, "2968": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "MLOAD", "path": "30"}, "2969": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "DUP2", "path": "30"}, "2970": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "LT", "path": "30"}, "2971": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "PUSH2", "path": "30", "value": "0xBA0"}, "2974": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "JUMPI", "path": "30"}, "2975": {"dev": "Index out of range", "fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "INVALID", "path": "30"}, "2976": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "JUMPDEST", "path": "30"}, "2977": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "PUSH1", "path": "30", "value": "0x20"}, "2979": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "MUL", "path": "30"}, "2980": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "PUSH1", "path": "30", "value": "0x20"}, "2982": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "ADD", "path": "30"}, "2983": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "ADD", "path": "30"}, "2984": {"fn": "MockVault.callJoinPoolGyro", "offset": [6582, 6594], "op": "MLOAD", "path": "30"}, "2985": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6553], "op": "DUP3", "path": "30"}, "2986": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6562], "op": "PUSH1", "path": "30", "value": "0x1"}, "2988": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6562], "op": "ADD", "path": "30"}, "2989": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "PUSH1", "path": "30", "value": "0x0"}, "2991": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6567], "op": "DUP5", "path": "30"}, "2992": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6574], "op": "PUSH1", "path": "30", "value": "0x0"}, "2994": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6574], "op": "ADD", "path": "30"}, "2995": {"fn": "MockVault.callJoinPoolGyro", "offset": [6575, 6576], "op": "DUP5", "path": "30"}, "2996": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "DUP2", "path": "30"}, "2997": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "SLOAD", "path": "30"}, "2998": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "DUP2", "path": "30"}, "2999": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "LT", "path": "30"}, "3000": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "PUSH2", "path": "30", "value": "0xBBD"}, "3003": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "JUMPI", "path": "30"}, "3004": {"dev": "Index out of range", "fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "INVALID", "path": "30"}, "3005": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "JUMPDEST", "path": "30"}, "3006": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "PUSH1", "path": "30", "value": "0x0"}, "3008": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "SWAP2", "path": "30"}, "3009": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "DUP3", "path": "30"}, "3010": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "MSTORE", "path": "30"}, "3011": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "PUSH1", "path": "30", "value": "0x20"}, "3013": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "DUP1", "path": "30"}, "3014": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "DUP4", "path": "30"}, "3015": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "KECCAK256", "path": "30"}, "3016": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "SWAP1", "path": "30"}, "3017": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "SWAP2", "path": "30"}, "3018": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "ADD", "path": "30"}, "3019": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "SLOAD", "path": "30"}, "3020": {"op": "PUSH1", "value": "0x1"}, "3022": {"op": "PUSH1", "value": "0x1"}, "3024": {"op": "PUSH1", "value": "0xA0"}, "3026": {"op": "SHL"}, "3027": {"op": "SUB"}, "3028": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "AND", "path": "30"}, "3029": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "DUP4", "path": "30"}, "3030": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "MSTORE", "path": "30"}, "3031": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "DUP3", "path": "30"}, "3032": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "ADD", "path": "30"}, "3033": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "SWAP3", "path": "30"}, "3034": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "SWAP1", "path": "30"}, "3035": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "SWAP3", "path": "30"}, "3036": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "MSTORE", "path": "30"}, "3037": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "PUSH1", "path": "30", "value": "0x40"}, "3039": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "ADD", "path": "30"}, "3040": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "SWAP1", "path": "30"}, "3041": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6578], "op": "KECCAK256", "path": "30"}, "3042": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6594], "op": "DUP1", "path": "30"}, "3043": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6594], "op": "SLOAD", "path": "30"}, "3044": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6594], "op": "SWAP1", "path": "30"}, "3045": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6594], "op": "SWAP2", "path": "30"}, "3046": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6594], "op": "ADD", "path": "30"}, "3047": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6594], "op": "SWAP1", "path": "30"}, "3048": {"fn": "MockVault.callJoinPoolGyro", "offset": [6549, 6594], "op": "SSTORE", "path": "30"}, "3049": {"fn": "MockVault.callJoinPoolGyro", "offset": [6563, 6577], "op": "PUSH1", "path": "30", "value": "0x1"}, "3051": {"fn": "MockVault.callJoinPoolGyro", "offset": [6530, 6533], "op": "ADD", "path": "30", "statement": 32}, "3052": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "PUSH2", "path": "30", "value": "0xB8B"}, "3055": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "JUMP", "path": "30"}, "3056": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "JUMPDEST", "path": "30"}, "3057": {"fn": "MockVault.callJoinPoolGyro", "offset": [6486, 6605], "op": "POP", "path": "30"}, "3058": {"fn": "MockVault.callJoinPoolGyro", "offset": [6615, 6637], "op": "PUSH1", "path": "30", "value": "0x0"}, "3060": {"fn": "MockVault.callJoinPoolGyro", "offset": [6653, 6659], "op": "DUP7", "path": "30"}, "3061": {"fn": "MockVault.callJoinPoolGyro", "offset": [6653, 6675], "op": "PUSH1", "path": "30", "value": "0x80"}, "3063": {"fn": "MockVault.callJoinPoolGyro", "offset": [6653, 6675], "op": "ADD", "path": "30"}, "3064": {"fn": "MockVault.callJoinPoolGyro", "offset": [6653, 6675], "op": "MLOAD", "path": "30"}, "3065": {"fn": "MockVault.callJoinPoolGyro", "offset": [6653, 6682], "op": "MLOAD", "path": "30"}, "3066": {"op": "PUSH1", "value": "0x1"}, "3068": {"op": "PUSH1", "value": "0x1"}, "3070": {"op": "PUSH1", "value": "0x40"}, "3072": {"op": "SHL"}, "3073": {"op": "SUB"}, "3074": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP2", "path": "30"}, "3075": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "GT", "path": "30"}, "3076": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP1", "path": "30"}, "3077": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "ISZERO", "path": "30"}, "3078": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH2", "path": "30", "value": "0xC0E"}, "3081": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "JUMPI", "path": "30"}, "3082": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH1", "path": "30", "value": "0x0"}, "3084": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP1", "path": "30"}, "3085": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "REVERT", "path": "30"}, "3086": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "JUMPDEST", "path": "30"}, "3087": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "POP", "path": "30"}, "3088": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH1", "path": "30", "value": "0x40"}, "3090": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "MLOAD", "path": "30"}, "3091": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "SWAP1", "path": "30"}, "3092": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP1", "path": "30"}, "3093": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP3", "path": "30"}, "3094": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "MSTORE", "path": "30"}, "3095": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP1", "path": "30"}, "3096": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH1", "path": "30", "value": "0x20"}, "3098": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "MUL", "path": "30"}, "3099": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH1", "path": "30", "value": "0x20"}, "3101": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "ADD", "path": "30"}, "3102": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP3", "path": "30"}, "3103": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "ADD", "path": "30"}, "3104": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH1", "path": "30", "value": "0x40"}, "3106": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "MSTORE", "path": "30"}, "3107": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP1", "path": "30"}, "3108": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "ISZERO", "path": "30"}, "3109": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH2", "path": "30", "value": "0xC38"}, "3112": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "JUMPI", "path": "30"}, "3113": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP2", "path": "30"}, "3114": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH1", "path": "30", "value": "0x20"}, "3116": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "ADD", "path": "30"}, "3117": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "PUSH1", "path": "30", "value": "0x20"}, "3119": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP3", "path": "30"}, "3120": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "MUL", "path": "30"}, "3121": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP1", "path": "30"}, "3122": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "CALLDATASIZE", "path": "30"}, "3123": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "DUP4", "path": "30"}, "3124": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "CALLDATACOPY", "path": "30"}, "3125": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "ADD", "path": "30"}, "3126": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "SWAP1", "path": "30"}, "3127": {"op": "POP"}, "3128": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "JUMPDEST", "path": "30"}, "3129": {"fn": "MockVault.callJoinPoolGyro", "offset": [6640, 6683], "op": "POP", "path": "30"}, "3130": {"fn": "MockVault.callJoinPoolGyro", "offset": [6615, 6683], "op": "SWAP1", "path": "30"}, "3131": {"fn": "MockVault.callJoinPoolGyro", "offset": [6615, 6683], "op": "POP", "path": "30"}, "3132": {"fn": "MockVault.callJoinPoolGyro", "offset": [6693, 6715], "op": "PUSH1", "path": "30", "value": "0x0"}, "3134": {"fn": "MockVault.callJoinPoolGyro", "offset": [6731, 6740], "op": "DUP7", "path": "30"}, "3135": {"fn": "MockVault.callJoinPoolGyro", "offset": [6731, 6747], "op": "MLOAD", "path": "30"}, "3136": {"op": "PUSH1", "value": "0x1"}, "3138": {"op": "PUSH1", "value": "0x1"}, "3140": {"op": "PUSH1", "value": "0x40"}, "3142": {"op": "SHL"}, "3143": {"op": "SUB"}, "3144": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP2", "path": "30"}, "3145": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "GT", "path": "30"}, "3146": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP1", "path": "30"}, "3147": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "ISZERO", "path": "30"}, "3148": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH2", "path": "30", "value": "0xC54"}, "3151": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "JUMPI", "path": "30"}, "3152": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH1", "path": "30", "value": "0x0"}, "3154": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP1", "path": "30"}, "3155": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "REVERT", "path": "30"}, "3156": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "JUMPDEST", "path": "30"}, "3157": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "POP", "path": "30"}, "3158": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH1", "path": "30", "value": "0x40"}, "3160": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "MLOAD", "path": "30"}, "3161": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "SWAP1", "path": "30"}, "3162": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP1", "path": "30"}, "3163": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP3", "path": "30"}, "3164": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "MSTORE", "path": "30"}, "3165": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP1", "path": "30"}, "3166": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH1", "path": "30", "value": "0x20"}, "3168": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "MUL", "path": "30"}, "3169": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH1", "path": "30", "value": "0x20"}, "3171": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "ADD", "path": "30"}, "3172": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP3", "path": "30"}, "3173": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "ADD", "path": "30"}, "3174": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH1", "path": "30", "value": "0x40"}, "3176": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "MSTORE", "path": "30"}, "3177": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP1", "path": "30"}, "3178": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "ISZERO", "path": "30"}, "3179": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH2", "path": "30", "value": "0xC7E"}, "3182": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "JUMPI", "path": "30"}, "3183": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP2", "path": "30"}, "3184": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH1", "path": "30", "value": "0x20"}, "3186": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "ADD", "path": "30"}, "3187": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "PUSH1", "path": "30", "value": "0x20"}, "3189": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP3", "path": "30"}, "3190": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "MUL", "path": "30"}, "3191": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP1", "path": "30"}, "3192": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "CALLDATASIZE", "path": "30"}, "3193": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "DUP4", "path": "30"}, "3194": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "CALLDATACOPY", "path": "30"}, "3195": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "ADD", "path": "30"}, "3196": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "SWAP1", "path": "30"}, "3197": {"op": "POP"}, "3198": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "JUMPDEST", "path": "30"}, "3199": {"fn": "MockVault.callJoinPoolGyro", "offset": [6718, 6748], "op": "POP", "path": "30"}, "3200": {"fn": "MockVault.callJoinPoolGyro", "offset": [6693, 6748], "op": "SWAP1", "path": "30"}, "3201": {"fn": "MockVault.callJoinPoolGyro", "offset": [6693, 6748], "op": "POP", "path": "30"}, "3202": {"fn": "MockVault.callJoinPoolGyro", "offset": [6763, 6772], "op": "PUSH1", "path": "30", "value": "0x0"}, "3204": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "JUMPDEST", "path": "30"}, "3205": {"fn": "MockVault.callJoinPoolGyro", "offset": [6782, 6791], "op": "DUP8", "path": "30"}, "3206": {"fn": "MockVault.callJoinPoolGyro", "offset": [6782, 6798], "op": "MLOAD", "path": "30"}, "3207": {"fn": "MockVault.callJoinPoolGyro", "offset": [6778, 6779], "op": "DUP2", "path": "30"}, "3208": {"fn": "MockVault.callJoinPoolGyro", "offset": [6778, 6798], "op": "LT", "path": "30"}, "3209": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "ISZERO", "path": "30"}, "3210": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "PUSH2", "path": "30", "value": "0xCC0"}, "3213": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "JUMPI", "path": "30"}, "3214": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6847], "op": "DUP8", "path": "30", "statement": 33}, "3215": {"fn": "MockVault.callJoinPoolGyro", "offset": [6848, 6849], "op": "DUP2", "path": "30"}, "3216": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "DUP2", "path": "30"}, "3217": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "MLOAD", "path": "30"}, "3218": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "DUP2", "path": "30"}, "3219": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "LT", "path": "30"}, "3220": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "PUSH2", "path": "30", "value": "0xC99"}, "3223": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "JUMPI", "path": "30"}, "3224": {"dev": "Index out of range", "fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "INVALID", "path": "30"}, "3225": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "JUMPDEST", "path": "30"}, "3226": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "PUSH1", "path": "30", "value": "0x20"}, "3228": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "MUL", "path": "30"}, "3229": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "PUSH1", "path": "30", "value": "0x20"}, "3231": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "ADD", "path": "30"}, "3232": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "ADD", "path": "30"}, "3233": {"fn": "MockVault.callJoinPoolGyro", "offset": [6838, 6850], "op": "MLOAD", "path": "30"}, "3234": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6825], "op": "DUP3", "path": "30"}, "3235": {"fn": "MockVault.callJoinPoolGyro", "offset": [6826, 6827], "op": "DUP3", "path": "30"}, "3236": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "DUP2", "path": "30"}, "3237": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "MLOAD", "path": "30"}, "3238": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "DUP2", "path": "30"}, "3239": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "LT", "path": "30"}, "3240": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "PUSH2", "path": "30", "value": "0xCAD"}, "3243": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "JUMPI", "path": "30"}, "3244": {"dev": "Index out of range", "fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "INVALID", "path": "30"}, "3245": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "JUMPDEST", "path": "30"}, "3246": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "PUSH1", "path": "30", "value": "0x20"}, "3248": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "SWAP1", "path": "30"}, "3249": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "DUP2", "path": "30"}, "3250": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "MUL", "path": "30"}, "3251": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "SWAP2", "path": "30"}, "3252": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "SWAP1", "path": "30"}, "3253": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "SWAP2", "path": "30"}, "3254": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "ADD", "path": "30"}, "3255": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6828], "op": "ADD", "path": "30"}, "3256": {"fn": "MockVault.callJoinPoolGyro", "offset": [6819, 6851], "op": "MSTORE", "path": "30"}, "3257": {"fn": "MockVault.callJoinPoolGyro", "offset": [6800, 6803], "op": "PUSH1", "path": "30", "statement": 34, "value": "0x1"}, "3259": {"fn": "MockVault.callJoinPoolGyro", "offset": [6800, 6803], "op": "ADD", "path": "30"}, "3260": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "PUSH2", "path": "30", "value": "0xC84"}, "3263": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "JUMP", "path": "30"}, "3264": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "JUMPDEST", "path": "30"}, "3265": {"fn": "MockVault.callJoinPoolGyro", "offset": [6758, 6862], "op": "POP", "path": "30"}, "3266": {"fn": "MockVault.callJoinPoolGyro", "offset": [6911, 6917], "op": "DUP8", "path": "30", "statement": 35}, "3267": {"fn": "MockVault.callJoinPoolGyro", "offset": [6911, 6924], "op": "PUSH1", "path": "30", "value": "0x40"}, "3269": {"fn": "MockVault.callJoinPoolGyro", "offset": [6911, 6924], "op": "ADD", "path": "30"}, "3270": {"fn": "MockVault.callJoinPoolGyro", "offset": [6911, 6924], "op": "MLOAD", "path": "30"}, "3271": {"op": "PUSH1", "value": "0x1"}, "3273": {"op": "PUSH1", "value": "0x1"}, "3275": {"op": "PUSH1", "value": "0xA0"}, "3277": {"op": "SHL"}, "3278": {"op": "SUB"}, "3279": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "AND", "path": "30"}, "3280": {"fn": "MockVault.callJoinPoolGyro", "offset": [6896, 6902], "op": "DUP9", "path": "30"}, "3281": {"fn": "MockVault.callJoinPoolGyro", "offset": [6896, 6909], "op": "PUSH1", "path": "30", "value": "0x20"}, "3283": {"fn": "MockVault.callJoinPoolGyro", "offset": [6896, 6909], "op": "ADD", "path": "30"}, "3284": {"fn": "MockVault.callJoinPoolGyro", "offset": [6896, 6909], "op": "MLOAD", "path": "30"}, "3285": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "PUSH32", "path": "30", "value": "0xE5CE249087CE04F05A957192435400FD97868DBA0E6A4B4C049ABF8AF80DAE78"}, "3318": {"fn": "MockVault.callJoinPoolGyro", "offset": [6926, 6932], "op": "DUP5", "path": "30"}, "3319": {"fn": "MockVault.callJoinPoolGyro", "offset": [6934, 6940], "op": "DUP5", "path": "30"}, "3320": {"fn": "MockVault.callJoinPoolGyro", "offset": [6942, 6963], "op": "DUP11", "path": "30"}, "3321": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "PUSH1", "path": "30", "value": "0x40"}, "3323": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "MLOAD", "path": "30"}, "3324": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "PUSH2", "path": "30", "value": "0xD07"}, "3327": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "SWAP4", "path": "30"}, "3328": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "SWAP3", "path": "30"}, "3329": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "SWAP2", "path": "30"}, "3330": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "SWAP1", "path": "30"}, "3331": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "PUSH2", "path": "30", "value": "0x153F"}, "3334": {"fn": "MockVault.callJoinPoolGyro", "jump": "i", "offset": [6877, 6964], "op": "JUMP", "path": "30"}, "3335": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "JUMPDEST", "path": "30"}, "3336": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "PUSH1", "path": "30", "value": "0x40"}, "3338": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "MLOAD", "path": "30"}, "3339": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "DUP1", "path": "30"}, "3340": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "SWAP2", "path": "30"}, "3341": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "SUB", "path": "30"}, "3342": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "SWAP1", "path": "30"}, "3343": {"fn": "MockVault.callJoinPoolGyro", "offset": [6877, 6964], "op": "LOG3", "path": "30"}, "3344": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "POP", "path": "30"}, "3345": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "POP", "path": "30"}, "3346": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "POP", "path": "30"}, "3347": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "POP", "path": "30"}, "3348": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "POP", "path": "30"}, "3349": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "SWAP2", "path": "30"}, "3350": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "POP", "path": "30"}, "3351": {"fn": "MockVault.callJoinPoolGyro", "offset": [5231, 6971], "op": "SWAP2", "path": "30"}, "3352": {"fn": "MockVault.callJoinPoolGyro", "jump": "o", "offset": [5231, 6971], "op": "JUMP", "path": "30"}, "3353": {"op": "JUMPDEST"}, "3354": {"op": "DUP1"}, "3355": {"op": "CALLDATALOAD"}, "3356": {"op": "PUSH2", "value": "0xD24"}, "3359": {"op": "DUP2"}, "3360": {"op": "PUSH2", "value": "0x1781"}, "3363": {"jump": "i", "op": "JUMP"}, "3364": {"op": "JUMPDEST"}, "3365": {"op": "SWAP2"}, "3366": {"op": "SWAP1"}, "3367": {"op": "POP"}, "3368": {"jump": "o", "op": "JUMP"}, "3369": {"op": "JUMPDEST"}, "3370": {"op": "PUSH1", "value": "0x0"}, "3372": {"op": "DUP3"}, "3373": {"op": "PUSH1", "value": "0x1F"}, "3375": {"op": "DUP4"}, "3376": {"op": "ADD"}, "3377": {"op": "SLT"}, "3378": {"op": "PUSH2", "value": "0xD39"}, "3381": {"op": "JUMPI"}, "3382": {"op": "DUP1"}, "3383": {"op": "DUP2"}, "3384": {"op": "REVERT"}, "3385": {"op": "JUMPDEST"}, "3386": {"op": "DUP2"}, "3387": {"op": "CALLDATALOAD"}, "3388": {"op": "PUSH1", "value": "0x20"}, "3390": {"op": "PUSH2", "value": "0xD4E"}, "3393": {"op": "PUSH2", "value": "0xD49"}, "3396": {"op": "DUP4"}, "3397": {"op": "PUSH2", "value": "0x1757"}, "3400": {"jump": "i", "op": "JUMP"}, "3401": {"op": "JUMPDEST"}, "3402": {"op": "PUSH2", "value": "0x1734"}, "3405": {"jump": "i", "op": "JUMP"}, "3406": {"op": "JUMPDEST"}, "3407": {"op": "DUP3"}, "3408": {"op": "DUP2"}, "3409": {"op": "MSTORE"}, "3410": {"op": "DUP2"}, "3411": {"op": "DUP2"}, "3412": {"op": "ADD"}, "3413": {"op": "SWAP1"}, "3414": {"op": "DUP6"}, "3415": {"op": "DUP4"}, "3416": {"op": "ADD"}, "3417": {"op": "DUP4"}, "3418": {"op": "DUP6"}, "3419": {"op": "MUL"}, "3420": {"op": "DUP8"}, "3421": {"op": "ADD"}, "3422": {"op": "DUP5"}, "3423": {"op": "ADD"}, "3424": {"op": "DUP9"}, "3425": {"op": "LT"}, "3426": {"op": "ISZERO"}, "3427": {"op": "PUSH2", "value": "0xD6A"}, "3430": {"op": "JUMPI"}, "3431": {"op": "DUP6"}, "3432": {"op": "DUP7"}, "3433": {"op": "REVERT"}, "3434": {"op": "JUMPDEST"}, "3435": {"op": "DUP6"}, "3436": {"op": "JUMPDEST"}, "3437": {"op": "DUP6"}, "3438": {"op": "DUP2"}, "3439": {"op": "LT"}, "3440": {"op": "ISZERO"}, "3441": {"op": "PUSH2", "value": "0xD91"}, "3444": {"op": "JUMPI"}, "3445": {"op": "DUP2"}, "3446": {"op": "CALLDATALOAD"}, "3447": {"op": "PUSH2", "value": "0xD7F"}, "3450": {"op": "DUP2"}, "3451": {"op": "PUSH2", "value": "0x1781"}, "3454": {"jump": "i", "op": "JUMP"}, "3455": {"op": "JUMPDEST"}, "3456": {"op": "DUP5"}, "3457": {"op": "MSTORE"}, "3458": {"op": "SWAP3"}, "3459": {"op": "DUP5"}, "3460": {"op": "ADD"}, "3461": {"op": "SWAP3"}, "3462": {"op": "SWAP1"}, "3463": {"op": "DUP5"}, "3464": {"op": "ADD"}, "3465": {"op": "SWAP1"}, "3466": {"op": "PUSH1", "value": "0x1"}, "3468": {"op": "ADD"}, "3469": {"op": "PUSH2", "value": "0xD6C"}, "3472": {"op": "JUMP"}, "3473": {"op": "JUMPDEST"}, "3474": {"op": "POP"}, "3475": {"op": "SWAP1"}, "3476": {"op": "SWAP8"}, "3477": {"op": "SWAP7"}, "3478": {"op": "POP"}, "3479": {"op": "POP"}, "3480": {"op": "POP"}, "3481": {"op": "POP"}, "3482": {"op": "POP"}, "3483": {"op": "POP"}, "3484": {"op": "POP"}, "3485": {"jump": "o", "op": "JUMP"}, "3486": {"op": "JUMPDEST"}, "3487": {"op": "PUSH1", "value": "0x0"}, "3489": {"op": "DUP3"}, "3490": {"op": "PUSH1", "value": "0x1F"}, "3492": {"op": "DUP4"}, "3493": {"op": "ADD"}, "3494": {"op": "SLT"}, "3495": {"op": "PUSH2", "value": "0xDAE"}, "3498": {"op": "JUMPI"}, "3499": {"op": "DUP1"}, "3500": {"op": "DUP2"}, "3501": {"op": "REVERT"}, "3502": {"op": "JUMPDEST"}, "3503": {"op": "DUP2"}, "3504": {"op": "CALLDATALOAD"}, "3505": {"op": "PUSH1", "value": "0x20"}, "3507": {"op": "PUSH2", "value": "0xDBE"}, "3510": {"op": "PUSH2", "value": "0xD49"}, "3513": {"op": "DUP4"}, "3514": {"op": "PUSH2", "value": "0x1757"}, "3517": {"jump": "i", "op": "JUMP"}, "3518": {"op": "JUMPDEST"}, "3519": {"op": "DUP3"}, "3520": {"op": "DUP2"}, "3521": {"op": "MSTORE"}, "3522": {"op": "DUP2"}, "3523": {"op": "DUP2"}, "3524": {"op": "ADD"}, "3525": {"op": "SWAP1"}, "3526": {"op": "DUP6"}, "3527": {"op": "DUP4"}, "3528": {"op": "ADD"}, "3529": {"op": "DUP4"}, "3530": {"op": "DUP6"}, "3531": {"op": "MUL"}, "3532": {"op": "DUP8"}, "3533": {"op": "ADD"}, "3534": {"op": "DUP5"}, "3535": {"op": "ADD"}, "3536": {"op": "DUP9"}, "3537": {"op": "LT"}, "3538": {"op": "ISZERO"}, "3539": {"op": "PUSH2", "value": "0xDDA"}, "3542": {"op": "JUMPI"}, "3543": {"op": "DUP6"}, "3544": {"op": "DUP7"}, "3545": {"op": "REVERT"}, "3546": {"op": "JUMPDEST"}, "3547": {"op": "DUP6"}, "3548": {"op": "JUMPDEST"}, "3549": {"op": "DUP6"}, "3550": {"op": "DUP2"}, "3551": {"op": "LT"}, "3552": {"op": "ISZERO"}, "3553": {"op": "PUSH2", "value": "0xD91"}, "3556": {"op": "JUMPI"}, "3557": {"op": "DUP2"}, "3558": {"op": "CALLDATALOAD"}, "3559": {"op": "DUP5"}, "3560": {"op": "MSTORE"}, "3561": {"op": "SWAP3"}, "3562": {"op": "DUP5"}, "3563": {"op": "ADD"}, "3564": {"op": "SWAP3"}, "3565": {"op": "SWAP1"}, "3566": {"op": "DUP5"}, "3567": {"op": "ADD"}, "3568": {"op": "SWAP1"}, "3569": {"op": "PUSH1", "value": "0x1"}, "3571": {"op": "ADD"}, "3572": {"op": "PUSH2", "value": "0xDDC"}, "3575": {"op": "JUMP"}, "3576": {"op": "JUMPDEST"}, "3577": {"op": "PUSH1", "value": "0x0"}, "3579": {"op": "DUP3"}, "3580": {"op": "PUSH1", "value": "0x1F"}, "3582": {"op": "DUP4"}, "3583": {"op": "ADD"}, "3584": {"op": "SLT"}, "3585": {"op": "PUSH2", "value": "0xE08"}, "3588": {"op": "JUMPI"}, "3589": {"op": "DUP1"}, "3590": {"op": "DUP2"}, "3591": {"op": "REVERT"}, "3592": {"op": "JUMPDEST"}, "3593": {"op": "DUP2"}, "3594": {"op": "MLOAD"}, "3595": {"op": "PUSH1", "value": "0x20"}, "3597": {"op": "PUSH2", "value": "0xE18"}, "3600": {"op": "PUSH2", "value": "0xD49"}, "3603": {"op": "DUP4"}, "3604": {"op": "PUSH2", "value": "0x1757"}, "3607": {"jump": "i", "op": "JUMP"}, "3608": {"op": "JUMPDEST"}, "3609": {"op": "DUP3"}, "3610": {"op": "DUP2"}, "3611": {"op": "MSTORE"}, "3612": {"op": "DUP2"}, "3613": {"op": "DUP2"}, "3614": {"op": "ADD"}, "3615": {"op": "SWAP1"}, "3616": {"op": "DUP6"}, "3617": {"op": "DUP4"}, "3618": {"op": "ADD"}, "3619": {"op": "DUP4"}, "3620": {"op": "DUP6"}, "3621": {"op": "MUL"}, "3622": {"op": "DUP8"}, "3623": {"op": "ADD"}, "3624": {"op": "DUP5"}, "3625": {"op": "ADD"}, "3626": {"op": "DUP9"}, "3627": {"op": "LT"}, "3628": {"op": "ISZERO"}, "3629": {"op": "PUSH2", "value": "0xE34"}, "3632": {"op": "JUMPI"}, "3633": {"op": "DUP6"}, "3634": {"op": "DUP7"}, "3635": {"op": "REVERT"}, "3636": {"op": "JUMPDEST"}, "3637": {"op": "DUP6"}, "3638": {"op": "JUMPDEST"}, "3639": {"op": "DUP6"}, "3640": {"op": "DUP2"}, "3641": {"op": "LT"}, "3642": {"op": "ISZERO"}, "3643": {"op": "PUSH2", "value": "0xD91"}, "3646": {"op": "JUMPI"}, "3647": {"op": "DUP2"}, "3648": {"op": "MLOAD"}, "3649": {"op": "DUP5"}, "3650": {"op": "MSTORE"}, "3651": {"op": "SWAP3"}, "3652": {"op": "DUP5"}, "3653": {"op": "ADD"}, "3654": {"op": "SWAP3"}, "3655": {"op": "SWAP1"}, "3656": {"op": "DUP5"}, "3657": {"op": "ADD"}, "3658": {"op": "SWAP1"}, "3659": {"op": "PUSH1", "value": "0x1"}, "3661": {"op": "ADD"}, "3662": {"op": "PUSH2", "value": "0xE36"}, "3665": {"op": "JUMP"}, "3666": {"op": "JUMPDEST"}, "3667": {"op": "PUSH1", "value": "0x0"}, "3669": {"op": "DUP3"}, "3670": {"op": "PUSH1", "value": "0x1F"}, "3672": {"op": "DUP4"}, "3673": {"op": "ADD"}, "3674": {"op": "SLT"}, "3675": {"op": "PUSH2", "value": "0xE62"}, "3678": {"op": "JUMPI"}, "3679": {"op": "DUP1"}, "3680": {"op": "DUP2"}, "3681": {"op": "REVERT"}, "3682": {"op": "JUMPDEST"}, "3683": {"op": "DUP2"}, "3684": {"op": "CALLDATALOAD"}, "3685": {"op": "PUSH1", "value": "0x1"}, "3687": {"op": "PUSH1", "value": "0x1"}, "3689": {"op": "PUSH1", "value": "0x40"}, "3691": {"op": "SHL"}, "3692": {"op": "SUB"}, "3693": {"op": "DUP2"}, "3694": {"op": "GT"}, "3695": {"op": "ISZERO"}, "3696": {"op": "PUSH2", "value": "0xE75"}, "3699": {"op": "JUMPI"}, "3700": {"op": "INVALID"}, "3701": {"op": "JUMPDEST"}, "3702": {"op": "PUSH2", "value": "0xE88"}, "3705": {"op": "PUSH1", "value": "0x1F"}, "3707": {"op": "DUP3"}, "3708": {"op": "ADD"}, "3709": {"op": "PUSH1", "value": "0x1F"}, "3711": {"op": "NOT"}, "3712": {"op": "AND"}, "3713": {"op": "PUSH1", "value": "0x20"}, "3715": {"op": "ADD"}, "3716": {"op": "PUSH2", "value": "0x1734"}, "3719": {"jump": "i", "op": "JUMP"}, "3720": {"op": "JUMPDEST"}, "3721": {"op": "DUP2"}, "3722": {"op": "DUP2"}, "3723": {"op": "MSTORE"}, "3724": {"op": "DUP5"}, "3725": {"op": "PUSH1", "value": "0x20"}, "3727": {"op": "DUP4"}, "3728": {"op": "DUP7"}, "3729": {"op": "ADD"}, "3730": {"op": "ADD"}, "3731": {"op": "GT"}, "3732": {"op": "ISZERO"}, "3733": {"op": "PUSH2", "value": "0xE9C"}, "3736": {"op": "JUMPI"}, "3737": {"op": "DUP3"}, "3738": {"op": "DUP4"}, "3739": {"op": "REVERT"}, "3740": {"op": "JUMPDEST"}, "3741": {"op": "DUP2"}, "3742": {"op": "PUSH1", "value": "0x20"}, "3744": {"op": "DUP6"}, "3745": {"op": "ADD"}, "3746": {"op": "PUSH1", "value": "0x20"}, "3748": {"op": "DUP4"}, "3749": {"op": "ADD"}, "3750": {"op": "CALLDATACOPY"}, "3751": {"op": "SWAP1"}, "3752": {"op": "DUP2"}, "3753": {"op": "ADD"}, "3754": {"op": "PUSH1", "value": "0x20"}, "3756": {"op": "ADD"}, "3757": {"op": "SWAP2"}, "3758": {"op": "SWAP1"}, "3759": {"op": "SWAP2"}, "3760": {"op": "MSTORE"}, "3761": {"op": "SWAP3"}, "3762": {"op": "SWAP2"}, "3763": {"op": "POP"}, "3764": {"op": "POP"}, "3765": {"jump": "o", "op": "JUMP"}, "3766": {"op": "JUMPDEST"}, "3767": {"op": "DUP1"}, "3768": {"op": "CALLDATALOAD"}, "3769": {"op": "PUSH1", "value": "0x2"}, "3771": {"op": "DUP2"}, "3772": {"op": "LT"}, "3773": {"op": "PUSH2", "value": "0xD24"}, "3776": {"op": "JUMPI"}, "3777": {"op": "PUSH1", "value": "0x0"}, "3779": {"op": "DUP1"}, "3780": {"op": "REVERT"}, "3781": {"op": "JUMPDEST"}, "3782": {"op": "PUSH1", "value": "0x0"}, "3784": {"op": "PUSH2", "value": "0x120"}, "3787": {"op": "DUP1"}, "3788": {"op": "DUP4"}, "3789": {"op": "DUP6"}, "3790": {"op": "SUB"}, "3791": {"op": "SLT"}, "3792": {"op": "ISZERO"}, "3793": {"op": "PUSH2", "value": "0xED8"}, "3796": {"op": "JUMPI"}, "3797": {"op": "DUP2"}, "3798": {"op": "DUP3"}, "3799": {"op": "REVERT"}, "3800": {"op": "JUMPDEST"}, "3801": {"op": "PUSH2", "value": "0xEE1"}, "3804": {"op": "DUP2"}, "3805": {"op": "PUSH2", "value": "0x1734"}, "3808": {"jump": "i", "op": "JUMP"}, "3809": {"op": "JUMPDEST"}, "3810": {"op": "SWAP2"}, "3811": {"op": "POP"}, "3812": {"op": "POP"}, "3813": {"op": "PUSH2", "value": "0xEED"}, "3816": {"op": "DUP3"}, "3817": {"op": "PUSH2", "value": "0xEB6"}, "3820": {"jump": "i", "op": "JUMP"}, "3821": {"op": "JUMPDEST"}, "3822": {"op": "DUP2"}, "3823": {"op": "MSTORE"}, "3824": {"op": "PUSH2", "value": "0xEFB"}, "3827": {"op": "PUSH1", "value": "0x20"}, "3829": {"op": "DUP4"}, "3830": {"op": "ADD"}, "3831": {"op": "PUSH2", "value": "0xD19"}, "3834": {"jump": "i", "op": "JUMP"}, "3835": {"op": "JUMPDEST"}, "3836": {"op": "PUSH1", "value": "0x20"}, "3838": {"op": "DUP3"}, "3839": {"op": "ADD"}, "3840": {"op": "MSTORE"}, "3841": {"op": "PUSH2", "value": "0xF0C"}, "3844": {"op": "PUSH1", "value": "0x40"}, "3846": {"op": "DUP4"}, "3847": {"op": "ADD"}, "3848": {"op": "PUSH2", "value": "0xD19"}, "3851": {"jump": "i", "op": "JUMP"}, "3852": {"op": "JUMPDEST"}, "3853": {"op": "PUSH1", "value": "0x40"}, "3855": {"op": "DUP3"}, "3856": {"op": "ADD"}, "3857": {"op": "MSTORE"}, "3858": {"op": "PUSH1", "value": "0x60"}, "3860": {"op": "DUP3"}, "3861": {"op": "ADD"}, "3862": {"op": "CALLDATALOAD"}, "3863": {"op": "PUSH1", "value": "0x60"}, "3865": {"op": "DUP3"}, "3866": {"op": "ADD"}, "3867": {"op": "MSTORE"}, "3868": {"op": "PUSH1", "value": "0x80"}, "3870": {"op": "DUP3"}, "3871": {"op": "ADD"}, "3872": {"op": "CALLDATALOAD"}, "3873": {"op": "PUSH1", "value": "0x80"}, "3875": {"op": "DUP3"}, "3876": {"op": "ADD"}, "3877": {"op": "MSTORE"}, "3878": {"op": "PUSH1", "value": "0xA0"}, "3880": {"op": "DUP3"}, "3881": {"op": "ADD"}, "3882": {"op": "CALLDATALOAD"}, "3883": {"op": "PUSH1", "value": "0xA0"}, "3885": {"op": "DUP3"}, "3886": {"op": "ADD"}, "3887": {"op": "MSTORE"}, "3888": {"op": "PUSH2", "value": "0xF3B"}, "3891": {"op": "PUSH1", "value": "0xC0"}, "3893": {"op": "DUP4"}, "3894": {"op": "ADD"}, "3895": {"op": "PUSH2", "value": "0xD19"}, "3898": {"jump": "i", "op": "JUMP"}, "3899": {"op": "JUMPDEST"}, "3900": {"op": "PUSH1", "value": "0xC0"}, "3902": {"op": "DUP3"}, "3903": {"op": "ADD"}, "3904": {"op": "MSTORE"}, "3905": {"op": "PUSH2", "value": "0xF4C"}, "3908": {"op": "PUSH1", "value": "0xE0"}, "3910": {"op": "DUP4"}, "3911": {"op": "ADD"}, "3912": {"op": "PUSH2", "value": "0xD19"}, "3915": {"jump": "i", "op": "JUMP"}, "3916": {"op": "JUMPDEST"}, "3917": {"op": "PUSH1", "value": "0xE0"}, "3919": {"op": "DUP3"}, "3920": {"op": "ADD"}, "3921": {"op": "MSTORE"}, "3922": {"op": "PUSH2", "value": "0x100"}, "3925": {"op": "DUP1"}, "3926": {"op": "DUP4"}, "3927": {"op": "ADD"}, "3928": {"op": "CALLDATALOAD"}, "3929": {"op": "PUSH1", "value": "0x1"}, "3931": {"op": "PUSH1", "value": "0x1"}, "3933": {"op": "PUSH1", "value": "0x40"}, "3935": {"op": "SHL"}, "3936": {"op": "SUB"}, "3937": {"op": "DUP2"}, "3938": {"op": "GT"}, "3939": {"op": "ISZERO"}, "3940": {"op": "PUSH2", "value": "0xF6C"}, "3943": {"op": "JUMPI"}, "3944": {"op": "PUSH1", "value": "0x0"}, "3946": {"op": "DUP1"}, "3947": {"op": "REVERT"}, "3948": {"op": "JUMPDEST"}, "3949": {"op": "PUSH2", "value": "0xF78"}, "3952": {"op": "DUP6"}, "3953": {"op": "DUP3"}, "3954": {"op": "DUP7"}, "3955": {"op": "ADD"}, "3956": {"op": "PUSH2", "value": "0xE52"}, "3959": {"jump": "i", "op": "JUMP"}, "3960": {"op": "JUMPDEST"}, "3961": {"op": "DUP3"}, "3962": {"op": "DUP5"}, "3963": {"op": "ADD"}, "3964": {"op": "MSTORE"}, "3965": {"op": "POP"}, "3966": {"op": "POP"}, "3967": {"op": "SWAP3"}, "3968": {"op": "SWAP2"}, "3969": {"op": "POP"}, "3970": {"op": "POP"}, "3971": {"jump": "o", "op": "JUMP"}, "3972": {"op": "JUMPDEST"}, "3973": {"op": "PUSH1", "value": "0x0"}, "3975": {"op": "DUP1"}, "3976": {"op": "PUSH1", "value": "0x0"}, "3978": {"op": "DUP1"}, "3979": {"op": "PUSH1", "value": "0x0"}, "3981": {"op": "PUSH1", "value": "0xA0"}, "3983": {"op": "DUP7"}, "3984": {"op": "DUP9"}, "3985": {"op": "SUB"}, "3986": {"op": "SLT"}, "3987": {"op": "ISZERO"}, "3988": {"op": "PUSH2", "value": "0xF9B"}, "3991": {"op": "JUMPI"}, "3992": {"op": "DUP1"}, "3993": {"op": "DUP2"}, "3994": {"op": "REVERT"}, "3995": {"op": "JUMPDEST"}, "3996": {"op": "DUP6"}, "3997": {"op": "CALLDATALOAD"}, "3998": {"op": "PUSH2", "value": "0xFA6"}, "4001": {"op": "DUP2"}, "4002": {"op": "PUSH2", "value": "0x1781"}, "4005": {"jump": "i", "op": "JUMP"}, "4006": {"op": "JUMPDEST"}, "4007": {"op": "SWAP5"}, "4008": {"op": "POP"}, "4009": {"op": "PUSH1", "value": "0x20"}, "4011": {"op": "DUP7"}, "4012": {"op": "ADD"}, "4013": {"op": "CALLDATALOAD"}, "4014": {"op": "PUSH1", "value": "0x1"}, "4016": {"op": "PUSH1", "value": "0x1"}, "4018": {"op": "PUSH1", "value": "0x40"}, "4020": {"op": "SHL"}, "4021": {"op": "SUB"}, "4022": {"op": "DUP1"}, "4023": {"op": "DUP3"}, "4024": {"op": "GT"}, "4025": {"op": "ISZERO"}, "4026": {"op": "PUSH2", "value": "0xFC1"}, "4029": {"op": "JUMPI"}, "4030": {"op": "DUP3"}, "4031": {"op": "DUP4"}, "4032": {"op": "REVERT"}, "4033": {"op": "JUMPDEST"}, "4034": {"op": "PUSH2", "value": "0xFCD"}, "4037": {"op": "DUP10"}, "4038": {"op": "DUP4"}, "4039": {"op": "DUP11"}, "4040": {"op": "ADD"}, "4041": {"op": "PUSH2", "value": "0xEC5"}, "4044": {"jump": "i", "op": "JUMP"}, "4045": {"op": "JUMPDEST"}, "4046": {"op": "SWAP6"}, "4047": {"op": "POP"}, "4048": {"op": "PUSH1", "value": "0x40"}, "4050": {"op": "DUP9"}, "4051": {"op": "ADD"}, "4052": {"op": "CALLDATALOAD"}, "4053": {"op": "SWAP2"}, "4054": {"op": "POP"}, "4055": {"op": "DUP1"}, "4056": {"op": "DUP3"}, "4057": {"op": "GT"}, "4058": {"op": "ISZERO"}, "4059": {"op": "PUSH2", "value": "0xFE2"}, "4062": {"op": "JUMPI"}, "4063": {"op": "DUP3"}, "4064": {"op": "DUP4"}, "4065": {"op": "REVERT"}, "4066": {"op": "JUMPDEST"}, "4067": {"op": "POP"}, "4068": {"op": "PUSH2", "value": "0xFEF"}, "4071": {"op": "DUP9"}, "4072": {"op": "DUP3"}, "4073": {"op": "DUP10"}, "4074": {"op": "ADD"}, "4075": {"op": "PUSH2", "value": "0xD9E"}, "4078": {"jump": "i", "op": "JUMP"}, "4079": {"op": "JUMPDEST"}, "4080": {"op": "SWAP6"}, "4081": {"op": "SWAP9"}, "4082": {"op": "SWAP5"}, "4083": {"op": "SWAP8"}, "4084": {"op": "POP"}, "4085": {"op": "SWAP5"}, "4086": {"op": "SWAP6"}, "4087": {"op": "PUSH1", "value": "0x60"}, "4089": {"op": "DUP2"}, "4090": {"op": "ADD"}, "4091": {"op": "CALLDATALOAD"}, "4092": {"op": "SWAP6"}, "4093": {"op": "POP"}, "4094": {"op": "PUSH1", "value": "0x80"}, "4096": {"op": "ADD"}, "4097": {"op": "CALLDATALOAD"}, "4098": {"op": "SWAP4"}, "4099": {"op": "SWAP3"}, "4100": {"op": "POP"}, "4101": {"op": "POP"}, "4102": {"op": "POP"}, "4103": {"jump": "o", "op": "JUMP"}, "4104": {"op": "JUMPDEST"}, "4105": {"op": "PUSH1", "value": "0x0"}, "4107": {"op": "DUP1"}, "4108": {"op": "PUSH1", "value": "0x0"}, "4110": {"op": "DUP1"}, "4111": {"op": "PUSH1", "value": "0x80"}, "4113": {"op": "DUP6"}, "4114": {"op": "DUP8"}, "4115": {"op": "SUB"}, "4116": {"op": "SLT"}, "4117": {"op": "ISZERO"}, "4118": {"op": "PUSH2", "value": "0x101D"}, "4121": {"op": "JUMPI"}, "4122": {"op": "DUP2"}, "4123": {"op": "DUP3"}, "4124": {"op": "REVERT"}, "4125": {"op": "JUMPDEST"}, "4126": {"op": "DUP5"}, "4127": {"op": "CALLDATALOAD"}, "4128": {"op": "PUSH2", "value": "0x1028"}, "4131": {"op": "DUP2"}, "4132": {"op": "PUSH2", "value": "0x1781"}, "4135": {"jump": "i", "op": "JUMP"}, "4136": {"op": "JUMPDEST"}, "4137": {"op": "SWAP4"}, "4138": {"op": "POP"}, "4139": {"op": "PUSH1", "value": "0x20"}, "4141": {"op": "DUP6"}, "4142": {"op": "ADD"}, "4143": {"op": "CALLDATALOAD"}, "4144": {"op": "PUSH1", "value": "0x1"}, "4146": {"op": "PUSH1", "value": "0x1"}, "4148": {"op": "PUSH1", "value": "0x40"}, "4150": {"op": "SHL"}, "4151": {"op": "SUB"}, "4152": {"op": "DUP2"}, "4153": {"op": "GT"}, "4154": {"op": "ISZERO"}, "4155": {"op": "PUSH2", "value": "0x1042"}, "4158": {"op": "JUMPI"}, "4159": {"op": "DUP3"}, "4160": {"op": "DUP4"}, "4161": {"op": "REVERT"}, "4162": {"op": "JUMPDEST"}, "4163": {"op": "PUSH2", "value": "0x104E"}, "4166": {"op": "DUP8"}, "4167": {"op": "DUP3"}, "4168": {"op": "DUP9"}, "4169": {"op": "ADD"}, "4170": {"op": "PUSH2", "value": "0xEC5"}, "4173": {"jump": "i", "op": "JUMP"}, "4174": {"op": "JUMPDEST"}, "4175": {"op": "SWAP5"}, "4176": {"op": "SWAP8"}, "4177": {"op": "SWAP5"}, "4178": {"op": "SWAP7"}, "4179": {"op": "POP"}, "4180": {"op": "POP"}, "4181": {"op": "POP"}, "4182": {"op": "POP"}, "4183": {"op": "PUSH1", "value": "0x40"}, "4185": {"op": "DUP4"}, "4186": {"op": "ADD"}, "4187": {"op": "CALLDATALOAD"}, "4188": {"op": "SWAP3"}, "4189": {"op": "PUSH1", "value": "0x60"}, "4191": {"op": "ADD"}, "4192": {"op": "CALLDATALOAD"}, "4193": {"op": "SWAP2"}, "4194": {"op": "SWAP1"}, "4195": {"op": "POP"}, "4196": {"jump": "o", "op": "JUMP"}, "4197": {"op": "JUMPDEST"}, "4198": {"op": "PUSH1", "value": "0x0"}, "4200": {"op": "DUP1"}, "4201": {"op": "PUSH1", "value": "0x40"}, "4203": {"op": "DUP4"}, "4204": {"op": "DUP6"}, "4205": {"op": "SUB"}, "4206": {"op": "SLT"}, "4207": {"op": "ISZERO"}, "4208": {"op": "PUSH2", "value": "0x1077"}, "4211": {"op": "JUMPI"}, "4212": {"op": "DUP2"}, "4213": {"op": "DUP3"}, "4214": {"op": "REVERT"}, "4215": {"op": "JUMPDEST"}, "4216": {"op": "DUP3"}, "4217": {"op": "MLOAD"}, "4218": {"op": "PUSH1", "value": "0x1"}, "4220": {"op": "PUSH1", "value": "0x1"}, "4222": {"op": "PUSH1", "value": "0x40"}, "4224": {"op": "SHL"}, "4225": {"op": "SUB"}, "4226": {"op": "DUP1"}, "4227": {"op": "DUP3"}, "4228": {"op": "GT"}, "4229": {"op": "ISZERO"}, "4230": {"op": "PUSH2", "value": "0x108D"}, "4233": {"op": "JUMPI"}, "4234": {"op": "DUP4"}, "4235": {"op": "DUP5"}, "4236": {"op": "REVERT"}, "4237": {"op": "JUMPDEST"}, "4238": {"op": "PUSH2", "value": "0x1099"}, "4241": {"op": "DUP7"}, "4242": {"op": "DUP4"}, "4243": {"op": "DUP8"}, "4244": {"op": "ADD"}, "4245": {"op": "PUSH2", "value": "0xDF8"}, "4248": {"jump": "i", "op": "JUMP"}, "4249": {"op": "JUMPDEST"}, "4250": {"op": "SWAP4"}, "4251": {"op": "POP"}, "4252": {"op": "PUSH1", "value": "0x20"}, "4254": {"op": "DUP6"}, "4255": {"op": "ADD"}, "4256": {"op": "MLOAD"}, "4257": {"op": "SWAP2"}, "4258": {"op": "POP"}, "4259": {"op": "DUP1"}, "4260": {"op": "DUP3"}, "4261": {"op": "GT"}, "4262": {"op": "ISZERO"}, "4263": {"op": "PUSH2", "value": "0x10AE"}, "4266": {"op": "JUMPI"}, "4267": {"op": "DUP3"}, "4268": {"op": "DUP4"}, "4269": {"op": "REVERT"}, "4270": {"op": "JUMPDEST"}, "4271": {"op": "POP"}, "4272": {"op": "PUSH2", "value": "0x10BB"}, "4275": {"op": "DUP6"}, "4276": {"op": "DUP3"}, "4277": {"op": "DUP7"}, "4278": {"op": "ADD"}, "4279": {"op": "PUSH2", "value": "0xDF8"}, "4282": {"jump": "i", "op": "JUMP"}, "4283": {"op": "JUMPDEST"}, "4284": {"op": "SWAP2"}, "4285": {"op": "POP"}, "4286": {"op": "POP"}, "4287": {"op": "SWAP3"}, "4288": {"op": "POP"}, "4289": {"op": "SWAP3"}, "4290": {"op": "SWAP1"}, "4291": {"op": "POP"}, "4292": {"jump": "o", "op": "JUMP"}, "4293": {"op": "JUMPDEST"}, "4294": {"op": "PUSH1", "value": "0x0"}, "4296": {"op": "PUSH1", "value": "0x20"}, "4298": {"op": "DUP3"}, "4299": {"op": "DUP5"}, "4300": {"op": "SUB"}, "4301": {"op": "SLT"}, "4302": {"op": "ISZERO"}, "4303": {"op": "PUSH2", "value": "0x10D6"}, "4306": {"op": "JUMPI"}, "4307": {"op": "DUP1"}, "4308": {"op": "DUP2"}, "4309": {"op": "REVERT"}, "4310": {"op": "JUMPDEST"}, "4311": {"op": "POP"}, "4312": {"op": "CALLDATALOAD"}, "4313": {"op": "SWAP2"}, "4314": {"op": "SWAP1"}, "4315": {"op": "POP"}, "4316": {"jump": "o", "op": "JUMP"}, "4317": {"op": "JUMPDEST"}, "4318": {"op": "PUSH1", "value": "0x0"}, "4320": {"op": "DUP1"}, "4321": {"op": "PUSH1", "value": "0x0"}, "4323": {"op": "PUSH1", "value": "0x60"}, "4325": {"op": "DUP5"}, "4326": {"op": "DUP7"}, "4327": {"op": "SUB"}, "4328": {"op": "SLT"}, "4329": {"op": "ISZERO"}, "4330": {"op": "PUSH2", "value": "0x10F1"}, "4333": {"op": "JUMPI"}, "4334": {"op": "DUP1"}, "4335": {"op": "DUP2"}, "4336": {"op": "REVERT"}, "4337": {"op": "JUMPDEST"}, "4338": {"op": "DUP4"}, "4339": {"op": "CALLDATALOAD"}, "4340": {"op": "SWAP3"}, "4341": {"op": "POP"}, "4342": {"op": "PUSH1", "value": "0x20"}, "4344": {"op": "DUP1"}, "4345": {"op": "DUP6"}, "4346": {"op": "ADD"}, "4347": {"op": "CALLDATALOAD"}, "4348": {"op": "PUSH1", "value": "0x1"}, "4350": {"op": "PUSH1", "value": "0x1"}, "4352": {"op": "PUSH1", "value": "0x40"}, "4354": {"op": "SHL"}, "4355": {"op": "SUB"}, "4356": {"op": "DUP1"}, "4357": {"op": "DUP3"}, "4358": {"op": "GT"}, "4359": {"op": "ISZERO"}, "4360": {"op": "PUSH2", "value": "0x110F"}, "4363": {"op": "JUMPI"}, "4364": {"op": "DUP4"}, "4365": {"op": "DUP5"}, "4366": {"op": "REVERT"}, "4367": {"op": "JUMPDEST"}, "4368": {"op": "DUP2"}, "4369": {"op": "DUP8"}, "4370": {"op": "ADD"}, "4371": {"op": "SWAP2"}, "4372": {"op": "POP"}, "4373": {"op": "DUP8"}, "4374": {"op": "PUSH1", "value": "0x1F"}, "4376": {"op": "DUP4"}, "4377": {"op": "ADD"}, "4378": {"op": "SLT"}, "4379": {"op": "PUSH2", "value": "0x1122"}, "4382": {"op": "JUMPI"}, "4383": {"op": "DUP4"}, "4384": {"op": "DUP5"}, "4385": {"op": "REVERT"}, "4386": {"op": "JUMPDEST"}, "4387": {"op": "DUP2"}, "4388": {"op": "CALLDATALOAD"}, "4389": {"op": "PUSH2", "value": "0x1130"}, "4392": {"op": "PUSH2", "value": "0xD49"}, "4395": {"op": "DUP3"}, "4396": {"op": "PUSH2", "value": "0x1757"}, "4399": {"jump": "i", "op": "JUMP"}, "4400": {"op": "JUMPDEST"}, "4401": {"op": "DUP2"}, "4402": {"op": "DUP2"}, "4403": {"op": "MSTORE"}, "4404": {"op": "DUP5"}, "4405": {"op": "DUP2"}, "4406": {"op": "ADD"}, "4407": {"op": "SWAP1"}, "4408": {"op": "DUP5"}, "4409": {"op": "DUP7"}, "4410": {"op": "ADD"}, "4411": {"op": "DUP7"}, "4412": {"op": "DUP5"}, "4413": {"op": "MUL"}, "4414": {"op": "DUP7"}, "4415": {"op": "ADD"}, "4416": {"op": "DUP8"}, "4417": {"op": "ADD"}, "4418": {"op": "DUP13"}, "4419": {"op": "LT"}, "4420": {"op": "ISZERO"}, "4421": {"op": "PUSH2", "value": "0x114C"}, "4424": {"op": "JUMPI"}, "4425": {"op": "DUP8"}, "4426": {"op": "DUP9"}, "4427": {"op": "REVERT"}, "4428": {"op": "JUMPDEST"}, "4429": {"op": "DUP8"}, "4430": {"op": "SWAP6"}, "4431": {"op": "POP"}, "4432": {"op": "JUMPDEST"}, "4433": {"op": "DUP4"}, "4434": {"op": "DUP7"}, "4435": {"op": "LT"}, "4436": {"op": "ISZERO"}, "4437": {"op": "PUSH2", "value": "0x1177"}, "4440": {"op": "JUMPI"}, "4441": {"op": "DUP1"}, "4442": {"op": "CALLDATALOAD"}, "4443": {"op": "PUSH2", "value": "0x1163"}, "4446": {"op": "DUP2"}, "4447": {"op": "PUSH2", "value": "0x1781"}, "4450": {"jump": "i", "op": "JUMP"}, "4451": {"op": "JUMPDEST"}, "4452": {"op": "DUP4"}, "4453": {"op": "MSTORE"}, "4454": {"op": "PUSH1", "value": "0x1"}, "4456": {"op": "SWAP6"}, "4457": {"op": "SWAP1"}, "4458": {"op": "SWAP6"}, "4459": {"op": "ADD"}, "4460": {"op": "SWAP5"}, "4461": {"op": "SWAP2"}, "4462": {"op": "DUP7"}, "4463": {"op": "ADD"}, "4464": {"op": "SWAP2"}, "4465": {"op": "DUP7"}, "4466": {"op": "ADD"}, "4467": {"op": "PUSH2", "value": "0x1150"}, "4470": {"op": "JUMP"}, "4471": {"op": "JUMPDEST"}, "4472": {"op": "POP"}, "4473": {"op": "SWAP7"}, "4474": {"op": "POP"}, "4475": {"op": "POP"}, "4476": {"op": "POP"}, "4477": {"op": "PUSH1", "value": "0x40"}, "4479": {"op": "DUP8"}, "4480": {"op": "ADD"}, "4481": {"op": "CALLDATALOAD"}, "4482": {"op": "SWAP3"}, "4483": {"op": "POP"}, "4484": {"op": "DUP1"}, "4485": {"op": "DUP4"}, "4486": {"op": "GT"}, "4487": {"op": "ISZERO"}, "4488": {"op": "PUSH2", "value": "0x118F"}, "4491": {"op": "JUMPI"}, "4492": {"op": "DUP4"}, "4493": {"op": "DUP5"}, "4494": {"op": "REVERT"}, "4495": {"op": "JUMPDEST"}, "4496": {"op": "POP"}, "4497": {"op": "POP"}, "4498": {"op": "PUSH2", "value": "0x119D"}, "4501": {"op": "DUP7"}, "4502": {"op": "DUP3"}, "4503": {"op": "DUP8"}, "4504": {"op": "ADD"}, "4505": {"op": "PUSH2", "value": "0xD29"}, "4508": {"jump": "i", "op": "JUMP"}, "4509": {"op": "JUMPDEST"}, "4510": {"op": "SWAP2"}, "4511": {"op": "POP"}, "4512": {"op": "POP"}, "4513": {"op": "SWAP3"}, "4514": {"op": "POP"}, "4515": {"op": "SWAP3"}, "4516": {"op": "POP"}, "4517": {"op": "SWAP3"}, "4518": {"jump": "o", "op": "JUMP"}, "4519": {"op": "JUMPDEST"}, "4520": {"op": "PUSH1", "value": "0x0"}, "4522": {"op": "DUP1"}, "4523": {"op": "PUSH1", "value": "0x40"}, "4525": {"op": "DUP4"}, "4526": {"op": "DUP6"}, "4527": {"op": "SUB"}, "4528": {"op": "SLT"}, "4529": {"op": "ISZERO"}, "4530": {"op": "PUSH2", "value": "0x11B9"}, "4533": {"op": "JUMPI"}, "4534": {"op": "DUP2"}, "4535": {"op": "DUP3"}, "4536": {"op": "REVERT"}, "4537": {"op": "JUMPDEST"}, "4538": {"op": "DUP3"}, "4539": {"op": "CALLDATALOAD"}, "4540": {"op": "SWAP2"}, "4541": {"op": "POP"}, "4542": {"op": "PUSH1", "value": "0x20"}, "4544": {"op": "DUP4"}, "4545": {"op": "ADD"}, "4546": {"op": "CALLDATALOAD"}, "4547": {"op": "PUSH1", "value": "0x1"}, "4549": {"op": "PUSH1", "value": "0x1"}, "4551": {"op": "PUSH1", "value": "0x40"}, "4553": {"op": "SHL"}, "4554": {"op": "SUB"}, "4555": {"op": "DUP2"}, "4556": {"op": "GT"}, "4557": {"op": "ISZERO"}, "4558": {"op": "PUSH2", "value": "0x11D5"}, "4561": {"op": "JUMPI"}, "4562": {"op": "DUP2"}, "4563": {"op": "DUP3"}, "4564": {"op": "REVERT"}, "4565": {"op": "JUMPDEST"}, "4566": {"op": "PUSH2", "value": "0x10BB"}, "4569": {"op": "DUP6"}, "4570": {"op": "DUP3"}, "4571": {"op": "DUP7"}, "4572": {"op": "ADD"}, "4573": {"op": "PUSH2", "value": "0xD9E"}, "4576": {"jump": "i", "op": "JUMP"}, "4577": {"op": "JUMPDEST"}, "4578": {"op": "PUSH1", "value": "0x0"}, "4580": {"op": "DUP1"}, "4581": {"op": "PUSH1", "value": "0x40"}, "4583": {"op": "DUP4"}, "4584": {"op": "DUP6"}, "4585": {"op": "SUB"}, "4586": {"op": "SLT"}, "4587": {"op": "ISZERO"}, "4588": {"op": "PUSH2", "value": "0x11F3"}, "4591": {"op": "JUMPI"}, "4592": {"op": "DUP2"}, "4593": {"op": "DUP3"}, "4594": {"op": "REVERT"}, "4595": {"op": "JUMPDEST"}, "4596": {"op": "DUP3"}, "4597": {"op": "CALLDATALOAD"}, "4598": {"op": "SWAP2"}, "4599": {"op": "POP"}, "4600": {"op": "PUSH1", "value": "0x20"}, "4602": {"op": "DUP4"}, "4603": {"op": "ADD"}, "4604": {"op": "CALLDATALOAD"}, "4605": {"op": "PUSH2", "value": "0x1205"}, "4608": {"op": "DUP2"}, "4609": {"op": "PUSH2", "value": "0x1781"}, "4612": {"jump": "i", "op": "JUMP"}, "4613": {"op": "JUMPDEST"}, "4614": {"op": "DUP1"}, "4615": {"op": "SWAP2"}, "4616": {"op": "POP"}, "4617": {"op": "POP"}, "4618": {"op": "SWAP3"}, "4619": {"op": "POP"}, "4620": {"op": "SWAP3"}, "4621": {"op": "SWAP1"}, "4622": {"op": "POP"}, "4623": {"jump": "o", "op": "JUMP"}, "4624": {"op": "JUMPDEST"}, "4625": {"op": "PUSH1", "value": "0x0"}, "4627": {"op": "DUP1"}, "4628": {"op": "PUSH1", "value": "0x0"}, "4630": {"op": "DUP1"}, "4631": {"op": "PUSH1", "value": "0x0"}, "4633": {"op": "DUP1"}, "4634": {"op": "PUSH1", "value": "0x0"}, "4636": {"op": "DUP1"}, "4637": {"op": "PUSH2", "value": "0x100"}, "4640": {"op": "DUP10"}, "4641": {"op": "DUP12"}, "4642": {"op": "SUB"}, "4643": {"op": "SLT"}, "4644": {"op": "ISZERO"}, "4645": {"op": "PUSH2", "value": "0x122C"}, "4648": {"op": "JUMPI"}, "4649": {"op": "DUP6"}, "4650": {"op": "DUP7"}, "4651": {"op": "REVERT"}, "4652": {"op": "JUMPDEST"}, "4653": {"op": "DUP9"}, "4654": {"op": "CALLDATALOAD"}, "4655": {"op": "PUSH2", "value": "0x1237"}, "4658": {"op": "DUP2"}, "4659": {"op": "PUSH2", "value": "0x1781"}, "4662": {"jump": "i", "op": "JUMP"}, "4663": {"op": "JUMPDEST"}, "4664": {"op": "SWAP8"}, "4665": {"op": "POP"}, "4666": {"op": "PUSH1", "value": "0x20"}, "4668": {"op": "DUP10"}, "4669": {"op": "ADD"}, "4670": {"op": "CALLDATALOAD"}, "4671": {"op": "SWAP7"}, "4672": {"op": "POP"}, "4673": {"op": "PUSH1", "value": "0x40"}, "4675": {"op": "DUP10"}, "4676": {"op": "ADD"}, "4677": {"op": "CALLDATALOAD"}, "4678": {"op": "PUSH2", "value": "0x124E"}, "4681": {"op": "DUP2"}, "4682": {"op": "PUSH2", "value": "0x1781"}, "4685": {"jump": "i", "op": "JUMP"}, "4686": {"op": "JUMPDEST"}, "4687": {"op": "SWAP6"}, "4688": {"op": "POP"}, "4689": {"op": "PUSH1", "value": "0x60"}, "4691": {"op": "DUP10"}, "4692": {"op": "ADD"}, "4693": {"op": "CALLDATALOAD"}, "4694": {"op": "PUSH2", "value": "0x125E"}, "4697": {"op": "DUP2"}, "4698": {"op": "PUSH2", "value": "0x1781"}, "4701": {"jump": "i", "op": "JUMP"}, "4702": {"op": "JUMPDEST"}, "4703": {"op": "SWAP5"}, "4704": {"op": "POP"}, "4705": {"op": "PUSH1", "value": "0x80"}, "4707": {"op": "DUP10"}, "4708": {"op": "ADD"}, "4709": {"op": "CALLDATALOAD"}, "4710": {"op": "PUSH1", "value": "0x1"}, "4712": {"op": "PUSH1", "value": "0x1"}, "4714": {"op": "PUSH1", "value": "0x40"}, "4716": {"op": "SHL"}, "4717": {"op": "SUB"}, "4718": {"op": "DUP2"}, "4719": {"op": "GT"}, "4720": {"op": "ISZERO"}, "4721": {"op": "PUSH2", "value": "0x1278"}, "4724": {"op": "JUMPI"}, "4725": {"op": "DUP4"}, "4726": {"op": "DUP5"}, "4727": {"op": "REVERT"}, "4728": {"op": "JUMPDEST"}, "4729": {"op": "PUSH2", "value": "0x1284"}, "4732": {"op": "DUP12"}, "4733": {"op": "DUP3"}, "4734": {"op": "DUP13"}, "4735": {"op": "ADD"}, "4736": {"op": "PUSH2", "value": "0xD9E"}, "4739": {"jump": "i", "op": "JUMP"}, "4740": {"op": "JUMPDEST"}, "4741": {"op": "SWAP9"}, "4742": {"op": "SWAP12"}, "4743": {"op": "SWAP8"}, "4744": {"op": "SWAP11"}, "4745": {"op": "POP"}, "4746": {"op": "SWAP6"}, "4747": {"op": "SWAP9"}, "4748": {"op": "SWAP5"}, "4749": {"op": "SWAP8"}, "4750": {"op": "SWAP7"}, "4751": {"op": "PUSH1", "value": "0xA0"}, "4753": {"op": "DUP7"}, "4754": {"op": "ADD"}, "4755": {"op": "CALLDATALOAD"}, "4756": {"op": "SWAP7"}, "4757": {"op": "POP"}, "4758": {"op": "PUSH1", "value": "0xC0"}, "4760": {"op": "DUP7"}, "4761": {"op": "ADD"}, "4762": {"op": "CALLDATALOAD"}, "4763": {"op": "SWAP6"}, "4764": {"op": "PUSH1", "value": "0xE0"}, "4766": {"op": "ADD"}, "4767": {"op": "CALLDATALOAD"}, "4768": {"op": "SWAP5"}, "4769": {"op": "POP"}, "4770": {"op": "SWAP3"}, "4771": {"op": "POP"}, "4772": {"op": "POP"}, "4773": {"op": "POP"}, "4774": {"jump": "o", "op": "JUMP"}, "4775": {"op": "JUMPDEST"}, "4776": {"op": "PUSH1", "value": "0x0"}, "4778": {"op": "PUSH1", "value": "0x20"}, "4780": {"op": "DUP3"}, "4781": {"op": "DUP5"}, "4782": {"op": "SUB"}, "4783": {"op": "SLT"}, "4784": {"op": "ISZERO"}, "4785": {"op": "PUSH2", "value": "0x12B8"}, "4788": {"op": "JUMPI"}, "4789": {"op": "DUP1"}, "4790": {"op": "DUP2"}, "4791": {"op": "REVERT"}, "4792": {"op": "JUMPDEST"}, "4793": {"op": "DUP2"}, "4794": {"op": "CALLDATALOAD"}, "4795": {"op": "PUSH1", "value": "0x3"}, "4797": {"op": "DUP2"}, "4798": {"op": "LT"}, "4799": {"op": "PUSH2", "value": "0x12C6"}, "4802": {"op": "JUMPI"}, "4803": {"op": "DUP2"}, "4804": {"op": "DUP3"}, "4805": {"op": "REVERT"}, "4806": {"op": "JUMPDEST"}, "4807": {"op": "SWAP4"}, "4808": {"op": "SWAP3"}, "4809": {"op": "POP"}, "4810": {"op": "POP"}, "4811": {"op": "POP"}, "4812": {"jump": "o", "op": "JUMP"}, "4813": {"op": "JUMPDEST"}, "4814": {"op": "PUSH1", "value": "0x0"}, "4816": {"op": "PUSH1", "value": "0x20"}, "4818": {"op": "DUP3"}, "4819": {"op": "DUP5"}, "4820": {"op": "SUB"}, "4821": {"op": "SLT"}, "4822": {"op": "ISZERO"}, "4823": {"op": "PUSH2", "value": "0x12DE"}, "4826": {"op": "JUMPI"}, "4827": {"op": "DUP1"}, "4828": {"op": "DUP2"}, "4829": {"op": "REVERT"}, "4830": {"op": "JUMPDEST"}, "4831": {"op": "DUP2"}, "4832": {"op": "CALLDATALOAD"}, "4833": {"op": "PUSH1", "value": "0x1"}, "4835": {"op": "PUSH1", "value": "0x1"}, "4837": {"op": "PUSH1", "value": "0x40"}, "4839": {"op": "SHL"}, "4840": {"op": "SUB"}, "4841": {"op": "DUP1"}, "4842": {"op": "DUP3"}, "4843": {"op": "GT"}, "4844": {"op": "ISZERO"}, "4845": {"op": "PUSH2", "value": "0x12F4"}, "4848": {"op": "JUMPI"}, "4849": {"op": "DUP3"}, "4850": {"op": "DUP4"}, "4851": {"op": "REVERT"}, "4852": {"op": "JUMPDEST"}, "4853": {"op": "DUP2"}, "4854": {"op": "DUP5"}, "4855": {"op": "ADD"}, "4856": {"op": "SWAP2"}, "4857": {"op": "POP"}, "4858": {"op": "PUSH2", "value": "0x120"}, "4861": {"op": "DUP1"}, "4862": {"op": "DUP4"}, "4863": {"op": "DUP8"}, "4864": {"op": "SUB"}, "4865": {"op": "SLT"}, "4866": {"op": "ISZERO"}, "4867": {"op": "PUSH2", "value": "0x130A"}, "4870": {"op": "JUMPI"}, "4871": {"op": "DUP4"}, "4872": {"op": "DUP5"}, "4873": {"op": "REVERT"}, "4874": {"op": "JUMPDEST"}, "4875": {"op": "PUSH2", "value": "0x1313"}, "4878": {"op": "DUP2"}, "4879": {"op": "PUSH2", "value": "0x1734"}, "4882": {"jump": "i", "op": "JUMP"}, "4883": {"op": "JUMPDEST"}, "4884": {"op": "SWAP1"}, "4885": {"op": "POP"}, "4886": {"op": "PUSH2", "value": "0x131E"}, "4889": {"op": "DUP4"}, "4890": {"op": "PUSH2", "value": "0xD19"}, "4893": {"jump": "i", "op": "JUMP"}, "4894": {"op": "JUMPDEST"}, "4895": {"op": "DUP2"}, "4896": {"op": "MSTORE"}, "4897": {"op": "PUSH1", "value": "0x20"}, "4899": {"op": "DUP4"}, "4900": {"op": "ADD"}, "4901": {"op": "CALLDATALOAD"}, "4902": {"op": "PUSH1", "value": "0x20"}, "4904": {"op": "DUP3"}, "4905": {"op": "ADD"}, "4906": {"op": "MSTORE"}, "4907": {"op": "PUSH2", "value": "0x1336"}, "4910": {"op": "PUSH1", "value": "0x40"}, "4912": {"op": "DUP5"}, "4913": {"op": "ADD"}, "4914": {"op": "PUSH2", "value": "0xD19"}, "4917": {"jump": "i", "op": "JUMP"}, "4918": {"op": "JUMPDEST"}, "4919": {"op": "PUSH1", "value": "0x40"}, "4921": {"op": "DUP3"}, "4922": {"op": "ADD"}, "4923": {"op": "MSTORE"}, "4924": {"op": "PUSH2", "value": "0x1347"}, "4927": {"op": "PUSH1", "value": "0x60"}, "4929": {"op": "DUP5"}, "4930": {"op": "ADD"}, "4931": {"op": "PUSH2", "value": "0xD19"}, "4934": {"jump": "i", "op": "JUMP"}, "4935": {"op": "JUMPDEST"}, "4936": {"op": "PUSH1", "value": "0x60"}, "4938": {"op": "DUP3"}, "4939": {"op": "ADD"}, "4940": {"op": "MSTORE"}, "4941": {"op": "PUSH1", "value": "0x80"}, "4943": {"op": "DUP4"}, "4944": {"op": "ADD"}, "4945": {"op": "CALLDATALOAD"}, "4946": {"op": "DUP3"}, "4947": {"op": "DUP2"}, "4948": {"op": "GT"}, "4949": {"op": "ISZERO"}, "4950": {"op": "PUSH2", "value": "0x135D"}, "4953": {"op": "JUMPI"}, "4954": {"op": "DUP5"}, "4955": {"op": "DUP6"}, "4956": {"op": "REVERT"}, "4957": {"op": "JUMPDEST"}, "4958": {"op": "PUSH2", "value": "0x1369"}, "4961": {"op": "DUP8"}, "4962": {"op": "DUP3"}, "4963": {"op": "DUP7"}, "4964": {"op": "ADD"}, "4965": {"op": "PUSH2", "value": "0xD9E"}, "4968": {"jump": "i", "op": "JUMP"}, "4969": {"op": "JUMPDEST"}, "4970": {"op": "PUSH1", "value": "0x80"}, "4972": {"op": "DUP4"}, "4973": {"op": "ADD"}, "4974": {"op": "MSTORE"}, "4975": {"op": "POP"}, "4976": {"op": "PUSH1", "value": "0xA0"}, "4978": {"op": "DUP4"}, "4979": {"op": "ADD"}, "4980": {"op": "CALLDATALOAD"}, "4981": {"op": "PUSH1", "value": "0xA0"}, "4983": {"op": "DUP3"}, "4984": {"op": "ADD"}, "4985": {"op": "MSTORE"}, "4986": {"op": "PUSH1", "value": "0xC0"}, "4988": {"op": "DUP4"}, "4989": {"op": "ADD"}, "4990": {"op": "CALLDATALOAD"}, "4991": {"op": "PUSH1", "value": "0xC0"}, "4993": {"op": "DUP3"}, "4994": {"op": "ADD"}, "4995": {"op": "MSTORE"}, "4996": {"op": "PUSH1", "value": "0xE0"}, "4998": {"op": "DUP4"}, "4999": {"op": "ADD"}, "5000": {"op": "CALLDATALOAD"}, "5001": {"op": "DUP3"}, "5002": {"op": "DUP2"}, "5003": {"op": "GT"}, "5004": {"op": "ISZERO"}, "5005": {"op": "PUSH2", "value": "0x1394"}, "5008": {"op": "JUMPI"}, "5009": {"op": "DUP5"}, "5010": {"op": "DUP6"}, "5011": {"op": "REVERT"}, "5012": {"op": "JUMPDEST"}, "5013": {"op": "PUSH2", "value": "0x13A0"}, "5016": {"op": "DUP8"}, "5017": {"op": "DUP3"}, "5018": {"op": "DUP7"}, "5019": {"op": "ADD"}, "5020": {"op": "PUSH2", "value": "0xD9E"}, "5023": {"jump": "i", "op": "JUMP"}, "5024": {"op": "JUMPDEST"}, "5025": {"op": "PUSH1", "value": "0xE0"}, "5027": {"op": "DUP4"}, "5028": {"op": "ADD"}, "5029": {"op": "MSTORE"}, "5030": {"op": "POP"}, "5031": {"op": "PUSH2", "value": "0x100"}, "5034": {"op": "SWAP3"}, "5035": {"op": "DUP4"}, "5036": {"op": "ADD"}, "5037": {"op": "CALLDATALOAD"}, "5038": {"op": "SWAP3"}, "5039": {"op": "DUP2"}, "5040": {"op": "ADD"}, "5041": {"op": "SWAP3"}, "5042": {"op": "SWAP1"}, "5043": {"op": "SWAP3"}, "5044": {"op": "MSTORE"}, "5045": {"op": "POP"}, "5046": {"op": "SWAP4"}, "5047": {"op": "SWAP3"}, "5048": {"op": "POP"}, "5049": {"op": "POP"}, "5050": {"op": "POP"}, "5051": {"jump": "o", "op": "JUMP"}, "5052": {"op": "JUMPDEST"}, "5053": {"op": "PUSH1", "value": "0x0"}, "5055": {"op": "PUSH1", "value": "0x20"}, "5057": {"op": "DUP3"}, "5058": {"op": "DUP5"}, "5059": {"op": "SUB"}, "5060": {"op": "SLT"}, "5061": {"op": "ISZERO"}, "5062": {"op": "PUSH2", "value": "0x13CD"}, "5065": {"op": "JUMPI"}, "5066": {"op": "DUP1"}, "5067": {"op": "DUP2"}, "5068": {"op": "REVERT"}, "5069": {"op": "JUMPDEST"}, "5070": {"op": "POP"}, "5071": {"op": "MLOAD"}, "5072": {"op": "SWAP2"}, "5073": {"op": "SWAP1"}, "5074": {"op": "POP"}, "5075": {"jump": "o", "op": "JUMP"}, "5076": {"op": "JUMPDEST"}, "5077": {"op": "PUSH1", "value": "0x1"}, "5079": {"op": "PUSH1", "value": "0x1"}, "5081": {"op": "PUSH1", "value": "0xA0"}, "5083": {"op": "SHL"}, "5084": {"op": "SUB"}, "5085": {"op": "AND"}, "5086": {"op": "SWAP1"}, "5087": {"op": "MSTORE"}, "5088": {"jump": "o", "op": "JUMP"}, "5089": {"op": "JUMPDEST"}, "5090": {"op": "PUSH1", "value": "0x0"}, "5092": {"op": "DUP2"}, "5093": {"op": "MLOAD"}, "5094": {"op": "DUP1"}, "5095": {"op": "DUP5"}, "5096": {"op": "MSTORE"}, "5097": {"op": "PUSH1", "value": "0x20"}, "5099": {"op": "DUP1"}, "5100": {"op": "DUP6"}, "5101": {"op": "ADD"}, "5102": {"op": "SWAP5"}, "5103": {"op": "POP"}, "5104": {"op": "DUP1"}, "5105": {"op": "DUP5"}, "5106": {"op": "ADD"}, "5107": {"op": "DUP4"}, "5108": {"op": "JUMPDEST"}, "5109": {"op": "DUP4"}, "5110": {"op": "DUP2"}, "5111": {"op": "LT"}, "5112": {"op": "ISZERO"}, "5113": {"op": "PUSH2", "value": "0x1419"}, "5116": {"op": "JUMPI"}, "5117": {"op": "DUP2"}, "5118": {"op": "MLOAD"}, "5119": {"op": "PUSH1", "value": "0x1"}, "5121": {"op": "PUSH1", "value": "0x1"}, "5123": {"op": "PUSH1", "value": "0xA0"}, "5125": {"op": "SHL"}, "5126": {"op": "SUB"}, "5127": {"op": "AND"}, "5128": {"op": "DUP8"}, "5129": {"op": "MSTORE"}, "5130": {"op": "SWAP6"}, "5131": {"op": "DUP3"}, "5132": {"op": "ADD"}, "5133": {"op": "SWAP6"}, "5134": {"op": "SWAP1"}, "5135": {"op": "DUP3"}, "5136": {"op": "ADD"}, "5137": {"op": "SWAP1"}, "5138": {"op": "PUSH1", "value": "0x1"}, "5140": {"op": "ADD"}, "5141": {"op": "PUSH2", "value": "0x13F4"}, "5144": {"op": "JUMP"}, "5145": {"op": "JUMPDEST"}, "5146": {"op": "POP"}, "5147": {"op": "SWAP5"}, "5148": {"op": "SWAP6"}, "5149": {"op": "SWAP5"}, "5150": {"op": "POP"}, "5151": {"op": "POP"}, "5152": {"op": "POP"}, "5153": {"op": "POP"}, "5154": {"op": "POP"}, "5155": {"jump": "o", "op": "JUMP"}, "5156": {"op": "JUMPDEST"}, "5157": {"op": "PUSH1", "value": "0x0"}, "5159": {"op": "DUP2"}, "5160": {"op": "MLOAD"}, "5161": {"op": "DUP1"}, "5162": {"op": "DUP5"}, "5163": {"op": "MSTORE"}, "5164": {"op": "PUSH1", "value": "0x20"}, "5166": {"op": "DUP1"}, "5167": {"op": "DUP6"}, "5168": {"op": "ADD"}, "5169": {"op": "SWAP5"}, "5170": {"op": "POP"}, "5171": {"op": "DUP1"}, "5172": {"op": "DUP5"}, "5173": {"op": "ADD"}, "5174": {"op": "DUP4"}, "5175": {"op": "JUMPDEST"}, "5176": {"op": "DUP4"}, "5177": {"op": "DUP2"}, "5178": {"op": "LT"}, "5179": {"op": "ISZERO"}, "5180": {"op": "PUSH2", "value": "0x1419"}, "5183": {"op": "JUMPI"}, "5184": {"op": "DUP2"}, "5185": {"op": "MLOAD"}, "5186": {"op": "DUP8"}, "5187": {"op": "MSTORE"}, "5188": {"op": "SWAP6"}, "5189": {"op": "DUP3"}, "5190": {"op": "ADD"}, "5191": {"op": "SWAP6"}, "5192": {"op": "SWAP1"}, "5193": {"op": "DUP3"}, "5194": {"op": "ADD"}, "5195": {"op": "SWAP1"}, "5196": {"op": "PUSH1", "value": "0x1"}, "5198": {"op": "ADD"}, "5199": {"op": "PUSH2", "value": "0x1437"}, "5202": {"op": "JUMP"}, "5203": {"op": "JUMPDEST"}, "5204": {"op": "PUSH1", "value": "0x0"}, "5206": {"op": "DUP2"}, "5207": {"op": "MLOAD"}, "5208": {"op": "DUP1"}, "5209": {"op": "DUP5"}, "5210": {"op": "MSTORE"}, "5211": {"op": "DUP2"}, "5212": {"op": "JUMPDEST"}, "5213": {"op": "DUP2"}, "5214": {"op": "DUP2"}, "5215": {"op": "LT"}, "5216": {"op": "ISZERO"}, "5217": {"op": "PUSH2", "value": "0x1478"}, "5220": {"op": "JUMPI"}, "5221": {"op": "PUSH1", "value": "0x20"}, "5223": {"op": "DUP2"}, "5224": {"op": "DUP6"}, "5225": {"op": "ADD"}, "5226": {"op": "DUP2"}, "5227": {"op": "ADD"}, "5228": {"op": "MLOAD"}, "5229": {"op": "DUP7"}, "5230": {"op": "DUP4"}, "5231": {"op": "ADD"}, "5232": {"op": "DUP3"}, "5233": {"op": "ADD"}, "5234": {"op": "MSTORE"}, "5235": {"op": "ADD"}, "5236": {"op": "PUSH2", "value": "0x145C"}, "5239": {"op": "JUMP"}, "5240": {"op": "JUMPDEST"}, "5241": {"op": "DUP2"}, "5242": {"op": "DUP2"}, "5243": {"op": "GT"}, "5244": {"op": "ISZERO"}, "5245": {"op": "PUSH2", "value": "0x1489"}, "5248": {"op": "JUMPI"}, "5249": {"op": "DUP3"}, "5250": {"op": "PUSH1", "value": "0x20"}, "5252": {"op": "DUP4"}, "5253": {"op": "DUP8"}, "5254": {"op": "ADD"}, "5255": {"op": "ADD"}, "5256": {"op": "MSTORE"}, "5257": {"op": "JUMPDEST"}, "5258": {"op": "POP"}, "5259": {"op": "PUSH1", "value": "0x1F"}, "5261": {"op": "ADD"}, "5262": {"op": "PUSH1", "value": "0x1F"}, "5264": {"op": "NOT"}, "5265": {"op": "AND"}, "5266": {"op": "SWAP3"}, "5267": {"op": "SWAP1"}, "5268": {"op": "SWAP3"}, "5269": {"op": "ADD"}, "5270": {"op": "PUSH1", "value": "0x20"}, "5272": {"op": "ADD"}, "5273": {"op": "SWAP3"}, "5274": {"op": "SWAP2"}, "5275": {"op": "POP"}, "5276": {"op": "POP"}, "5277": {"jump": "o", "op": "JUMP"}, "5278": {"op": "JUMPDEST"}, "5279": {"op": "PUSH1", "value": "0x0"}, "5281": {"op": "PUSH2", "value": "0x120"}, "5284": {"op": "DUP3"}, "5285": {"op": "MLOAD"}, "5286": {"op": "PUSH1", "value": "0x2"}, "5288": {"op": "DUP2"}, "5289": {"op": "LT"}, "5290": {"op": "PUSH2", "value": "0x14AF"}, "5293": {"op": "JUMPI"}, "5294": {"op": "INVALID"}, "5295": {"op": "JUMPDEST"}, "5296": {"op": "DUP1"}, "5297": {"op": "DUP6"}, "5298": {"op": "MSTORE"}, "5299": {"op": "POP"}, "5300": {"op": "PUSH1", "value": "0x20"}, "5302": {"op": "DUP4"}, "5303": {"op": "ADD"}, "5304": {"op": "MLOAD"}, "5305": {"op": "PUSH2", "value": "0x14C5"}, "5308": {"op": "PUSH1", "value": "0x20"}, "5310": {"op": "DUP7"}, "5311": {"op": "ADD"}, "5312": {"op": "DUP3"}, "5313": {"op": "PUSH2", "value": "0x13D4"}, "5316": {"jump": "i", "op": "JUMP"}, "5317": {"op": "JUMPDEST"}, "5318": {"op": "POP"}, "5319": {"op": "PUSH1", "value": "0x40"}, "5321": {"op": "DUP4"}, "5322": {"op": "ADD"}, "5323": {"op": "MLOAD"}, "5324": {"op": "PUSH2", "value": "0x14D8"}, "5327": {"op": "PUSH1", "value": "0x40"}, "5329": {"op": "DUP7"}, "5330": {"op": "ADD"}, "5331": {"op": "DUP3"}, "5332": {"op": "PUSH2", "value": "0x13D4"}, "5335": {"jump": "i", "op": "JUMP"}, "5336": {"op": "JUMPDEST"}, "5337": {"op": "POP"}, "5338": {"op": "PUSH1", "value": "0x60"}, "5340": {"op": "DUP4"}, "5341": {"op": "ADD"}, "5342": {"op": "MLOAD"}, "5343": {"op": "PUSH1", "value": "0x60"}, "5345": {"op": "DUP6"}, "5346": {"op": "ADD"}, "5347": {"op": "MSTORE"}, "5348": {"op": "PUSH1", "value": "0x80"}, "5350": {"op": "DUP4"}, "5351": {"op": "ADD"}, "5352": {"op": "MLOAD"}, "5353": {"op": "PUSH1", "value": "0x80"}, "5355": {"op": "DUP6"}, "5356": {"op": "ADD"}, "5357": {"op": "MSTORE"}, "5358": {"op": "PUSH1", "value": "0xA0"}, "5360": {"op": "DUP4"}, "5361": {"op": "ADD"}, "5362": {"op": "MLOAD"}, "5363": {"op": "PUSH1", "value": "0xA0"}, "5365": {"op": "DUP6"}, "5366": {"op": "ADD"}, "5367": {"op": "MSTORE"}, "5368": {"op": "PUSH1", "value": "0xC0"}, "5370": {"op": "DUP4"}, "5371": {"op": "ADD"}, "5372": {"op": "MLOAD"}, "5373": {"op": "PUSH2", "value": "0x1509"}, "5376": {"op": "PUSH1", "value": "0xC0"}, "5378": {"op": "DUP7"}, "5379": {"op": "ADD"}, "5380": {"op": "DUP3"}, "5381": {"op": "PUSH2", "value": "0x13D4"}, "5384": {"jump": "i", "op": "JUMP"}, "5385": {"op": "JUMPDEST"}, "5386": {"op": "POP"}, "5387": {"op": "PUSH1", "value": "0xE0"}, "5389": {"op": "DUP4"}, "5390": {"op": "ADD"}, "5391": {"op": "MLOAD"}, "5392": {"op": "PUSH2", "value": "0x151C"}, "5395": {"op": "PUSH1", "value": "0xE0"}, "5397": {"op": "DUP7"}, "5398": {"op": "ADD"}, "5399": {"op": "DUP3"}, "5400": {"op": "PUSH2", "value": "0x13D4"}, "5403": {"jump": "i", "op": "JUMP"}, "5404": {"op": "JUMPDEST"}, "5405": {"op": "POP"}, "5406": {"op": "PUSH2", "value": "0x100"}, "5409": {"op": "DUP1"}, "5410": {"op": "DUP5"}, "5411": {"op": "ADD"}, "5412": {"op": "MLOAD"}, "5413": {"op": "DUP3"}, "5414": {"op": "DUP3"}, "5415": {"op": "DUP8"}, "5416": {"op": "ADD"}, "5417": {"op": "MSTORE"}, "5418": {"op": "PUSH2", "value": "0x1535"}, "5421": {"op": "DUP4"}, "5422": {"op": "DUP8"}, "5423": {"op": "ADD"}, "5424": {"op": "DUP3"}, "5425": {"op": "PUSH2", "value": "0x1453"}, "5428": {"jump": "i", "op": "JUMP"}, "5429": {"op": "JUMPDEST"}, "5430": {"op": "SWAP7"}, "5431": {"op": "SWAP6"}, "5432": {"op": "POP"}, "5433": {"op": "POP"}, "5434": {"op": "POP"}, "5435": {"op": "POP"}, "5436": {"op": "POP"}, "5437": {"op": "POP"}, "5438": {"jump": "o", "op": "JUMP"}, "5439": {"op": "JUMPDEST"}, "5440": {"op": "PUSH1", "value": "0x0"}, "5442": {"op": "PUSH1", "value": "0x60"}, "5444": {"op": "DUP3"}, "5445": {"op": "MSTORE"}, "5446": {"op": "PUSH2", "value": "0x1552"}, "5449": {"op": "PUSH1", "value": "0x60"}, "5451": {"op": "DUP4"}, "5452": {"op": "ADD"}, "5453": {"op": "DUP7"}, "5454": {"op": "PUSH2", "value": "0x13E1"}, "5457": {"jump": "i", "op": "JUMP"}, "5458": {"op": "JUMPDEST"}, "5459": {"op": "DUP3"}, "5460": {"op": "DUP2"}, "5461": {"op": "SUB"}, "5462": {"op": "PUSH1", "value": "0x20"}, "5464": {"op": "DUP5"}, "5465": {"op": "DUP2"}, "5466": {"op": "ADD"}, "5467": {"op": "SWAP2"}, "5468": {"op": "SWAP1"}, "5469": {"op": "SWAP2"}, "5470": {"op": "MSTORE"}, "5471": {"op": "DUP6"}, "5472": {"op": "MLOAD"}, "5473": {"op": "DUP1"}, "5474": {"op": "DUP4"}, "5475": {"op": "MSTORE"}, "5476": {"op": "DUP7"}, "5477": {"op": "DUP3"}, "5478": {"op": "ADD"}, "5479": {"op": "SWAP3"}, "5480": {"op": "DUP3"}, "5481": {"op": "ADD"}, "5482": {"op": "SWAP1"}, "5483": {"op": "DUP5"}, "5484": {"op": "JUMPDEST"}, "5485": {"op": "DUP2"}, "5486": {"op": "DUP2"}, "5487": {"op": "LT"}, "5488": {"op": "ISZERO"}, "5489": {"op": "PUSH2", "value": "0x1588"}, "5492": {"op": "JUMPI"}, "5493": {"op": "DUP5"}, "5494": {"op": "MLOAD"}, "5495": {"op": "DUP4"}, "5496": {"op": "MSTORE"}, "5497": {"op": "SWAP4"}, "5498": {"op": "DUP4"}, "5499": {"op": "ADD"}, "5500": {"op": "SWAP4"}, "5501": {"op": "SWAP2"}, "5502": {"op": "DUP4"}, "5503": {"op": "ADD"}, "5504": {"op": "SWAP2"}, "5505": {"op": "PUSH1", "value": "0x1"}, "5507": {"op": "ADD"}, "5508": {"op": "PUSH2", "value": "0x156C"}, "5511": {"op": "JUMP"}, "5512": {"op": "JUMPDEST"}, "5513": {"op": "POP"}, "5514": {"op": "POP"}, "5515": {"op": "DUP5"}, "5516": {"op": "DUP2"}, "5517": {"op": "SUB"}, "5518": {"op": "PUSH1", "value": "0x40"}, "5520": {"op": "DUP7"}, "5521": {"op": "ADD"}, "5522": {"op": "MSTORE"}, "5523": {"op": "PUSH2", "value": "0x159C"}, "5526": {"op": "DUP2"}, "5527": {"op": "DUP8"}, "5528": {"op": "PUSH2", "value": "0x1424"}, "5531": {"jump": "i", "op": "JUMP"}, "5532": {"op": "JUMPDEST"}, "5533": {"op": "SWAP9"}, "5534": {"op": "SWAP8"}, "5535": {"op": "POP"}, "5536": {"op": "POP"}, "5537": {"op": "POP"}, "5538": {"op": "POP"}, "5539": {"op": "POP"}, "5540": {"op": "POP"}, "5541": {"op": "POP"}, "5542": {"op": "POP"}, "5543": {"jump": "o", "op": "JUMP"}, "5544": {"op": "JUMPDEST"}, "5545": {"op": "PUSH1", "value": "0x0"}, "5547": {"op": "PUSH1", "value": "0x40"}, "5549": {"op": "DUP3"}, "5550": {"op": "MSTORE"}, "5551": {"op": "PUSH2", "value": "0x15BB"}, "5554": {"op": "PUSH1", "value": "0x40"}, "5556": {"op": "DUP4"}, "5557": {"op": "ADD"}, "5558": {"op": "DUP6"}, "5559": {"op": "PUSH2", "value": "0x13E1"}, "5562": {"jump": "i", "op": "JUMP"}, "5563": {"op": "JUMPDEST"}, "5564": {"op": "DUP3"}, "5565": {"op": "DUP2"}, "5566": {"op": "SUB"}, "5567": {"op": "PUSH1", "value": "0x20"}, "5569": {"op": "DUP5"}, "5570": {"op": "ADD"}, "5571": {"op": "MSTORE"}, "5572": {"op": "PUSH2", "value": "0x15CD"}, "5575": {"op": "DUP2"}, "5576": {"op": "DUP6"}, "5577": {"op": "PUSH2", "value": "0x1424"}, "5580": {"jump": "i", "op": "JUMP"}, "5581": {"op": "JUMPDEST"}, "5582": {"op": "SWAP6"}, "5583": {"op": "SWAP5"}, "5584": {"op": "POP"}, "5585": {"op": "POP"}, "5586": {"op": "POP"}, "5587": {"op": "POP"}, "5588": {"op": "POP"}, "5589": {"jump": "o", "op": "JUMP"}, "5590": {"op": "JUMPDEST"}, "5591": {"op": "PUSH1", "value": "0x0"}, "5593": {"op": "PUSH1", "value": "0x40"}, "5595": {"op": "DUP3"}, "5596": {"op": "MSTORE"}, "5597": {"op": "PUSH2", "value": "0x15BB"}, "5600": {"op": "PUSH1", "value": "0x40"}, "5602": {"op": "DUP4"}, "5603": {"op": "ADD"}, "5604": {"op": "DUP6"}, "5605": {"op": "PUSH2", "value": "0x1424"}, "5608": {"jump": "i", "op": "JUMP"}, "5609": {"op": "JUMPDEST"}, "5610": {"op": "SWAP1"}, "5611": {"op": "DUP2"}, "5612": {"op": "MSTORE"}, "5613": {"op": "PUSH1", "value": "0x20"}, "5615": {"op": "ADD"}, "5616": {"op": "SWAP1"}, "5617": {"jump": "o", "op": "JUMP"}, "5618": {"op": "JUMPDEST"}, "5619": {"op": "DUP8"}, "5620": {"op": "DUP2"}, "5621": {"op": "MSTORE"}, "5622": {"op": "PUSH1", "value": "0x1"}, "5624": {"op": "PUSH1", "value": "0x1"}, "5626": {"op": "PUSH1", "value": "0xA0"}, "5628": {"op": "SHL"}, "5629": {"op": "SUB"}, "5630": {"op": "DUP8"}, "5631": {"op": "DUP2"}, "5632": {"op": "AND"}, "5633": {"op": "PUSH1", "value": "0x20"}, "5635": {"op": "DUP4"}, "5636": {"op": "ADD"}, "5637": {"op": "MSTORE"}, "5638": {"op": "DUP7"}, "5639": {"op": "AND"}, "5640": {"op": "PUSH1", "value": "0x40"}, "5642": {"op": "DUP3"}, "5643": {"op": "ADD"}, "5644": {"op": "MSTORE"}, "5645": {"op": "PUSH1", "value": "0xE0"}, "5647": {"op": "PUSH1", "value": "0x60"}, "5649": {"op": "DUP3"}, "5650": {"op": "ADD"}, "5651": {"op": "DUP2"}, "5652": {"op": "SWAP1"}, "5653": {"op": "MSTORE"}, "5654": {"op": "PUSH1", "value": "0x0"}, "5656": {"op": "SWAP1"}, "5657": {"op": "PUSH2", "value": "0x1624"}, "5660": {"op": "SWAP1"}, "5661": {"op": "DUP4"}, "5662": {"op": "ADD"}, "5663": {"op": "DUP8"}, "5664": {"op": "PUSH2", "value": "0x1424"}, "5667": {"jump": "i", "op": "JUMP"}, "5668": {"op": "JUMPDEST"}, "5669": {"op": "DUP6"}, "5670": {"op": "PUSH1", "value": "0x80"}, "5672": {"op": "DUP5"}, "5673": {"op": "ADD"}, "5674": {"op": "MSTORE"}, "5675": {"op": "DUP5"}, "5676": {"op": "PUSH1", "value": "0xA0"}, "5678": {"op": "DUP5"}, "5679": {"op": "ADD"}, "5680": {"op": "MSTORE"}, "5681": {"op": "DUP3"}, "5682": {"op": "DUP2"}, "5683": {"op": "SUB"}, "5684": {"op": "PUSH1", "value": "0xC0"}, "5686": {"op": "DUP5"}, "5687": {"op": "ADD"}, "5688": {"op": "MSTORE"}, "5689": {"op": "PUSH2", "value": "0x1642"}, "5692": {"op": "DUP2"}, "5693": {"op": "DUP6"}, "5694": {"op": "PUSH2", "value": "0x1453"}, "5697": {"jump": "i", "op": "JUMP"}, "5698": {"op": "JUMPDEST"}, "5699": {"op": "SWAP11"}, "5700": {"op": "SWAP10"}, "5701": {"op": "POP"}, "5702": {"op": "POP"}, "5703": {"op": "POP"}, "5704": {"op": "POP"}, "5705": {"op": "POP"}, "5706": {"op": "POP"}, "5707": {"op": "POP"}, "5708": {"op": "POP"}, "5709": {"op": "POP"}, "5710": {"op": "POP"}, "5711": {"jump": "o", "op": "JUMP"}, "5712": {"op": "JUMPDEST"}, "5713": {"op": "PUSH1", "value": "0x1"}, "5715": {"op": "PUSH1", "value": "0x1"}, "5717": {"op": "PUSH1", "value": "0xA0"}, "5719": {"op": "SHL"}, "5720": {"op": "SUB"}, "5721": {"op": "SWAP2"}, "5722": {"op": "SWAP1"}, "5723": {"op": "SWAP2"}, "5724": {"op": "AND"}, "5725": {"op": "DUP2"}, "5726": {"op": "MSTORE"}, "5727": {"op": "PUSH1", "value": "0x20"}, "5729": {"op": "ADD"}, "5730": {"op": "SWAP1"}, "5731": {"jump": "o", "op": "JUMP"}, "5732": {"op": "JUMPDEST"}, "5733": {"op": "PUSH1", "value": "0x40"}, "5735": {"op": "DUP2"}, "5736": {"op": "ADD"}, "5737": {"op": "PUSH2", "value": "0x1671"}, "5740": {"op": "DUP5"}, "5741": {"op": "PUSH2", "value": "0x1774"}, "5744": {"jump": "i", "op": "JUMP"}, "5745": {"op": "JUMPDEST"}, "5746": {"op": "SWAP3"}, "5747": {"op": "DUP2"}, "5748": {"op": "MSTORE"}, "5749": {"op": "PUSH1", "value": "0x20"}, "5751": {"op": "ADD"}, "5752": {"op": "MSTORE"}, "5753": {"op": "SWAP1"}, "5754": {"jump": "o", "op": "JUMP"}, "5755": {"op": "JUMPDEST"}, "5756": {"op": "PUSH1", "value": "0x0"}, "5758": {"op": "PUSH2", "value": "0x1686"}, "5761": {"op": "DUP6"}, "5762": {"op": "PUSH2", "value": "0x1774"}, "5765": {"jump": "i", "op": "JUMP"}, "5766": {"op": "JUMPDEST"}, "5767": {"op": "DUP5"}, "5768": {"op": "DUP3"}, "5769": {"op": "MSTORE"}, "5770": {"op": "PUSH1", "value": "0x60"}, "5772": {"op": "PUSH1", "value": "0x20"}, "5774": {"op": "DUP4"}, "5775": {"op": "ADD"}, "5776": {"op": "MSTORE"}, "5777": {"op": "PUSH2", "value": "0x169D"}, "5780": {"op": "PUSH1", "value": "0x60"}, "5782": {"op": "DUP4"}, "5783": {"op": "ADD"}, "5784": {"op": "DUP6"}, "5785": {"op": "PUSH2", "value": "0x1424"}, "5788": {"jump": "i", "op": "JUMP"}, "5789": {"op": "JUMPDEST"}, "5790": {"op": "SWAP1"}, "5791": {"op": "POP"}, "5792": {"op": "PUSH3", "value": "0xFFFFFF"}, "5796": {"op": "DUP4"}, "5797": {"op": "AND"}, "5798": {"op": "PUSH1", "value": "0x40"}, "5800": {"op": "DUP4"}, "5801": {"op": "ADD"}, "5802": {"op": "MSTORE"}, "5803": {"op": "SWAP5"}, "5804": {"op": "SWAP4"}, "5805": {"op": "POP"}, "5806": {"op": "POP"}, "5807": {"op": "POP"}, "5808": {"op": "POP"}, "5809": {"jump": "o", "op": "JUMP"}, "5810": {"op": "JUMPDEST"}, "5811": {"op": "PUSH1", "value": "0x0"}, "5813": {"op": "PUSH1", "value": "0x80"}, "5815": {"op": "DUP3"}, "5816": {"op": "MSTORE"}, "5817": {"op": "PUSH2", "value": "0x16C5"}, "5820": {"op": "PUSH1", "value": "0x80"}, "5822": {"op": "DUP4"}, "5823": {"op": "ADD"}, "5824": {"op": "DUP8"}, "5825": {"op": "PUSH2", "value": "0x149E"}, "5828": {"jump": "i", "op": "JUMP"}, "5829": {"op": "JUMPDEST"}, "5830": {"op": "DUP3"}, "5831": {"op": "DUP2"}, "5832": {"op": "SUB"}, "5833": {"op": "PUSH1", "value": "0x20"}, "5835": {"op": "DUP5"}, "5836": {"op": "ADD"}, "5837": {"op": "MSTORE"}, "5838": {"op": "PUSH2", "value": "0x16D7"}, "5841": {"op": "DUP2"}, "5842": {"op": "DUP8"}, "5843": {"op": "PUSH2", "value": "0x1424"}, "5846": {"jump": "i", "op": "JUMP"}, "5847": {"op": "JUMPDEST"}, "5848": {"op": "PUSH1", "value": "0x40"}, "5850": {"op": "DUP5"}, "5851": {"op": "ADD"}, "5852": {"op": "SWAP6"}, "5853": {"op": "SWAP1"}, "5854": {"op": "SWAP6"}, "5855": {"op": "MSTORE"}, "5856": {"op": "POP"}, "5857": {"op": "POP"}, "5858": {"op": "PUSH1", "value": "0x60"}, "5860": {"op": "ADD"}, "5861": {"op": "MSTORE"}, "5862": {"op": "SWAP3"}, "5863": {"op": "SWAP2"}, "5864": {"op": "POP"}, "5865": {"op": "POP"}, "5866": {"jump": "o", "op": "JUMP"}, "5867": {"op": "JUMPDEST"}, "5868": {"op": "PUSH1", "value": "0x0"}, "5870": {"op": "PUSH1", "value": "0x60"}, "5872": {"op": "DUP3"}, "5873": {"op": "MSTORE"}, "5874": {"op": "PUSH2", "value": "0x16FE"}, "5877": {"op": "PUSH1", "value": "0x60"}, "5879": {"op": "DUP4"}, "5880": {"op": "ADD"}, "5881": {"op": "DUP7"}, "5882": {"op": "PUSH2", "value": "0x149E"}, "5885": {"jump": "i", "op": "JUMP"}, "5886": {"op": "JUMPDEST"}, "5887": {"op": "PUSH1", "value": "0x20"}, "5889": {"op": "DUP4"}, "5890": {"op": "ADD"}, "5891": {"op": "SWAP5"}, "5892": {"op": "SWAP1"}, "5893": {"op": "SWAP5"}, "5894": {"op": "MSTORE"}, "5895": {"op": "POP"}, "5896": {"op": "PUSH1", "value": "0x40"}, "5898": {"op": "ADD"}, "5899": {"op": "MSTORE"}, "5900": {"op": "SWAP2"}, "5901": {"op": "SWAP1"}, "5902": {"op": "POP"}, "5903": {"jump": "o", "op": "JUMP"}, "5904": {"op": "JUMPDEST"}, "5905": {"op": "SWAP4"}, "5906": {"op": "DUP5"}, "5907": {"op": "MSTORE"}, "5908": {"op": "PUSH1", "value": "0x20"}, "5910": {"op": "DUP5"}, "5911": {"op": "ADD"}, "5912": {"op": "SWAP3"}, "5913": {"op": "SWAP1"}, "5914": {"op": "SWAP3"}, "5915": {"op": "MSTORE"}, "5916": {"op": "PUSH1", "value": "0x40"}, "5918": {"op": "DUP4"}, "5919": {"op": "ADD"}, "5920": {"op": "MSTORE"}, "5921": {"op": "PUSH1", "value": "0x1"}, "5923": {"op": "PUSH1", "value": "0x1"}, "5925": {"op": "PUSH1", "value": "0xA0"}, "5927": {"op": "SHL"}, "5928": {"op": "SUB"}, "5929": {"op": "AND"}, "5930": {"op": "PUSH1", "value": "0x60"}, "5932": {"op": "DUP3"}, "5933": {"op": "ADD"}, "5934": {"op": "MSTORE"}, "5935": {"op": "PUSH1", "value": "0x80"}, "5937": {"op": "ADD"}, "5938": {"op": "SWAP1"}, "5939": {"jump": "o", "op": "JUMP"}, "5940": {"op": "JUMPDEST"}, "5941": {"op": "PUSH1", "value": "0x40"}, "5943": {"op": "MLOAD"}, "5944": {"op": "DUP2"}, "5945": {"op": "DUP2"}, "5946": {"op": "ADD"}, "5947": {"op": "PUSH1", "value": "0x1"}, "5949": {"op": "PUSH1", "value": "0x1"}, "5951": {"op": "PUSH1", "value": "0x40"}, "5953": {"op": "SHL"}, "5954": {"op": "SUB"}, "5955": {"op": "DUP2"}, "5956": {"op": "GT"}, "5957": {"op": "DUP3"}, "5958": {"op": "DUP3"}, "5959": {"op": "LT"}, "5960": {"op": "OR"}, "5961": {"op": "ISZERO"}, "5962": {"op": "PUSH2", "value": "0x174F"}, "5965": {"op": "JUMPI"}, "5966": {"op": "INVALID"}, "5967": {"op": "JUMPDEST"}, "5968": {"op": "PUSH1", "value": "0x40"}, "5970": {"op": "MSTORE"}, "5971": {"op": "SWAP2"}, "5972": {"op": "SWAP1"}, "5973": {"op": "POP"}, "5974": {"jump": "o", "op": "JUMP"}, "5975": {"op": "JUMPDEST"}, "5976": {"op": "PUSH1", "value": "0x0"}, "5978": {"op": "PUSH1", "value": "0x1"}, "5980": {"op": "PUSH1", "value": "0x1"}, "5982": {"op": "PUSH1", "value": "0x40"}, "5984": {"op": "SHL"}, "5985": {"op": "SUB"}, "5986": {"op": "DUP3"}, "5987": {"op": "GT"}, "5988": {"op": "ISZERO"}, "5989": {"op": "PUSH2", "value": "0x176A"}, "5992": {"op": "JUMPI"}, "5993": {"op": "INVALID"}, "5994": {"op": "JUMPDEST"}, "5995": {"op": "POP"}, "5996": {"op": "PUSH1", "value": "0x20"}, "5998": {"op": "SWAP1"}, "5999": {"op": "DUP2"}, "6000": {"op": "MUL"}, "6001": {"op": "ADD"}, "6002": {"op": "SWAP1"}, "6003": {"jump": "o", "op": "JUMP"}, "6004": {"op": "JUMPDEST"}, "6005": {"op": "PUSH1", "value": "0x4"}, "6007": {"op": "DUP2"}, "6008": {"op": "LT"}, "6009": {"op": "PUSH2", "value": "0x177E"}, "6012": {"op": "JUMPI"}, "6013": {"op": "INVALID"}, "6014": {"op": "JUMPDEST"}, "6015": {"op": "POP"}, "6016": {"jump": "o", "op": "JUMP"}, "6017": {"op": "JUMPDEST"}, "6018": {"op": "PUSH1", "value": "0x1"}, "6020": {"op": "PUSH1", "value": "0x1"}, "6022": {"op": "PUSH1", "value": "0xA0"}, "6024": {"op": "SHL"}, "6025": {"op": "SUB"}, "6026": {"op": "DUP2"}, "6027": {"op": "AND"}, "6028": {"op": "DUP2"}, "6029": {"op": "EQ"}, "6030": {"op": "PUSH2", "value": "0x177E"}, "6033": {"op": "JUMPI"}, "6034": {"op": "PUSH1", "value": "0x0"}, "6036": {"op": "DUP1"}, "6037": {"op": "REVERT"}}, "sha1": "4d80fbc54e8586c6e2d9fa42dba258a5b57007fb", "source": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\";\nimport \"@balancer-labs/v2-pool-utils/contracts/oracle/QueryProcessor.sol\";\n\nimport \"@balancer-labs/v2-vault/contracts/interfaces/IVault.sol\";\nimport \"@balancer-labs/v2-vault/contracts/interfaces/IBasePool.sol\";\nimport \"@balancer-labs/v2-vault/contracts/interfaces/IGeneralPool.sol\";\nimport \"@balancer-labs/v2-vault/contracts/interfaces/IPoolSwapStructs.sol\";\nimport \"@balancer-labs/v2-vault/contracts/interfaces/IMinimalSwapInfoPool.sol\";\n\nimport \"./WeightedPoolUserData.sol\";\n\ncontract MockVault is IPoolSwapStructs {\n    struct Pool {\n        IERC20[] tokens;\n        mapping(IERC20 => uint256) balances;\n    }\n\n    IAuthorizer private _authorizer;\n    mapping(bytes32 => Pool) private pools;\n\n    event Swap(bytes32 indexed poolId, IERC20 indexed tokenIn, IERC20 indexed tokenOut, uint256 amount);\n\n    event PoolBalanceChanged(bytes32 indexed poolId, address indexed liquidityProvider, IERC20[] tokens, int256[] deltas, uint256[] protocolFees);\n\n    constructor(IAuthorizer authorizer) {\n        // NOTE: terrible workaround Brownie not adding library to current project\n        // unless it is explicitly used somewhere\n        QueryProcessor.findNearestSample;\n\n        _authorizer = authorizer;\n    }\n\n    function getAuthorizer() external view returns (IAuthorizer) {\n        return _authorizer;\n    }\n\n    function getPoolTokens(bytes32 poolId) external view returns (IERC20[] memory tokens, uint256[] memory balances) {\n        Pool storage pool = pools[poolId];\n        tokens = new IERC20[](pool.tokens.length);\n        balances = new uint256[](pool.tokens.length);\n\n        for (uint256 i = 0; i < pool.tokens.length; i++) {\n            tokens[i] = pool.tokens[i];\n            balances[i] = pool.balances[tokens[i]];\n        }\n        /*\n        // DEBUG: Dummy values, no storage access\n        tokens = new IERC20[](3);\n        balances = new uint256[](3);\n        balances[0] = 100e18;\n        balances[1] = 100e18;\n        balances[2] = 100e18;\n        */\n    }\n\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        )\n    {\n        Pool storage pool = pools[poolId];\n        cash = pool.balances[token];\n        // Dummy:\n        managed = 0;\n        lastChangeBlock = 0;\n        assetManager = address(0x0);\n    }\n\n    function registerPool(IVault.PoolSpecialization) external view returns (bytes32) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory\n    ) external {\n        Pool storage pool = pools[poolId];\n        for (uint256 i = 0; i < tokens.length; i++) {\n            pool.tokens.push(tokens[i]);\n        }\n    }\n\n    function updateBalances(bytes32 poolId, uint256[] memory balances) external {\n        Pool storage pool = pools[poolId];\n        for (uint256 i = 0; i < balances.length; i++) {\n            pool.balances[pool.tokens[i]] = balances[i];\n        }\n    }\n\n    function callMinimalPoolSwap(\n        address pool,\n        SwapRequest memory request,\n        uint256 balanceTokenIn,\n        uint256 balanceTokenOut\n    ) external {\n        uint256 amount = IMinimalSwapInfoPool(pool).onSwap(request, balanceTokenIn, balanceTokenOut);\n        emit Swap(request.poolId, request.tokenIn, request.tokenOut, amount);\n    }\n\n    function callGeneralPoolSwap(\n        address pool,\n        SwapRequest memory request,\n        uint256[] memory balances,\n        uint256 indexIn,\n        uint256 indexOut\n    ) external {\n        uint256 amount = IGeneralPool(pool).onSwap(request, balances, indexIn, indexOut);\n        emit Swap(request.poolId, request.tokenIn, request.tokenOut, amount);\n    }\n\n    struct CallJoinPoolGyroParams {\n        IBasePool pool;\n        bytes32 poolId;\n        address sender;\n        address recipient;\n        uint256[] currentBalances;\n        uint256 lastChangeBlock;\n        uint256 protocolSwapFeePercentage;\n        uint256[] amountsIn;\n        uint256 bptOut;\n    }\n\n    // Join pool.\n    // NOTE:\n    // - CallJoinPoolGyroParams.amountsIn is only used upon initialization.\n    // - CallJoinPoolGyroParams.bptOut is only used out of initialization.\n    // This is an unfortunate accident and should in principle be refactored.\n    function callJoinPoolGyro(CallJoinPoolGyroParams memory params)\n        public\n        returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts)\n    {\n        //(, amountsIn, minBPTAmountOut) = abi.decode(self, (JoinKind, uint256[], uint256));\n\n        WeightedPoolUserData.JoinKind kind;\n        bytes memory userData;\n\n        {\n            bool isEmptyPool = true;\n            for (uint256 i = 0; i < params.currentBalances.length; ++i) isEmptyPool = isEmptyPool && (params.currentBalances[i] == 0);\n            if (isEmptyPool) {\n                kind = WeightedPoolUserData.JoinKind.INIT;\n                userData = abi.encode(kind, params.amountsIn, 1e7); //min Bpt\n            } else {\n                kind = WeightedPoolUserData.JoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT;\n                userData = abi.encode(kind, params.bptOut); // bptOut\n            }\n        }\n\n        (amountsIn, dueProtocolFeeAmounts) = params.pool.onJoinPool(\n            params.poolId,\n            params.sender,\n            params.recipient,\n            params.currentBalances,\n            params.lastChangeBlock,\n            params.protocolSwapFeePercentage,\n            userData\n        );\n\n        Pool storage pool = pools[params.poolId];\n\n        for (uint256 i = 0; i < pool.tokens.length; i++) {\n            pool.balances[pool.tokens[i]] += amountsIn[i];\n        }\n\n        IERC20[] memory tokens = new IERC20[](params.currentBalances.length);\n        int256[] memory deltas = new int256[](amountsIn.length);\n        for (uint256 i = 0; i < amountsIn.length; ++i) {\n            deltas[i] = int256(amountsIn[i]);\n        }\n\n        emit PoolBalanceChanged(params.poolId, params.sender, tokens, deltas, dueProtocolFeeAmounts);\n    }\n\n    function callExitPoolGyro(\n        IBasePool pool,\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory currentBalances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        uint256 bptAmountIn\n    ) public returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) {\n        //(, amountsIn, minBPTAmountOut) = abi.decode(self, (JoinKind, uint256[], uint256));\n\n        WeightedPoolUserData.ExitKind kind = WeightedPoolUserData.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT;\n\n        bytes memory userData = abi.encode(kind, bptAmountIn);\n\n        (amountsOut, dueProtocolFeeAmounts) = pool.onExitPool(\n            poolId,\n            sender,\n            recipient,\n            currentBalances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData\n        );\n\n        Pool storage _pool = pools[poolId];\n        for (uint256 i = 0; i < _pool.tokens.length; i++) {\n            _pool.balances[_pool.tokens[i]] -= amountsOut[i];\n        }\n\n        IERC20[] memory tokens = new IERC20[](currentBalances.length);\n        int256[] memory deltas = new int256[](amountsOut.length);\n        for (uint256 i = 0; i < amountsOut.length; ++i) {\n            deltas[i] = int256(amountsOut[i]);\n        }\n\n        emit PoolBalanceChanged(poolId, sender, tokens, deltas, dueProtocolFeeAmounts);\n    }\n\n    function callMinimalGyroPoolSwap(\n        address poolAddress,\n        SwapRequest memory request, //with incomplete userData\n        uint256 balanceTokenIn,\n        uint256 balanceTokenOut\n    ) external {\n        // User Data not used in swap\n        // bytes memory userData = abi.encode(kind,amountsOutStr,10 * 10 ** 25); //maxBPTAmountIn\n        //request.userData  = userData;\n\n        // Dummy to ensure storage is warm. We can't just call getPoolTokens() b/c it's external.\n        // The following makes the two balances warm that the real vault will have warm.\n        {\n            Pool storage pool = pools[request.poolId];\n            uint256 dummy;\n            dummy = pool.balances[request.tokenIn] + pool.balances[request.tokenOut];\n            // no-op to prevent the optimizer from removing this code:\n            if (dummy == 0) return;\n        }\n        /*{\n            Pool storage pool = pools[request.poolId];\n            IERC20[] memory tokens = new IERC20[](pool.tokens.length);\n            uint256[] memory balances = new uint256[](pool.tokens.length);\n\n            for (uint256 i = 0; i < pool.tokens.length; i++) {\n                tokens[i] = pool.tokens[i];\n                balances[i] = pool.balances[tokens[i]];\n            }\n            // DEBUG noop\n            if(balances[0] == 0 && balances[1] == 0 && balances[2] == 0) {\n                return;\n            }\n        }\n        {\n            Pool storage pool = pools[request.poolId];\n            IERC20[] memory tokens = new IERC20[](pool.tokens.length);\n            uint256[] memory balances = new uint256[](pool.tokens.length);\n\n            for (uint256 i = 0; i < pool.tokens.length; i++) {\n                tokens[i] = pool.tokens[i];\n                balances[i] = pool.balances[tokens[i]];\n            }\n            // DEBUG noop\n            if(balances[0] == 0 && balances[1] == 0 && balances[2] == 0) {\n                return;\n            }\n        }*/\n\n        uint256 amount = IMinimalSwapInfoPool(poolAddress).onSwap(request, balanceTokenIn, balanceTokenOut);\n        emit Swap(request.poolId, request.tokenIn, request.tokenOut, amount);\n\n        Pool storage _pool = pools[request.poolId];\n        _pool.balances[request.tokenIn] += request.amount;\n        _pool.balances[request.tokenOut] -= amount;\n    }\n\n    function getPoolId() external view returns (bytes32) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n", "sourceMap": "1301:9517:30:-:0;;;1777:253;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1999:11;:24;;-1:-1:-1;;;;;;1999:24:30;-1:-1:-1;;;;;1999:24:30;;;;;;;;;;1301:9517;;14:331:125;;158:2;146:9;137:7;133:23;129:32;126:2;;;179:6;171;164:22;126:2;210:16;;-1:-1:-1;;;;;255:31:125;;245:42;;235:2;;306:6;298;291:22;235:2;334:5;116:229;-1:-1:-1;;;116:229:125:o;:::-;1301:9517:30;;;;;;", "sourcePath": "contracts/testing/MockVault.sol", "type": "contract", "deployment": {"address": "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B", "chainid": "1337", "blockHeight": 4}}